<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>LyRiXx Blog</title>
    <subtitle>Web Dev, PHP, Symfony, Open Source</subtitle>
    <link href="http://blog.lyrixx.info/feed/index.atom" rel="self" />
    <link href="http://blog.lyrixx.info/" />
        <id>http://blog.lyrixx.info/</id>
            <updated>2013-04-12T00:00:00+02:00</updated>
            <entry>
        <title>Symfony2: How to mock services during functional tests</title>
                <id>http://blog.lyrixx.info/2013/04/12/symfony2-how-to-mock-services-during-functional-tests.html</id>
                <updated>2013-04-12T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/2013/04/12/symfony2-how-to-mock-services-during-functional-tests.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>When you are working with web-service and you want to add some tests, you have
two options:</p>
<ul><li>Use the real service</li>
<li>Mock the service</li>
</ul><p>The first one has some advantages: If the web-service change, your tests will
fail. And it has some inconvenience: If the web-service is momently down, your
tests fail.</p>
<p>But sometime, you really want to mock these services to perform some extra
tests, such as emulate a service down, etc...</p>
<p>With Symfony2 you have some options to mock a web-service.</p>
<p>The first one is to use a mock class for <code>test</code> environment. Here, we assume you
have created a Symfony2 service (think DIC) to wrap the web-service.</p>
<p>The first
option is to change the service through the configuration in
<code>app/config/config_test.yml</code>. So you may have something like this in your
<code>src/MyBundle/Resources/config/services.xml</code>:</p>
<pre><code>&lt;parameters&gt;
    &lt;parameter key="my_bundle.twitter.class"&gt;Twitter&lt;/parameter&gt;
&lt;/parameters&gt;

&lt;services&gt;
    &lt;service id="my_bundle.twitter" class="%my_bundle.twitter.class%"&gt;
    &lt;/service&gt;
&lt;services&gt;</code></pre>
<p>and so the <code>config_test.yml</code></p>
<pre><code>parameters:
    my_bundle.twitter.class: TwitterMock</code></pre>
<p>This option is not very flexible because we can emulate a service down, ...</p>
<p>So the second option is to replace the service by a <code>phpunit</code> mock. To do that,
we have to change during the runtime a Symfony2 service. But this is not so
easy, because symfony will shutdown and re-boot your kernel between each
request (<a href="https://github.com/symfony/symfony/blob/3196dbdf528ab62c304b72b3208f8d03f7247203/src/Symfony/Bundle/FrameworkBundle/Client.php#L94-L102">see here</a>).</p>
<p>So the idea is to override the Kernel to allow the developer to execute some
code after the <code>boot</code> call. So we start to create a new kernel:</p>
<pre><code>&lt;?php

// app/AppTestKernel.php

require_once __DIR__.'/AppKernel.php';

class AppTestKernel extends AppKernel
{
    private $kernelModifier = null;

    public function boot()
    {
        parent::boot();

        if ($kernelModifier = $this-&gt;kernelModifier) {
            $kernelModifier($this);
            $this-&gt;kernelModifier = null;
        };
    }

    public function setKernelModifier(\Closure $kernelModifier)
    {
        $this-&gt;kernelModifier = $kernelModifier;

        // We force the kernel to shutdown to be sure the next request will boot it
        $this-&gt;shutdown();
    }
}</code></pre>
<p>And now, we can alter the kernel during the test:</p>
<pre><code>class TwitterTest extends WebTestCase
{
    public function testTwitter()
    {
        $twitter = $this-&gt;getMock('Twitter');
        // Configure your mock here.
        static::$kernel-&gt;setKernelModifier(function($kernel) use ($twitter) {
            $kernel-&gt;getContainer()-&gt;set('my_bundle.twitter', $twitter);
        });

        $this-&gt;client-&gt;request('GET', '/fetch/twitter'));

        $this-&gt;assertSame(200, $this-&gt;client-&gt;getResponse()-&gt;getStatusCode());
    }
}</code></pre>
<p>And thats it ;)</p>]]></content>
    </entry>
        <entry>
        <title>What my sismo configuration looks like?</title>
                <id>http://blog.lyrixx.info/2013/02/07/what-is-look-like-my-sismo-config.html</id>
                <updated>2013-02-07T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/2013/02/07/what-is-look-like-my-sismo-config.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><a href="http://sismo.sensiolabs.org/">Sismo</a> is a Continuous Testing Server written in
PHP. It builds all projects I'm working on with it.</p>
<p>It's very fast to set up a newproject, but it's a little but boring. So I want
to share my <code>~/.sismo/config.php</code> and a little script to set-up a new project.</p>
<pre><code>&lt;?php

// ~/.sismo/config.php

Sismo\Project::setDefaultCommand('if [ -f composer.json ]; then composer install --dev; fi &amp;&amp; phpunit');

$notifier = new Sismo\Notifier\DBusNotifier();

$sfCommand = &lt;&lt;&lt;'EOL'
cp app/config/parameters.yml-dist app/config/parameters.yml

sed -i -e "s/database_user:.*/database_user: greg/" app/config/parameters.yml
sed -i -e "s/database_password:.*/database_password: ~/" app/config/parameters.yml

./bin/run-tests.sh
EOL;

$projects = array(
    (new Sismo\Project(ucfirst('monolog'), '/home/greg/dev/labs/monolog', $notifier)),
    (new Sismo\Project('Project FOO', '/home/greg/dev/project/foo', $notifier))-&gt;setCommand($sfCommand),
    // ...
);

return $projects;</code></pre>
<p>And then the little script to set up the <strong>post commit hook</strong> and <code>config.php</code>.</p>
<ol><li>Put this command in your <code>$PATH</code> (like <code>/usr/local/bin/sismo-add</code>)</li>
<li>Adapt the <code>SISMO_PATH</code></li>
<li>Then call it from a git project that you want to test with sismo</li>
</ol><p>The script:</p>
<pre><code>#!/bin/bash

SISMO_PATH=$HOME/dev/labs/sismo/sismo

#/usr/local/bin/sismo-add

######################################
# Do not change code after this line #
######################################

BASE_PATH=`pwd`
SLUG=`basename $BASE_PATH`

cat &gt; $BASE_PATH/.git/hooks/post-commit &lt;&lt;EOL
#!/bin/bash

$SISMO_PATH build $SLUG \`git log -1 HEAD --pretty="%H"\` --force --quiet &amp;
EOL

chmod +x $BASE_PATH/.git/hooks/post-commit

SISMO_PROJECT="    (new Sismo\\\\Project(ucfirst('$SLUG'), '$BASE_PATH', \$notifier)),"

sed -ie "s#\(\$projects = array(\)#\1\n$SISMO_PROJECT#" $HOME/.sismo/config.php</code></pre>]]></content>
    </entry>
        <entry>
        <title>How to open a file with sublime text from your browser</title>
                <id>http://blog.lyrixx.info/2013/02/05/how-to-open-a-file-with-sublime-text-from-your-browser.html</id>
                <updated>2013-02-05T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/2013/02/05/how-to-open-a-file-with-sublime-text-from-your-browser.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><strong>Note:</strong> This work only with ubuntu.</p>
<h2 id="why">Why?<a href="#why" class="anchor">#</a></h2>
<p>If you are doing some <strong>php with sublime text 2</strong>, this tips will enjoy your
day. You can configure your system (ubuntu, may be other other distro too) to
handle links like <code>subl:///tmp/file.txt?10</code> to open the file <code>/tmp/file.txt</code>
with sublime text 2 at the line <code>10</code>. To do that, you have to register a new
<strong>protocol handler</strong>, and to configure <strong>xdebug</strong>.</p>
<p>When did it happend ? When a fatal error or an exception is throwed by php:</p>
<p><img alt="Xdebug" src="../../../images/xdebug.png"></p>
<p>With this tip <code>/opt/dotefiles/www/fail.php</code> is clickable.</p>
<p><strong>Note:</strong> If you are using symfony2 all files in an exception page, or the web
developper toolbar will be clickable!!!</p>
<h2 id="how">How?<a href="#how" class="anchor">#</a></h2>
<p>Start by editing <code>~/.local/share/applications/mimeapps.list</code>:</p>
<pre><code>[Added Associations]
# ...
x-scheme-handler/subl=subl-urlhandler.desktop</code></pre>
<p>Then create the file <code>/usr/share/applications/subl-urlhandler.desktop</code>. (This is
a fake application):</p>
<pre><code>[Desktop Entry]
Version=1.0
Name=Sublime Text 2
Name[en_PH]=Sublime Text 2
Exec=xdebug-urlhandler %u
Icon=/opt/subl/Icon/48x48/sublime_text.png
Terminal=false
Type=Application
Categories=Development;
StartupNotify=true
MimeType=x-scheme-handler/subl;</code></pre>
<p>And then create the file <code>/usr/local/bin/xdebug-urlhandler</code>:</p>
<pre><code>#!/usr/bin/env bash
request=${1:7}
sublime-text $request</code></pre>
<p>You should run:</p>
<pre><code>sudo chmod +x /usr/local/bin/xdebug-urlhandler</code></pre>
<p>And now you have to configure xdebug <code>/etc/php5/conf.d/90-my.ini</code>:</p>
<pre><code>[PHP]
xdebug.file_link_format=subl://%f:%l</code></pre>
<p>Thinks to restart <code>apache</code> or <code>php-fpm</code>. <strong>Enjoy</strong></p>
<p><a href="https://gist.github.com/svizion/3654834">Source</a></p>]]></content>
    </entry>
        <entry>
        <title>Symfony2: How to debug your functionals tests</title>
                <id>http://blog.lyrixx.info/2013/02/03/symfony2-how-to-debug-your-functional-tests.html</id>
                <updated>2013-02-03T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/2013/02/03/symfony2-how-to-debug-your-functional-tests.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>When you write functional tests with <strong>symfony2</strong> and <strong>phpunit</strong>, it could be
hard to debug them if an exception happened. You can try to <code>var_dump</code> the
response, but since you ran tests from cli, the output is totally unreadable.</p>
<p>So there is a very usefull way to view what happening. You should add
<code>echo $this-&gt;client-&gt;getReponse()-&gt;getContent();die;</code>:</p>
<pre><code>namespace MyBundle\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class UserControllerTest extends WebTestCase
{
    public function testRegister()
    {
        $this-&gt;client-&gt;request('GET', '/register');

        echo $this-&gt;client-&gt;getReponse()-&gt;getContent();die;// Just add this line

        // Perform some test
        // $this-&gt;assertOk($this-&gt;client);
        // ...
    }
}</code></pre>
<p>And then run your test:</p>
<pre><code>phpunit --filter testRegister path/to/the/test/UserControllerTest.php &gt; web/debug.html</code></pre>
<p>And now, you can browse <code>http://yourpoject.localhost/debug.html</code> with your favorite browser.</p>]]></content>
    </entry>
        <entry>
        <title>Symfony2: Snippet to render all form errors</title>
                <id>http://blog.lyrixx.info/2013/01/31/symfony2-snippet-to-render-all-form-error.html</id>
                <updated>2013-01-31T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/2013/01/31/symfony2-snippet-to-render-all-form-error.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p></p>
<p>With symfony 2, you can render all errors from a form with a little macro. You
can use it for only one form, or for all your application</p>
<h3 id="the-macro">The macro<a href="#the-macro" class="anchor">#</a></h3>
<pre><code>{# MyBundle:form.html.twig #}

{% macro display_error(form) %}
    {% import _self as forms %}
    &lt;ul&gt;
        {% for child in form if not child.vars.valid %}
            &lt;li&gt;
                {% if child.vars.compound and not child.vars.valid %}
                    {{ child.vars.label|trans|capitalize }}:
                    {{ forms.display_error(child) }}
                {% else %}
                    &lt;h5&gt;
                        &lt;a href="#{{ child.vars.id }}"&gt;
                            {{ child.vars.label|trans|capitalize }}:
                        &lt;/a&gt;
                        &lt;small&gt;
                            {% for error in child.vars.errors %}
                                {{ error.message|capitalize }}
                            {% endfor %}
                        &lt;/small&gt;
                    &lt;/h5&gt;
                {% endif %}
            &lt;/li&gt;
        {% endfor %}
    &lt;/ul&gt;
{% endmacro %}</code></pre>
<h3 id="usage">Usage<a href="#usage" class="anchor">#</a></h3>
<h4 id="just-for-one-form">Just for one form:<a href="#just-for-one-form" class="anchor">#</a></h4>
<pre><code>{# MyBundle:User:new.html.twig #}

{% import "MyBundle:form.html.twig" as macros %}

{% if not form.vars.valid %}
    &lt;!-- Wep, this is some twitter bootstrap markup --&gt;
    &lt;div class="alert alert-block alert-error"&gt;
        &lt;button type="button" class="close" data-dismiss="alert"&gt;&amp;times;&lt;/button&gt;
        &lt;h3&gt;Oh snap!&lt;/h3&gt;
        &lt;p&gt;&lt;strong&gt;Change a few things up and try submitting again.&lt;/strong&gt;&lt;/p&gt;
        {{ macros.display_error(form) }}
    &lt;/div&gt;
{% endif %}</code></pre>
<h4 id="for-all-you-application">For all you application<a href="#for-all-you-application" class="anchor">#</a></h4>
<p>Add the layout in your <code>config.yml</code>:</p>
<pre><code>twig:
    form:
        resources:
            - MyBundle::form_div_layout.html.twig</code></pre>
<p>And override the <code>form_errors</code> block:</p>
<pre><code>{# form_div_layout.html.twig #}

{% block form_errors %}
{% spaceless %}
    {% import "MyBundle:form.html.twig" as macros %}
    {% if not form.parent and not form.vars.valid %}
         {% import _self as forms %}
        &lt;div class="alert alert-block alert-error"&gt;
            &lt;button type="button" class="close" data-dismiss="alert"&gt;&amp;times;&lt;/button&gt;
            &lt;h3&gt;Oh snap!&lt;/h3&gt;
            &lt;p&gt;&lt;strong&gt;Change a few things up and try submitting again.&lt;/strong&gt;&lt;/p&gt;
            {{ macros.display_project_error(form) }}
        &lt;/div&gt;
    {% else %}
        {{ parent() }}
    {% endif %}
{% endspaceless %}
{% endblock %}</code></pre>
<p></p>]]></content>
    </entry>
        <entry>
        <title>Sublime text 2 et xdebug : liens cliquables sur les fichiers</title>
                <id>http://blog.lyrixx.info/web-dev/sublime-text-2-et-xdebug-liens-cliquables-sur-les-fichiers.html</id>
                <updated>2012-02-23T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/web-dev/sublime-text-2-et-xdebug-liens-cliquables-sur-les-fichiers.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Salut,</p>
<p>Si comme moi vous utilisez sublime text 2 pour d&eacute;velopper, vous allez appr&eacute;cier
ce petit tips. Par exemple quand vous avez une erreur 500 et / ou une fatal
erreur, xdebug vous affiche la backtrace avec le nom des fichiers. Gr&acirc;ce a ce
hacks, <strong>il est possible d&rsquo;ouvrir directement dans sublimetext le fichier
correspondant</strong>.</p>
<h2 id="configuration-de-xdebug">Configuration de Xdebug :<a href="#configuration-de-xdebug" class="anchor">#</a></h2>
<p>dans le fichier xdebug.ini (ou directement dans php.ini) il faut ajouter la
ligne suivante :</p>
<pre><code>xdebug.file_link_format=sblm://%f?%l</code></pre>
<p>Puis red&eacute;marrer apache ou php-fpm &hellip;</p>
<h2 id="configuration-de-sublime-text">Configuration de sublime text<a href="#configuration-de-sublime-text" class="anchor">#</a></h2>
<p>Il faut ajouter <a href="https://bitbucket.org/sublimator/sublimeprotocol/src/">ce
package</a> dans la liste
des packages. Il suffit de d&eacute;zipper le contenue de l&rsquo;archive dans le dossier
package de sublime text 2, disponssible via le menu &laquo; Preference &gt; Browse
Package&nbsp;&raquo;</p>
<p>Et voila le tours est jou&eacute; ;)</p>
<h2 id="attention">Attention<a href="#attention" class="anchor">#</a></h2>
<p>Cela ne marche pour l&rsquo;instant que sur windows. Je pense que c&rsquo;est assez
simple de faire la meme choses pour linux.</p>
<h2 id="source">Source<a href="#source" class="anchor">#</a></h2>
<ul><li><a href="http://www.sublimetext.com/forum/viewtopic.php?f=4&amp;t=116&amp;start=10">Topic du forum</a></li>
<li><a href="http://www.koch.ro/blog/index.php?/archives/77-Firefox,-VIM,-Xdebug-Jumping-to-the-error-line.html">Astuce pour VIM</a></li>
</ul>]]></content>
    </entry>
        <entry>
        <title>Mysql + export + csv + groupy en gardant les colonnes groupées</title>
                <id>http://blog.lyrixx.info/web-dev/mysql-export-csv-groupy-en-gardant-les-colonnes-groupees.html</id>
                <updated>2012-02-01T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/web-dev/mysql-export-csv-groupy-en-gardant-les-colonnes-groupees.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Petit tips avec MySQL. Admettons que vous voulez faire un export en csv d&rsquo;une
table (A). Dans ce cas, c&rsquo;est facile, il suffit d&rsquo;utiliser &laquo;&nbsp;INTO OUTFILE&nbsp;&raquo;. Par
contre, si vous avez une jointure (A -&gt; B), c&rsquo;est plus compliqu&eacute;.</p>
<p>Il y a plusieurs solutions : soit on se retrouve avec plusieurs ligne de la
table A en double, puis &agrave; &laquo;&nbsp;droite&nbsp;&raquo; de ces lignes , les colonnes de la table B.</p>
<p>Soit on utilise la fonction <a href="dev.mysql.com/doc/refman/5.0/fr/group-by-functions.html#id441997">group_concat</a>; et un petit hack ;)</p>
<p>Exemple :</p>
<pre><code>SELECT c.id, c.first_name, c.last_name,&nbsp;GROUP_CONCAT(CONCAT(p.bar_code, '||', p.quantity, '||', p.date) SEPARATOR "||")
    FROM contact c
    LEFT JOIN product p on (c.id = p.contact_id)
    GROUP BY c.id
    INTO OUTFILE '/tmp/export.csv' FIELDS TERMINATED BY ';' OPTIONALLY ENCLOSED BY '"'
;</code></pre>
<p>On fait notre jointure normalement, on group by sur c.id, et c&rsquo;est dans le
select qu&rsquo;il y a une peu de magie. On va d&rsquo;abord concat&eacute;ner les attributs de la
table &laquo;&nbsp;product&nbsp;&raquo; avec comme s&eacute;parateur deux pipes &laquo;&nbsp;||&nbsp;&raquo;. Et ensuite, on va
concat&eacute;ner toutes les valeurs r&eacute;sultantes de la fonction GROUP BY.</p>
<p>Enfin, il va falloir remplacer tous nos doubles pipes (<code>||</code>) par <code>;</code> qui
correspond a nos d&eacute;limiteurs de champs.</p>
<pre><code>sed -i 's/||/";"/g' /tmp/export.csv</code></pre>
<p>Et voila, vous avec un beau fichier CSV bien format&eacute; ;) Ici le hack c&rsquo;est de
remplacer un d&eacute;limiteur un peu sp&eacute;cial &laquo;&nbsp;||&nbsp;&raquo; par un vrai d&eacute;limiteur, a
posteriori.</p>
<p>P.S. : Il se peut que mysql exporte le fichier csv avec l&rsquo;utilisateur mysql.
Vous n&rsquo;aurez donc pas les droits pour le lire et/ou le modifier. Il faut donc
passer en root ;).</p>]]></content>
    </entry>
        <entry>
        <title>Silex Kitchen Edition</title>
                <id>http://blog.lyrixx.info/silex/silex-kitchen-edition.html</id>
                <updated>2011-10-24T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/silex/silex-kitchen-edition.html"/>
        <content type="html" xml:lang="en"><![CDATA[<div class="pull-right">
    <img src="../images/silex.png" alt="Silex"></div>
<p><strong>Silex est un micro-framework</strong> (en php) bas&eacute; sur les <strong>composants symfony2</strong>.
Je vous invite &agrave; aller voir la
<a href="http://silex.sensiolabs.org/documentation">documentation</a>. Elle est d&eacute;j&agrave; tr&egrave;s
bien fournie.</p>
<p>Cependant, si vous voulez d&eacute;buter avec silex, je vous propose une &eacute;dition avec
une achitecture d&eacute;j&agrave; mise en place, qui respecte les bonnes pratiques. On y
retrouve les services suivants: <strong>sessions</strong>, <strong>cache</strong>, <strong>twig</strong>, <strong>assetic</strong>,
<strong>doctrine</strong>, <strong>translation</strong>, <strong>form</strong>, <strong>test</strong>. De plus, elle est
packag&eacute; avec <strong><a href="http://twitter.github.com/bootstrap/">twitter bootstrap</a></strong>.</p>
<p>Je vous invite &agrave; lire <a href="http://lyrixx.github.com/Silex-Kitchen-Edition/">la doc</a>
ou &agrave; la <a href="https://github.com/lyrixx/Silex-Kitchen-Edition">t&eacute;l&eacute;charger sur github</a></p>]]></content>
    </entry>
        <entry>
        <title>Lister ses films</title>
                <id>http://blog.lyrixx.info/ubuntu/lister-ses-films.html</id>
                <updated>2011-06-05T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/ubuntu/lister-ses-films.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Un petit script bash (donc pour linux/mac) pour lister tous les films qui
peuvent trainer dans plusieurs r&eacute;pertoires et sous r&eacute;pertoires&hellip;</p>
<pre><code>wget https://gist.github.com/raw/1008082/dc6cdb8ae50bd981ae9458cc270f96de41583718/movieList.sh
chmod +x movieList.sh
# Configure VIDEO_FOLDER
./movieList.sh
cat movie_list.txt</code></pre>
<p>Script :</p>
<pre><code>#!/bin/bash

VIDEO_FOLDER=(
  /PATH/TO/MOVIE1
  /PATH/TO/MOVIE2
)
VIDEO_EXTENTION=(avi mkv mpg mpeg)

OUTPUT='movie_list.txt'
OUTPUT_TEMP=${OUTPUT}.temp

`&gt;$OUTPUT_TEMP`

for folder in "${VIDEO_FOLDER[@]}"
do
  if [ -d $folder ]; then
      for ext in "${VIDEO_EXTENTION[@]}"
      do
        find $folder -iname "*.$ext" &gt;&gt; $OUTPUT_TEMP
      done
  fi
done

`cat $OUTPUT_TEMP | awk -F "/" '{print $NF;}' | sort | uniq &gt; $OUTPUT`
`rm $OUTPUT_TEMP`</code></pre>]]></content>
    </entry>
        <entry>
        <title>Symfony2 en vidéo</title>
                <id>http://blog.lyrixx.info/symfony/symfony2-en-video.html</id>
                <updated>2011-01-03T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/symfony/symfony2-en-video.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Voici l&rsquo;&eacute;volution du code source de &lt;a href="<a href="http://symfony.com">http://symfony.com</a>/"
target="_blank"&gt;symfony2 r&eacute;alis&eacute; gr&acirc;ce &agrave; &lt;a
href="<a href="http://code.google.com/p/gource">http://code.google.com/p/gource</a>/" target="_blank"&gt;gource, ffmpef,
pitivi et ubuntu ;)</p>
<iframe width="853" height="480" src="http://www.youtube.com/embed/164Z1gyqk6M" frameborder="0" allowfullscreen></iframe>
<p>(Il est possible de voir la vid&eacute;o en HD)</p>
<p>La ligne de commande qui a permit le r&eacute;sultat:</p>
<pre><code>gource --title "Symfony2" -s .25 --file-idle-time 600&nbsp; --auto-skip-seconds 1 -1920x1080 --output-framerate 30 --stop-at-end --max-files 1000000 --bloom- multiplier 1.1 --bloom-intensity .25 --background 101010&nbsp; --highlight-dirs --highlight-users --hide filenames,date,progress --output-ppm-stream - | nice -n19 ffmpeg -y -b 3000k -r 30 -f image2pipe -vcodec ppm -i - -vcodec libx264 -vpre hq -crf 22 -threads 0 symfony.avi</code></pre>]]></content>
    </entry>
    </feed>
