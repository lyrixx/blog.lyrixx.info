<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>LyRiXx Blog</title>
    <subtitle>Web Dev, PHP, Symfony, Open Source</subtitle>
    <link href="http://blog.lyrixx.info/index.atom" rel="self" />
    <link href="http://blog.lyrixx.info/" />
        <id>http://blog.lyrixx.info/</id>
            <updated>2013-04-12T00:00:00+02:00</updated>
            <entry>
        <title>Symfony2: How to mock services during functional tests</title>
                <id>http://blog.lyrixx.info/2013/04/12/symfony2-how-to-mock-services-during-functional-tests.html</id>
                <updated>2013-04-12T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/2013/04/12/symfony2-how-to-mock-services-during-functional-tests.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>When you are working with web-service and you want to add some tests, you have
two options:</p>

<ul>
<li>Use the real service</li>
<li>Mock the service</li>
</ul>

<p>The first one has some advantages: If the web-service change, your tests will
fail. And it has some inconvenience: If the web-service is momently down, your
tests fail.</p>

<p>But sometime, you really want to mock these services to perform some extra
tests, such as emulate a service down, etc...</p>

<p>With Symfony2 you have some options to mock a web-service.</p>

<p>The first one is to use a mock class for <code>test</code> environment. Here, we assume you
have created a Symfony2 service (think DIC) to wrap the web-service.</p>

<p>The first
option is to change the service through the configuration in
<code>app/config/config_test.yml</code>. So you may have something like this in your
<code>src/MyBundle/Resources/config/services.xml</code>:</p>

<pre><code>&lt;parameters&gt;
    &lt;parameter key="my_bundle.twitter.class"&gt;Twitter&lt;/parameter&gt;
&lt;/parameters&gt;

&lt;services&gt;
    &lt;service id="my_bundle.twitter" class="%my_bundle.twitter.class%"&gt;
    &lt;/service&gt;
&lt;services&gt;
</code></pre>

<p>and so the <code>config_test.yml</code></p>

<pre><code>parameters:
    my_bundle.twitter.class: TwitterMock
</code></pre>

<p>This option is not very flexible because we can emulate a service down, ...</p>

<p>So the second option is to replace the service by a <code>phpunit</code> mock. To do that,
we have to change during the runtime a Symfony2 service. But this is not so
easy, because symfony will shutdown and re-boot your kernel between each
request (<a href="https://github.com/symfony/symfony/blob/3196dbdf528ab62c304b72b3208f8d03f7247203/src/Symfony/Bundle/FrameworkBundle/Client.php#L94-L102">see here</a>).</p>

<p>So the idea is to override the Kernel to allow the developer to execute some
code after the <code>boot</code> call. So we start to create a new kernel:</p>

<pre><code>&lt;?php

// app/AppTestKernel.php

require_once __DIR__.'/AppKernel.php';

class AppTestKernel extends AppKernel
{
    private $kernelModifier = null;

    public function boot()
    {
        parent::boot();

        if ($kernelModifier = $this-&gt;kernelModifier) {
            $kernelModifier($this);
            $this-&gt;kernelModifier = null;
        };
    }

    public function setKernelModifier(\Closure $kernelModifier)
    {
        $this-&gt;kernelModifier = $kernelModifier;

        // We force the kernel to shutdown to be sure the next request will boot it
        $this-&gt;shutdown();
    }
}
</code></pre>

<p>And now, we can alter the kernel during the test:</p>

<pre><code>class TwitterTest extends WebTestCase
{
    public function testTwitter()
    {
        $twitter = $this-&gt;getMock('Twitter');
        // Configure your mock here.
        static::$kernel-&gt;setKernelModifier(function($kernel) use ($twitter) {
            $kernel-&gt;getContainer()-&gt;set('my_bundle.twitter', $twitter);
        });

        $this-&gt;client-&gt;request('GET', '/fetch/twitter'));

        $this-&gt;assertSame(200, $this-&gt;client-&gt;getResponse()-&gt;getStatusCode());
    }
}
</code></pre>

<p>And thats it ;)</p>
]]></content>
    </entry>
        <entry>
        <title>What my sismo configuration looks like?</title>
                <id>http://blog.lyrixx.info/2013/02/07/what-is-look-like-my-sismo-config.html</id>
                <updated>2013-02-07T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/2013/02/07/what-is-look-like-my-sismo-config.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><a href="http://sismo.sensiolabs.org/">Sismo</a> is a Continuous Testing Server written in
PHP. I build all projects I'm working on with it.</p>

<p>It's very fast to set up a newproject, but it's a little but boring. So I want
to share my <code>~/.sismo/config.php</code> and a little script to set-up a new project.</p>

<pre><code>&lt;?php

// ~/.sismo/config.php

Sismo\Project::setDefaultCommand('if [ -f composer.json ]; then composer install --dev; fi &amp;&amp; phpunit');

$notifier = new Sismo\Notifier\DBusNotifier();

$sfCommand = &lt;&lt;&lt;'EOL'
cp app/config/parameters.yml-dist app/config/parameters.yml

sed -i -e "s/database_user:.*/database_user: greg/" app/config/parameters.yml
sed -i -e "s/database_password:.*/database_password: ~/" app/config/parameters.yml

./bin/run-tests.sh
EOL;

$projects = array(
    (new Sismo\Project(ucfirst('monolog'), '/home/greg/dev/labs/monolog', $notifier)),
    (new Sismo\Project('Project FOO', '/home/greg/dev/project/foo', $notifier))-&gt;setCommand($sfCommand),
    // ...
);

return $projects;
</code></pre>

<p>And then the little script to set up the <strong>post commit hook</strong> and <code>config.php</code>.</p>

<ol>
<li>Put this command in your <code>$PATH</code> (like <code>/usr/local/bin/sismo-add</code>)</li>
<li>Adapt the <code>SISMO_PATH</code></li>
<li>Then call it from a git project that you want to test with sismo</li>
</ol>

<p>The script:</p>

<pre><code>#!/bin/bash

SISMO_PATH=$HOME/dev/labs/sismo/sismo

#/usr/local/bin/sismo-add

######################################
# Do not change code after this line #
######################################

BASE_PATH=`pwd`
SLUG=`basename $BASE_PATH`

cat &gt; $BASE_PATH/.git/hooks/post-commit &lt;&lt;EOL
#!/bin/bash

$SISMO_PATH build $SLUG \`git log -1 HEAD --pretty="%H"\` --force --quiet &amp;
EOL

chmod +x $BASE_PATH/.git/hooks/post-commit

SISMO_PROJECT="    (new Sismo\\\\Project(ucfirst('$SLUG'), '$BASE_PATH', \$notifier)),"

sed -ie "s#\(\$projects = array(\)#\1\n$SISMO_PROJECT#" $HOME/.sismo/config.php
</code></pre>
]]></content>
    </entry>
        <entry>
        <title>How to open a file with sublime text from your browser</title>
                <id>http://blog.lyrixx.info/2013/02/05/how-to-open-a-file-with-sublime-text-from-your-browser.html</id>
                <updated>2013-02-05T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/2013/02/05/how-to-open-a-file-with-sublime-text-from-your-browser.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><strong>Note:</strong> This work only with ubuntu.</p>

<h2>Why?</h2>

<p>If you are doing some <strong>php with sublime text 2</strong>, this tips will enjoy your
day. You can configure your system (ubuntu, may be other other distro too) to
handle links like <code>subl:///tmp/file.txt?10</code> to open the file <code>/tmp/file.txt</code>
with sublime text 2 at the line <code>10</code>. To do that, you have to register a new
<strong>protocol handler</strong>, and to configure <strong>xdebug</strong>.</p>

<p>When did it happend ? When a fatal error or an exception is throwed by php:</p>

<p><img src="../../../images/xdebug.png" alt="Xdebug" /></p>

<p>With this tip <code>/opt/dotefiles/www/fail.php</code> is clickable.</p>

<p><strong>Note:</strong> If you are using symfony2 all files in an exception page, or the web
developper toolbar will be clickable!!!</p>

<h2>How?</h2>

<p>Start by editing <code>~/.local/share/applications/mimeapps.list</code>:</p>

<pre><code>[Added Associations]
# ...
x-scheme-handler/subl=subl-urlhandler.desktop
</code></pre>

<p>Then create the file <code>/usr/share/applications/subl-urlhandler.desktop</code>. (This is
a fake application):</p>

<pre><code>[Desktop Entry]
Version=1.0
Name=Sublime Text 2
Name[en_PH]=Sublime Text 2
Exec=xdebug-urlhandler %u
Icon=/opt/subl/Icon/48x48/sublime_text.png
Terminal=false
Type=Application
Categories=Development;
StartupNotify=true
MimeType=x-scheme-handler/subl;
</code></pre>

<p>And then create the file <code>/usr/local/bin/xdebug-urlhandler</code>:</p>

<pre><code>#!/bin/bash

url=$1
file=${url#subl*//}
path=`echo $file | cut -d? -f 1`
line=`echo $file | cut -d? -f 2`
sublime-text $path:$line
</code></pre>

<p>You should run:</p>

<pre><code>sudo chmod +x /usr/local/bin/xdebug-urlhandler
</code></pre>

<p>And now you have to configure xdebug <code>/etc/php5/conf.d/90-my.ini</code>:</p>

<pre><code>[PHP]
xdebug.file_link_format=subl://%f?%l
</code></pre>

<p>Thinks to restart <code>apache</code> or <code>php-fpm</code>. <strong>Enjoy</strong></p>

<p><a href="https://gist.github.com/svizion/3654834">Source</a></p>
]]></content>
    </entry>
        <entry>
        <title>Symfony2: How to debug your functionals tests</title>
                <id>http://blog.lyrixx.info/2013/02/03/symfony2-how-to-debug-your-functional-tests.html</id>
                <updated>2013-02-03T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/2013/02/03/symfony2-how-to-debug-your-functional-tests.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>When you write functional tests with <strong>symfony2</strong> and <strong>phpunit</strong>, it could be
hard to debug them if an exception happened. You can try to <code>var_dump</code> the
response, but since you ran tests from cli, the output is totally unreadable.</p>

<p>So there is a very usefull way to view what happening. You should add
<code>echo $this-&gt;client-&gt;getReponse()-&gt;getContent();die;</code>:</p>

<pre><code>namespace MyBundle\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class UserControllerTest extends WebTestCase
{
    public function testRegister()
    {
        $this-&gt;client-&gt;request('GET', '/register');

        echo $this-&gt;client-&gt;getReponse()-&gt;getContent();die;// Just add this line

        // Perform some test
        // $this-&gt;assertOk($this-&gt;client);
        // ...
    }
}
</code></pre>

<p>And then run your test:</p>

<pre><code>phpunit --filter testRegister path/to/the/test/UserControllerTest.php &gt; web/debug.html
</code></pre>

<p>And now, you can browse <code>http://yourpoject.localhost/debug.html</code> with your favorite browser.</p>
]]></content>
    </entry>
        <entry>
        <title>Symfony2: Snippet to render all form errors</title>
                <id>http://blog.lyrixx.info/2013/01/31/symfony2-snippet-to-render-all-form-error.html</id>
                <updated>2013-01-31T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/2013/01/31/symfony2-snippet-to-render-all-form-error.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>With symfony 2, you can render all errors from a form with a little macro. You
can use it for only one form, or for all your application</p>

<h3>The macro</h3>

<pre><code>{# MyBundle:form.html.twig #}

{% macro display_error(form) %}
    {% import _self as forms %}
    &lt;ul&gt;
        {% for child in form if not child.vars.valid %}
            &lt;li&gt;
                {% if child.vars.compound and not child.vars.valid %}
                    {{ child.vars.label|trans|capitalize }}:
                    {{ forms.display_error(child) }}
                {% else %}
                    &lt;h5&gt;
                        &lt;a href="#{{ child.vars.id }}"&gt;
                            {{ child.vars.label|trans|capitalize }}:
                        &lt;/a&gt;
                        &lt;small&gt;
                            {% for error in child.vars.errors %}
                                {{ error.message|capitalize }}
                            {% endfor %}
                        &lt;/small&gt;
                    &lt;/h5&gt;
                {% endif %}
            &lt;/li&gt;
        {% endfor %}
    &lt;/ul&gt;
{% endmacro %}
</code></pre>

<h3>Usage</h3>

<h4>Just for one form:</h4>

<pre><code>{# MyBundle:User:new.html.twig #}

{% import "MyBundle:form.html.twig" as macros %}

{% if not form.vars.valid %}
    &lt;!-- Wep, this is some twitter bootstrap markup --&gt;
    &lt;div class="alert alert-block alert-error"&gt;
        &lt;button type="button" class="close" data-dismiss="alert"&gt;&amp;times;&lt;/button&gt;
        &lt;h3&gt;Oh snap!&lt;/h3&gt;
        &lt;p&gt;&lt;strong&gt;Change a few things up and try submitting again.&lt;/strong&gt;&lt;/p&gt;
        {{ macros.display_project_error(form) }}
    &lt;/div&gt;
{% endif %}
</code></pre>

<h4>For all you application</h4>

<p>Add the layout in your <code>config.yml</code>:</p>

<pre><code>twig:
    form:
        resources:
            - MyBundle::form_div_layout.html.twig
</code></pre>

<p>And override the <code>form_errors</code> block:</p>

<pre><code>{# form_div_layout.html.twig #}

{% block form_errors %}
{% spaceless %}
    {% import "MyBundle:form.html.twig" as macros %}
    {% if not form.parent and not form.vars.valid %}
         {% import _self as forms %}
        &lt;div class="alert alert-block alert-error"&gt;
            &lt;button type="button" class="close" data-dismiss="alert"&gt;&amp;times;&lt;/button&gt;
            &lt;h3&gt;Oh snap!&lt;/h3&gt;
            &lt;p&gt;&lt;strong&gt;Change a few things up and try submitting again.&lt;/strong&gt;&lt;/p&gt;
            {{ macros.display_project_error(form) }}
        &lt;/div&gt;
    {% else %}
        {{ parent() }}
    {% endif %}
{% endspaceless %}
{% endblock %}
</code></pre>
]]></content>
    </entry>
        <entry>
        <title>Sublime text 2 et xdebug : liens cliquables sur les fichiers</title>
                <id>http://blog.lyrixx.info/web-dev/sublime-text-2-et-xdebug-liens-cliquables-sur-les-fichiers.html</id>
                <updated>2012-02-23T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/web-dev/sublime-text-2-et-xdebug-liens-cliquables-sur-les-fichiers.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Salut,</p>

<p>Si comme moi vous utilisez sublime text 2 pour développer, vous allez apprécier
ce petit tips. Par exemple quand vous avez une erreur 500 et / ou une fatal
erreur, xdebug vous affiche la backtrace avec le nom des fichiers. Grâce a ce
hacks, <strong>il est possible d’ouvrir directement dans sublimetext le fichier
correspondant</strong>.</p>

<h2>Configuration de Xdebug :</h2>

<p>dans le fichier xdebug.ini (ou directement dans php.ini) il faut ajouter la
ligne suivante :</p>

<pre><code>xdebug.file_link_format=sblm://%f?%l
</code></pre>

<p>Puis redémarrer apache ou php-fpm …</p>

<h2>Configuration de sublime text</h2>

<p>Il faut ajouter <a href="https://bitbucket.org/sublimator/sublimeprotocol/src/">ce
package</a> dans la liste
des packages. Il suffit de dézipper le contenue de l’archive dans le dossier
package de sublime text 2, disponssible via le menu « Preference > Browse
Package »</p>

<p>Et voila le tours est joué ;)</p>

<h2>Attention</h2>

<p>Cela ne marche pour l’instant que sur windows. Je pense que c’est assez
simple de faire la meme choses pour linux.</p>

<h2>Source</h2>

<ul>
<li><a href="http://www.sublimetext.com/forum/viewtopic.php?f=4&amp;t=116&amp;start=10">Topic du forum</a></li>
<li><a href="http://www.koch.ro/blog/index.php?/archives/77-Firefox,-VIM,-Xdebug-Jumping-to-the-error-line.html">Astuce pour VIM</a></li>
</ul>
]]></content>
    </entry>
        <entry>
        <title>Mysql + export + csv + groupy en gardant les colonnes groupées</title>
                <id>http://blog.lyrixx.info/web-dev/mysql-export-csv-groupy-en-gardant-les-colonnes-groupees.html</id>
                <updated>2012-02-01T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/web-dev/mysql-export-csv-groupy-en-gardant-les-colonnes-groupees.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Petit tips avec MySQL. Admettons que vous voulez faire un export en csv d’une
table (A). Dans ce cas, c’est facile, il suffit d’utiliser « INTO OUTFILE ». Par
contre, si vous avez une jointure (A -> B), c’est plus compliqué.</p>

<p>Il y a plusieurs solutions : soit on se retrouve avec plusieurs ligne de la
table A en double, puis à « droite » de ces lignes , les colonnes de la table B.</p>

<p>Soit on utilise la fonction <a href="dev.mysql.com/doc/refman/5.0/fr/group-by-functions.html#id441997">group_concat</a>; et un petit hack ;)</p>

<p>Exemple :</p>

<pre><code>SELECT c.id, c.first_name, c.last_name, GROUP_CONCAT(CONCAT(p.bar_code, '||', p.quantity, '||', p.date) SEPARATOR "||")
    FROM contact c
    LEFT JOIN product p on (c.id = p.contact_id)
    GROUP BY c.id
    INTO OUTFILE '/tmp/export.csv' FIELDS TERMINATED BY ';' OPTIONALLY ENCLOSED BY '"'
;
</code></pre>

<p>On fait notre jointure normalement, on group by sur c.id, et c’est dans le
select qu’il y a une peu de magie. On va d’abord concaténer les attributs de la
table « product » avec comme séparateur deux pipes « || ». Et ensuite, on va
concaténer toutes les valeurs résultantes de la fonction GROUP BY.</p>

<p>Enfin, il va falloir remplacer tous nos doubles pipes (<code>||</code>) par <code>;</code> qui
correspond a nos délimiteurs de champs.</p>

<pre><code>sed -i 's/||/";"/g' /tmp/export.csv
</code></pre>

<p>Et voila, vous avec un beau fichier CSV bien formaté ;) Ici le hack c’est de
remplacer un délimiteur un peu spécial « || » par un vrai délimiteur, a
posteriori.</p>

<p>P.S. : Il se peut que mysql exporte le fichier csv avec l’utilisateur mysql.
Vous n’aurez donc pas les droits pour le lire et/ou le modifier. Il faut donc
passer en root ;).</p>
]]></content>
    </entry>
        <entry>
        <title>Silex Kitchen Edition</title>
                <id>http://blog.lyrixx.info/silex/silex-kitchen-edition.html</id>
                <updated>2011-10-24T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/silex/silex-kitchen-edition.html"/>
        <content type="html" xml:lang="en"><![CDATA[<div class="pull-right">
    <img src="../images/silex.png" alt="Silex">
</div>

<p><strong>Silex est un micro-framework</strong> (en php) basé sur les <strong>composants symfony2</strong>.
Je vous invite à aller voir la
<a href="http://silex.sensiolabs.org/documentation">documentation</a>. Elle est déjà très
bien fournie.</p>

<p>Cependant, si vous voulez débuter avec silex, je vous propose une édition avec
une achitecture déjà mise en place, qui respecte les bonnes pratiques. On y
retrouve les services suivants: <strong>sessions</strong>, <strong>cache</strong>, <strong>twig</strong>, <strong>assetic</strong>,
<strong>doctrine</strong>, <strong>translation</strong>, <strong>form</strong>, <strong>test</strong>. De plus, elle est
packagé avec <strong><a href="http://twitter.github.com/bootstrap/">twitter bootstrap</a></strong>.</p>

<p>Je vous invite à lire <a href="http://lyrixx.github.com/Silex-Kitchen-Edition/">la doc</a>
ou à la <a href="https://github.com/lyrixx/Silex-Kitchen-Edition">télécharger sur github</a></p>
]]></content>
    </entry>
        <entry>
        <title>Lister ses films</title>
                <id>http://blog.lyrixx.info/ubuntu/lister-ses-films.html</id>
                <updated>2011-06-05T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/ubuntu/lister-ses-films.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Un petit script bash (donc pour linux/mac) pour lister tous les films qui
peuvent trainer dans plusieurs répertoires et sous répertoires…</p>

<pre><code>wget https://gist.github.com/raw/1008082/dc6cdb8ae50bd981ae9458cc270f96de41583718/movieList.sh
chmod +x movieList.sh
# Configure VIDEO_FOLDER
./movieList.sh
cat movie_list.txt
</code></pre>

<p>Script :</p>

<pre><code>#!/bin/bash

VIDEO_FOLDER=(
  /PATH/TO/MOVIE1
  /PATH/TO/MOVIE2
)
VIDEO_EXTENTION=(avi mkv mpg mpeg)

OUTPUT='movie_list.txt'
OUTPUT_TEMP=${OUTPUT}.temp

`&gt;$OUTPUT_TEMP`

for folder in "${VIDEO_FOLDER[@]}"
do
  if [ -d $folder ]; then
      for ext in "${VIDEO_EXTENTION[@]}"
      do
        find $folder -iname "*.$ext" &gt;&gt; $OUTPUT_TEMP
      done
  fi
done

`cat $OUTPUT_TEMP | awk -F "/" '{print $NF;}' | sort | uniq &gt; $OUTPUT`
`rm $OUTPUT_TEMP`
</code></pre>
]]></content>
    </entry>
        <entry>
        <title>Symfony2 en vidéo</title>
                <id>http://blog.lyrixx.info/symfony/symfony2-en-video.html</id>
                <updated>2011-01-03T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/symfony/symfony2-en-video.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Voici l’évolution du code source de <a href="http://symfony.com/"
target="_blank">symfony2</a> réalisé grâce à <a
href="http://code.google.com/p/gource/" target="_blank">gource</a>, ffmpef,
pitivi et ubuntu ;)</p>

<iframe width="853" height="480" src="http://www.youtube.com/embed/164Z1gyqk6M" frameborder="0" allowfullscreen></iframe>

<p>(Il est possible de voir la vidéo en HD)</p>

<p>La ligne de commande qui a permit le résultat:</p>

<pre><code>gource --title "Symfony2" -s .25 --file-idle-time 600  --auto-skip-seconds 1 -1920x1080 --output-framerate 30 --stop-at-end --max-files 1000000 --bloom- multiplier 1.1 --bloom-intensity .25 --background 101010  --highlight-dirs --highlight-users --hide filenames,date,progress --output-ppm-stream - | nice -n19 ffmpeg -y -b 3000k -r 30 -f image2pipe -vcodec ppm -i - -vcodec libx264 -vpre hq -crf 22 -threads 0 symfony.avi
</code></pre>
]]></content>
    </entry>
        <entry>
        <title>Comment utiliser le Routeur du Zend Framework</title>
                <id>http://blog.lyrixx.info/zend/comment-utiliser-le-routeur-du-zend-framework.html</id>
                <updated>2010-08-09T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/comment-utiliser-le-routeur-du-zend-framework.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Je suppose que vous connaissez déjà tous l’<strong>url rewriting</strong>. Il est assez
simple de mettre en place des formats d’URL (user firendly) prédéfinis avec
<strong>Zend</strong>. On va voir ensemble comment faire.</p>

<p>Comme souvent avec le <strong>Zend Framework</strong>, il y a plusieurs façons de faire. Je
vais vous en montrer deux. <strong>Une première en PHP</strong>, puis une <strong>deuxième avec le
fichier de configuration application.ini</strong>. Quelque que soit la méthode, tout le
code PHP sera à mettre dans le fichier <code>bootstrap.php</code>. Pourquoi ? Car il faut
bien que le routage s’effectue avant le premier <code>dispatch</code>.</p>

<h2>Préparation du bootstrap</h2>

<p>On peut commencer par préparer notre <code>bootstrap</code> : il faut ajouter une nouvelle
méthode :</p>

<pre><code>protected function _initRouter() {
    $front = $this-&gt;bootstrap('FrontController')-&gt;getResource('FrontController');
    $router = $front-&gt;getRouter();
}
</code></pre>

<p>On ajoute la méthode <code>_initRouter()</code>. Pour l’instant cette méthode est un peu
vide. La première ligne de code sert à démarrer le <code>bootstrap</code>si cela n’avait
pas encore été fait puis a récupérer le <code>FrontController</code> depuis le <code>registre</code>
du <code>bootstrap</code>. La deuxième ligne sert à récupérer le <code>router</code>.</p>

<h2>Configuration en php depuis le bootstrap</h2>

<h3>Syntaxe d’ajout</h3>

<p>Il existe différent type de route possible. Des routes statiques,  dynamiques,
basés sur des expressions régulières, basés sur le domaine et sous-domaines …
Mais quelque soit le type de route choisi, la syntaxe reste la même. Il faut
commencer par créer une route, puis ensuite l’ajouter au routeur.</p>

<pre><code>$uneRoute = new Zend_Controller_Router_Route($route, $defaults, $reqs);
$router-&gt;addRoute('uneRoute', $uneRoute);
</code></pre>

<ul>
<li><code>$route</code> correspond a l’Uri de la ressource. C’est le bout de l’URL
qui se trouve après le nom de domaine. Par
exemple l’Uri peut être ‘a-propos’ ou alors ‘contactez-nous’.</li>
<li><code>$default</code> doit être un tableau contenant les informations de redirection
(module, controller, action, …)</li>
<li><code>$reqs</code> est optionnels, il permet d’ajouter des contraintes.</li>
<li><code>$uneRoute</code> est la route au format Zend_Controller_Router_Route</li>
</ul>

<p>enfin la pseudo-constante <code>uneRoute</code> est la clé identifiant la route. En effet
il est possible de retrouver une route enregistrée dans le routeur grâce et
uniquement grâce à cette clé.</p>

<p><span style="text-decoration: underline;">Note :</span> il est très fortement
déconseillé de mettre des accents ou des caractères « bizarres » dans le nom de
la route ou dans la clé de la route.</p>

<h3>Routage Statique</h3>

<p>On va commencer avec le routage statique. Avec le routage statique, il n’est pas
vraiment possible de transmettre des variables en GET. On utilise par exemple le
routage statique pour la page a-propos, contact etc … Voici un exemple :</p>

<pre><code>protected function _initRouter() {
    $front = $this-&gt;bootstrap('FrontController')-&gt;getResource('FrontController');
    $router = $front-&gt;getRouter();
    $route = new Zend_Controller_Router_Route('accueil', array('controller' =&gt; 'index', 'action' =&gt; 'index')));
    $router-&gt;addRoute('accueil', $route);
}
</code></pre>

<p><span style="text-decoration: underline;">Note :</span> Ici j’ai remis tous le
code à mettre dans le <code>bootstrap</code>. Dans la suite du tutoriel, je ne mettrais que
les lignes de code intéressantes (i.e. les deux dernières lignes).</p>

<p>Dans cette exemple, le fait de se rendre sur la page
<code>http://exemple.com/accueil</code> aura le même effet que d’aller sur la page
<code>http://exemple.com/index/index</code>. Bien entendu, ce n’est pas une redirection
(l’url ne change pas), mais bien un vrai routage ou ré-écriture d’Url. Dans cet
exemple, la route ‘accueil’ porte le même nom que la clé. C’est en général plus
simple de mettre les même valeurs, ou alors des valeurs proches.</p>

<h3>Routage Dynamique</h3>

<p>Qu’est-ce que le routage dynamique ?  Par exemple vous voulez qu’une partie de
l’url soit dynamique : un id, un nom de fonction, un message … Il faut donc,
dans le routeur, nommé cette variable. Pour ce faire il faut utiliser les « : »
devant le nom de votre variable. Voici un exemple ou l’on veut faire passer une
message en paramètre (GET) de notre URL :</p>

<pre><code>$route = new Zend_Controller_Router_Route('contact/:topic', array('controller' =&gt; 'index', 'action' =&gt; 'contact','topic' =&gt; 'Topic par defaut'));
$router-&gt;addRoute('contact', $route);
</code></pre>

<p>Ici nous faisons passer dans les paramètres GET un sujet (<code>topic</code>). Ainsi si
l’on se rend à l’adresse suivante : <code>http://exemple.com/contact/Mon Topic</code>, le
controller exécuter sera le controller <code>indexController</code>, et l’action exécuter
sera l’action <code>contactAction</code>. On pourra récupérer la valeur de <code>topic</code>grâce à
:</p>

<pre><code>$this-&gt;getRequest()-&gt;getParam('topic');
</code></pre>

<p>Il faut placer ce code dans la méthode <code>contactAction</code> du fichier
<code>indexController.php</code>. C’est transparent pour l’utilisateur, mais il y a bien eu
une ré-écriture d’url. Sans celle ci l’URL aurai pu être :
<code>http://exemple.com/contact/?topic=Mon Topic</code>.</p>

<p>On peut aussi attribuer une valeur par défaut à notre variable <code>topic</code>. C’est un
des arguments du tableau <code>$default</code> : <code>topic =&gt; Topic par defaut</code>. Donc  si
l’utilisateur se rend à cette adresse : <code>http://exemple.com/contact</code> la valeur
de <code>topic</code> sera :  <code>Topic par defaut</code>.</p>

<p>Vous pouvez aussi remarquer qu’ici la route est différente de la clé de celle-ci
(<code>contact/:topic</code> VS <code>contact</code>).</p>

<h3>Routage Dynamique avec des contraintes</h3>

<p>On peut ajouter des contraintes aux routages dynamique. Comme par exemple forcer
que la variable x ou y soit un entier ou un string. On utilise pour ca la
variable <code>$reqs</code> :</p>

<pre><code>$route = new Zend_Controller_Router_Route(
    'membres/:id/`',
    array(
        'controller' =&gt; 'index', 'action' =&gt; 'membres'
    ),
    array('id' =&gt; 'd+')
);
$router-&gt;addRoute('membres', $route);
</code></pre>

<p>Ici on force la route à utiliser un id de type nombre. Si ce n’est pas un
nombre, l’URL ne passera pas dans la route, et il y aura une erreur.</p>

<p>Vous pouvez remarquer aussi qu’il est possible d’utiliser des caractères joker
(wildcard). Le caractère ` symbolise tout type de caractère. Grâce a ce
caractère, il est possible de mettre a peu près tout ce que l’on veut dans
l’url. Il est donc possible de faire passer des informations dans l’URL même
avec un routages statiques.</p>

<h3>Routage avec les expressions régulières.</h3>

<p>On à déjà vu le routage statique et le routage dynamique. Mais juste avec ces
deux routages, il n’est pas encore possible de réaliser toutes les routes
inimaginables. Par exemple, il n’est pas encore possible de faire une route qui
ressemblerai a ca : <code>http://exemple.com/team/25-aka</code> ou alors
<code>http://exemple.com/blogpost/9-Comment-faire-cuire-une-pizza.html</code>.</p>

<p>Voila le code d’une route :</p>

<pre><code>$routeRegex = new Zend_Controller_Router_Route_Regex(
    'teams/(d+)-(w+)',
    array('controller' =&gt;'index', 'action' =&gt; 'teams'),
    array(1 =&gt; 'id',2=&gt;'name'),
    'teams/%d-%s'
);
$router-&gt;addRoute('teams', $routeRegex);
</code></pre>

<p>Il faut noter que la route n’est plus de type <code>Zend_Controller_Router_Route</code>
mais de type <code>Zend_Controller_Router_Route_Regex</code>.</p>

<dl>
<dt>La route en elle-même est à peu près la même que pour le routage dynamique. Il</dt>
<dt>faut utiliser des expressions régulières. Ici les routes acceptées sont du type</dt>
<dd><code>http://exemple.com/teams/NOMBRE-STRING</code>.</dd>
</dl>

<p>Le troisième argument du constructeur est un peu différent. Il permet de mapper
(i.e. binder, associé) les ‘variables’ capturées par la regxp (grâce aux
parenthèse) à des noms de variables. Par exemple, ici le nombre <code>capturé</code> sera
mapper à la variable <code>id</code> et le <code>string</code> sera mappé à la variable <code>name</code>.</p>

<p>Enfin le dernier paramètre du constructeur sert au reverse. Il est possible
(comme pour tous les autres types de route) d’utiliser un ViewHelper pour
construire notre url (dans le cas où l’on veut faire un lien par exemple).
Cependant avec une expression régulière en entré, il n’est pas très facile de
pouvoir deviner le pattern en sortie. C’est pourquoi il y a ce dernier argument
qui est facultatif. En effet il est facultatif, car tant qu’on n’utilise pas le
ViewHelper, on n »en a pas besoin.</p>

<p><span style="text-decoration: underline;">Note :</span> on verre plus tard
comment utiliser le ViewHelper url() avec les routes.</p>

<h2>Configuration avec un fichier de configuration .ini</h2>

<p><span style="text-decoration: underline;">Note :</span> pour cette partie, je ne
vais pas trop détaillé le code. Il reste assez similaire pour le bootstrap. Le
fichier .ini reprend le même fonctionnement qu’en php.</p>

<h3>Configuration du Bootstrap</h3>

<p>Il faut commencer par créet une nouvelle méthode dans le fichier bootstrap.php</p>

<p>protected function _initRouter() {</p>

<pre><code>$front = $this-&gt;bootstrap('FrontController')-&gt;getResource('FrontController');
$router = $front-&gt;getRouter();
$config = new Zend_Config_Ini(APPLICATION_PATH . '/configs/application.ini', 'production');
$routing = new Zend_Controller_Router_Rewrite();
$routing-&gt;addConfig($config, 'routes');
 $front-&gt;setRouter($routing);}
</code></pre>

<h3>Application.ini</h3>

<p>Et maintenant, il faut coller ce code dans le fichier application.ini, dans la
section production</p>

<pre><code>; Routage

routes.accueil.route = "accueil"
routes.accueil.defaults.controller = "index"
routes.accueil.defaults.action = "index"

routes.apropos.type = "Zend_Controller_Router_Route"
routes.apropos.route = "a-propos"
routes.apropos.defaults.controller = "index"
routes.apropos.defaults.action = "apropos"

routes.contact.type = "Zend_Controller_Router_Route"
routes.contact.route = "contact/:topic"
routes.contact.defaults.controller = "index"
routes.contact.defaults.action = "contact"
routes.contact.defaults.topic = "Topic par defaut"

routes.membres.type = "Zend_Controller_Router_Route"
routes.membres.route = "membres/:id/`"
routes.membres.defaults.controller = "index"
routes.membres.defaults.action = "membres"
routes.membres.reqs.id = "d+"

routes.teams.type = "Zend_Controller_Router_Route_Regex"
routes.teams.route = "teams/(d+)-(w+)"
routes.teams.defaults.controller = "index"
routes.teams.defaults.action = "teams"
routes.teams.map.1 = "id"
routes.teams.map.2 = "name"
routes.teams.reverse ="teams/%d-%s"
</code></pre>

<p>On peut voir que pour un routage statique simple, 3 lignes suffisent (cf
accueil). Cependant on peur forcer le type de la route (cf apropos).</p>

<p>Comme en PHP, il est aussi possible de définir une route dynamique (cf contact).
Et on peut aussi faire une validation par expressions régulières (cf membres).</p>

<p>Enfin pour utiliser un route de type expression régulière, il faut utilise le
type « <code>Zend_Controller_Router_Route_Regex</code> » (cf teams).</p>

<h2>Utilisation de l’aide de Vue url()</h2>

<p>L’aide de vue url() est très utile. Il est possible de l’utiliser avec le
système de route du Framework. On peut l’utiliser depuis une vue ou depuis le
layout. En accord avec la définition des routes vu précédemment, on peut
l’appeler de la façon suivante :</p>

<pre><code>echo $this-&gt;url(array(),'accueil').'&lt;br /&gt;';
echo $this-&gt;url(array(),'apropos').'&lt;br /&gt;';
echo $this-&gt;url(array('topic'=&gt;'Sujet du message'),'contact').'&lt;br /&gt;';
echo $this-&gt;url(array('id'=&gt;'78'),'membres').'&lt;br /&gt;';
echo $this-&gt;url(array('id'=&gt;'25','name'=&gt;'aka'),'teams').'&lt;br /&gt;';
</code></pre>

<p>Le première argument doit etre un tableau (<code>array</code>). Il représente les arguments
(ou paramètres) de la route. C’est un tableau associatif. La clé représente le
nom de la variable, et la valeur représente la valeur de cette variable. Le
deuxième argument représente la nom de la route.</p>
]]></content>
    </entry>
        <entry>
        <title>ZFDebug : Un plugin pour Zend Framework</title>
                <id>http://blog.lyrixx.info/zend/zfdebug-un-plugin-pour-zend-framework.html</id>
                <updated>2010-08-05T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/zfdebug-un-plugin-pour-zend-framework.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><strong>ZFDebug</strong> est un outils très utile lorsqu’on développe avec Zend. En effet ce
plugin, <strong>qui ne demande presque aucunes configurations</strong>, permet de mettre en
évidence beaucoup d’informations utilises. On va voir commment l’installer dans
un projet déjà existant (ou un nouveau, ca ne change rien).Donc ce plugin va
ajouter automatiquement une barre d’outils en bas de votre page. Sur cette
barre, on peut voire les informations suivantes :</p>

<ul>
<li>Cache: Information sur Zend_Cache et APC.</li>
<li>Database: Liste complète des requêtes SQL ainsi que les temps
d’exécution.</li>
<li>Exception: Capture des erreurs et exceptions.</li>
<li>File: Nombre et poids des fichiers inclus.</li>
<li>Html: Nombre de fichier JS et CSS inclus. Liens pour passer la page au
validateur W3C.</li>
<li>Memory: Utilisation de la mémoire.</li>
<li>Registry: Contenu du Zend_Registry</li>
<li>Time: Information sur les temps d’exécution.</li>
<li>Variables: Variables de vues, de requêtes, de $COOKIE et $POST</li>
</ul>

<p>Voila à quoi ressemble cette barre  : (Note : Tous les modules ne sont pas
chargé)</p>

<p><a href="../wp-content/uploads/2010/08/ZFDebug-bar1.png"
rel="lightbox[1270]"><img class="aligncenter size-full wp-image-1274"
title="ZFDebug bar" src="../wp-content/uploads/2010/08/ZFDebug-
bar1.png" alt="" width="626" height="25" /></a></p>

<p>Alors pour l’installer il faut  commencer par télécharger la dernière version
sur <a href="http://code.google.com/p/zfdebug/" target="_blank">le site du
projet</a>. Ensuite il faut extraire l’archive et déplacer le dossier <code>ZFDebug</code>
qui se trouve dans le dossier <code>library</code> de l’archive dans votre dossier
<code>library</code> de votre projet. Puis il faut configurer le bootstrap pour qu’il
démarre le plugin. Il faut placer le code qui suit tout à la fin du bootstrap :</p>

<pre><code>protected function _initZFDebug() {
    // Setup autoloader with namespace
    $autoloader = Zend_Loader_Autoloader::getInstance();
    $autoloader-&gt;registerNamespace('ZFDebug');

    // Ensure the front controller is initialized
    $this-&gt;bootstrap('FrontController');

    // Retrieve the front controller from the bootstrap registry
    $front = $this-&gt;getResource('FrontController');

    // Only enable zfdebug if options have been specified for it
    if ($this-&gt;hasOption('zfdebug')) {
        // Create ZFDebug instance
        $zfdebug = new
        ZFDebug_Controller_Plugin_Debug($this-&gt;getOption('zfdebug'));

        // Register ZFDebug with the front controller
        $front-&gt;registerPlugin($zfdebug);
    }
}
</code></pre>

<p>Et enfin, pour qu’il démarre, il faut ajouter la configuration de la barre dans
le fichier <code>application.ini</code> et plus précisément dans la partie <code>[development :
production]</code> pour que cette barre ne se retrouve que sur les machines de
développement.</p>

<pre><code>zfdebug.plugins.Variables = null
zfdebug.plugins.Time = null
zfdebug.plugins.Memory = null
zfdebug.plugins.Exception = null
zfdebug.plugins.Html = null
zfdebug.plugins.Registry = null
; zfdebug.plugins.File = null
; zfdebug.plugins.Cache = null
; zfdebug.plugins.Database = null
</code></pre>

<p>Voila le fichier de configuration « minimum ». Il est possible d’activer ou
désactiver des fonctionnalités juste en commentant ou dé-commentant une ligne.
Il y a plus d’information sur le <a href="http://code.google.com/p/zfdebug/wiki/Installation" target="_blank">wiki
du plugin</a>.</p>

<p>Et voila, la barre de Debug se retrouve automatiquement en bas de votre page. Si
ce n’est pas le cas, pensez a vérifier que vous etes bien sur un environement de
developpement. Si vous etes en production, il faudra ajouter la ligne suivante
en haut du fichier <code>index.php</code> qui se trouve dans le répertoire <code>public.</code></p>

<pre><code>apache_setenv("APPLICATION_ENV", "development");
</code></pre>
]]></content>
    </entry>
        <entry>
        <title>Qu&#039;est-ce que PECL ?</title>
                <id>http://blog.lyrixx.info/web-dev/quest-ce-que-pecl.html</id>
                <updated>2010-05-10T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/web-dev/quest-ce-que-pecl.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Il y a quelques semaines un rapport sur l’<strong>utilisation de PHP sur les serveurs
debian est sorti</strong> (<a href="http://popcon.debian.org/"
target="_blank">http://popcon.debian.org/</a> ; vraiment pas sexy ! ). <a
href="http://www.industrialisation-php.com/statistiques-dusage-de-php-sur-
debian/" target="_blank">Industrialisation PHP en a fait une bonne analyse</a>,
je vous conseil de la lire. En lisant ce rapport, j’ai été assez étonné sur
<strong>les pourcentages d’utilisation des extensions PECL et PEAR</strong>. On va donc
commencer par faire une petite piqure de rappel sur PECL.</p>

<p><strong>PECL</strong> est l’anagramme de  <strong>PHP Extension Community Library</strong> (on le prononce
pickle). C’est une librairie d’extensions codées en C issu de la communauté PHP
pour le PHP. Ces extensions viennent directement se greffer au moteur PHP (<a
href="http://pecl.php.net/packages.php" target="_blank">Liste des
Extensions</a>). Il y a par exemple des extensions pour le débogage, le cache,
la sécurité, les gui … Ces extensions ont l’avantage d’être codées en C, donc
elles sont beaucoup plus rapide et performantes que les librairies codées en
PHP. Par contre il faut aussi savoir que plusieurs extensions ne sont plus
maintenues, en effet, il arrive souvent que des extensions soient directement
intégré directement au moteur PHP (comme domxml ou json)  ou alors elles sont
abandonnées :S.</p>

<p><strong>Quelques exemples d’extentions connu :</strong></p>

<ul>
<li><a href="http://pecl.php.net/package/memcache" target="_blank">memcache</a>
: offre la possibilité de mettre des objets en cache et donc de réduire la
consommation CPU (et réduit l’utilisation de MySQL)</li>
<li><a href="http://pecl.php.net/package/imagick" target="_blank">imagick</a>
: pour gérer les images. Offre plus d’options que GD2</li>
<li><a href="http://pecl.php.net/package/Xdebug" target="_self">XDebug</a> :
pour améliorer le débogage</li>
</ul>

<p>Il y a plusieurs types d’utilisation de ces extensions. En fait soit l’extension
rajoute des nouvelles fonctions à notre moteur php (comme avec imagick, <a
href="http://fr2.php.net/manual/fr/function.imagick-clone.php"
target="_blank">exemple</a>), soit l’extension redéfinit une fonction (on verra
le cas dans un projet tuto avec var_dump).</p>

<p><strong>Pour installer des extensions PECL</strong>, il y a plusieurs écoles.</p>

<ul>
<li>Pour les utilisateurs de Windows, il y a souvent deux options :

<ul>
<li>Télécharger les binaires et les copier au bon endroit, puis éditer
le php.ini</li>
<li>Télécharger le code source et re-compiler PHP (ou juste l'extension)</li>
</ul></li>
<li><p>Pour les utilisateurs de Linux (et surement Mac…) :</p>

<ul>
<li>On peut aussi télécharger les sources a la main et compiler le tout (ou
juste l'extension)</li>
<li><p>Ou Une ligne de commande suffit :</p>

<pre><code>pecl install &lt;nom du paquet&gt;
</code></pre></li>
</ul></li>
</ul>

<p>L’avantage d’être sous Linux, c’est que c’est plus simple et surtout plus à jour
sachant que PECL fonctionne comme un dépôt, d’ailleurs c’est un dépôt (comme apt
par exemple)</p>

<p><a href="http://www.php.net/manual/fr/install.pecl.php"
target="_blank">Documentation sur php.net</a></p>
]]></content>
    </entry>
        <entry>
        <title>Architecture du Zend Framework 1.10 en MVC</title>
                <id>http://blog.lyrixx.info/zend/architecture-du-zend-framework-1-10.html</id>
                <updated>2010-03-18T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/architecture-du-zend-framework-1-10.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Depuis quelques versions du <strong>Zend Framework</strong>, l’architecture de celui-ci en
mode MVC à un petit peu changé. Je vous donne le nouveau schémas, et je
l’explique ensuite. La racine des dossiers est (chez moi) le dossier « zftuto ».
Je précise que <strong>cette structure a été obtenu grâce aux Zend_Tool</strong> (cf prochain
tutoriel).</p>

<p><a href="../wp-content/uploads/2010/03/architecture.png"
rel="lightbox[1187]"><img class="alignright size-full wp-image-1188"
title="architecture" src="../wp-
content/uploads/2010/03/architecture.png" alt="" width="260" height="592" /></a></p>

<p>Dans ce dossier nous avons :</p>

<ul>
<li><strong>application</strong> : c’est le dossier où tous notre code va se situer,
il ne doit pas être accessible depuis
l’extérieur.

<ul>
<li><strong>configs</strong> : c’est le dossier qui va contenir tous nos fichiers
de configuration

<ul>
<li><strong>application.ini</strong> : C’est le fichier qui permet de définir
les réglage de l’application comme
les paramètre de base de données, les chemins par défaut …</li>
</ul></li>
<li><strong>controllers</strong> : c’est le dossier qui va contenir tous les controllers</li>
<li><strong>forms</strong> : c’est un nouveau dossier qui contient maintenant tous
les formulaires</li>
<li><strong>layouts</strong>/<strong>scripts</strong>/ : c’est le dossier qui contient les fichiers
de layout

<ul>
<li><strong>layout.phtml</strong> : layout (ou template) de base de notre application</li>
</ul></li>
<li><strong>models</strong> : c’est le dossier qui contient tous les modèles, ou
plus exactement tous notre code métier

<ul>
<li><strong>DbTable</strong> : c’est le dossier qui contient toutes les
représentation de nos tables (ORM).</li>
</ul></li>
<li><strong>Views</strong> : c’est le dossier qui contient tous ce qui touchent
a l’affichage

<ul>
<li><strong>helpers</strong> : c’est le dossier qui contient les aides de vues</li>
<li><strong>scripts</strong> : c’est le dossier qui contient les dossiers contenant
les vues</li>
</ul></li>
</ul></li>
<li><strong>docs</strong> : c’est le dossier qui contient la documentation (oui il en faut)</li>
<li><strong>library</strong> : c’est le dossier qui contient les librairies</li>
<li><strong>zend</strong> : c’est dans ce dossier qu’il faut mettre la librairie du
Zend Framework</li>
<li><strong>public</strong> : c’est le seul dossier qui doit être accessible depuis
l’extérieur.

<ul>
<li><strong>index.php</strong> : c’est le fichier qui va démarrer notre application</li>
</ul></li>
<li><strong>tests</strong> : c’est le dossier qui contient tous les fichiers pour faire
des tests unitaires.</li>
</ul>
]]></content>
    </entry>
        <entry>
        <title>Application de site E-Commerce [Code-Source]</title>
                <id>http://blog.lyrixx.info/zend/application-de-site-e-commerce.html</id>
                <updated>2010-03-18T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/application-de-site-e-commerce.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Comme vous l’avez peut être vu passer sur <a href="http://twitter.com/lyrixx"
target="_blank">twitter</a>, j’ai du faire pour les cours une <strong>application
e-commerce très basique</strong>. J’ai choisis de la faire avec Zend. Et du coup je
partage le code ici ;). <strong>Cette application est très simplifié : il n’y a qu’une
page produit, avec la possibilité d’ajouter des produits dans un panier et
ensuite de gérer son panier. Il y a aussi la toute la partie gestion des
utilisateurs : connexion, enregistrement, déconnexion</strong> etc… Et enfin il y a une
page paiement qui vérifie les informations de la carte bancaire.</p>

<p>Quelques points techniques abordés dans cette application :</p>

<ul>
<li><strong>Bootstrap</strong> (Zend_Application)</li>
<li><strong>Controller</strong>, <strong>View</strong>, <strong>Model</strong> (MVC)</li>
<li>Mapping <strong>de base de données</strong> (ORM) (Zend_Db_Table)</li>
<li><strong>Formulaires</strong>, <strong>Validations</strong>, <strong>Décorateurs</strong> (Zend_Form,
Zend_Validate)</li>
<li><strong>Layout</strong> et <strong>Aides de vue</strong> (Zend_View_Helper)</li>
<li><strong>Authentification</strong> (Zend_Auth)</li>
<li><strong>Session</strong> (Zend_Session)</li>
<li><strong>Cookie</strong></li>
<li>Zend_Text_Figlet (Bonus ca :))</li>
</ul>

<p>voila quelques screenshots :</p>

<p><a href="../wp-content/uploads/2010/03/TP1-Ecommerce-prod.png"
rel="lightbox[1175]"><img class="alignnone size-medium wp-image-1176"
title="TP1-Ecommerce prod" src="../wp-
content/uploads/2010/03/TP1-Ecommerce-prod-300x168.png" alt="" width="300"
height="168" /></a> <a href="../wp-content/uploads/2010/03/TP1
-Ecommerce-register.png" rel="lightbox[1175]"><img class="alignnone size-medium
wp-image-1177" title="TP1-Ecommerce register" src="../wp-
content/uploads/2010/03/TP1-Ecommerce-register-300x168.png" alt="" width="300"
height="168" /></a><a href="../wp-content/uploads/2010/03/TP1
-Ecommerce-panier.png" rel="lightbox[1175]"><img class="alignnone size-medium
wp-image-1178" title="TP1-Ecommerce panier" src="../wp-
content/uploads/2010/03/TP1-Ecommerce-panier-300x153.png" alt="" width="300"
height="153" /></a><a href="../wp-content/uploads/2010/03/TP1
-Ecommerce-paiment.png" rel="lightbox[1175]"><img class="alignnone size-medium
wp-image-1179" title="TP1-Ecommerce paiment" src="../wp-
content/uploads/2010/03/TP1-Ecommerce-paiment-300x165.png" alt="" width="300"
height="165" /></a></p>

<p>Et enfin <a href="../wp-content/uploads/2010/03/TP1-Ecommerce.tar.gz">les sources à télécharger</a></p>
]]></content>
    </entry>
        <entry>
        <title>Comment bien démarrer un projet Zend Framework grâce aux Zend_Tool</title>
                <id>http://blog.lyrixx.info/zend/comment-bien-demarrer-un-projet-zend-framework-grace-aux-zend_tool.html</id>
                <updated>2010-03-18T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/comment-bien-demarrer-un-projet-zend-framework-grace-aux-zend_tool.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Cet article est une mise à jour du tutoriel sur <strong>l’outil Zend_Tool</strong>. Donc
depuis quelque temps dans le Zend Framework, il y a de nouvelles
fonctionnalités. Mais pour bien faire les choses, on va reprendre Zend_Tool
depuis le début.</p>

<h2>Qu’est-ce que Zend_Tool ?</h2>

<p><strong>Zend Tool est un outils qui s’utilise en ligne de commande</strong> (depuis une
console) et qui <strong>permet de mettre en place la structure de son projet</strong>,
d’ajouter des controllers, actions, vues, modules… D’après la roadmap de Zend,
cet outils à pour objectif de devenir très puissant.</p>

<h2>Introduction</h2>

<p>Alors il va falloir commencer par <a
href="http://framework.zend.com/download/latest" target="_blank">télécharger le
Zend Framework</a>. On l’extrait, chez moi c’est dans le répertoire : «
/home/lyrix/prog/php/Lib/Zend_librairie/ZendFramework-1.10.2/ ». On va donc
créer un alias pour nous faciliter la vie.  Si vous avez la chance d’être sur un
système linux (ou mac) une ligne de commande suffit :</p>

<pre><code>alias zf="/home/lyrix/prog/php/Lib/Zend_librairie/ZendFramework-1.10.2/bin/zf.sh"
</code></pre>

<p>Vous pouvez aussi ajouter cette commande a votre fichier de configuration du
bash (~/.bashrc), pour que l’alias soit toujours actif. On va ensuite aller dans
le dossier où l’on veut que notre projet soit crée.</p>

<pre><code>cd /home/lyrix/prog/php/2010/
</code></pre>

<p>On nommera ce projet « zftuto ». Création de projet avec Zend_Tool on commence
par créer notre projet :</p>

<pre><code>zf create project
./zftuto/ zftuto
</code></pre>

<p>./zftuto/ représente le PATH de la racine de l’application.
zftuto représente le nom de l’application.
Il faut maintenant se déplacer dans le dossier contenant l’application.</p>

<pre><code>cd zftuto/
</code></pre>

<h2>Base de donnée</h2>

<p>Zend_Tool peut se connecter à une base de donnée, pour ensuite nous créer les
classes métiers représentant les tables de notre bases de données (ORM). On
commence par configurer notre application pour qu’elle se connecte à la BDD.
Puis ensuite on génère nos classes :</p>

<pre><code>zf configure db-adapter "adapter=pdo_mysql&amp;username=ecommerce&amp;password=ecommerce&amp;dbname=ecommerce"
zf create db-table.fromdatabase
</code></pre>

<p>Le nom des variables est assez explicite pour que je ne les détail pas.</p>

<h2>Layout</h2>

<p>On peut maintenant activer la gestion d’un layout depuis zend tool.</p>

<pre><code>zf enable layout
</code></pre>

<h2>Formulaire</h2>

<p>On peut créer un formulaire en ligne de commande :</p>

<pre><code>zf create form UserCU
</code></pre>

<h2>Model</h2>

<p>Pour créer un nouveau model (ou classe métier) :</p>

<pre><code>zf create model TestModel
</code></pre>

<h2>Controller, Action, Vue :</h2>

<p>Et bien sur on peut toujours ajouter un controller (avec la vue associé)</p>

<pre><code>zf create controller Users
zf create action read Users
zf create view read2 Users
</code></pre>

<h2>Module :</h2>

<p>On peut aussi créer des modules :</p>

<pre><code>zf create module Moduletest
</code></pre>

<h2>Aide :</h2>

<p>Pour de l’aide, vous pouvez directement depuis votre console exécuter la
commande suivante :</p>

<pre><code>zf ?
</code></pre>

<h2>Conclusion</h2>

<p>Si on fait attention, le nommage des classes a changé. <strong>Il y a maintenant
un namespace « application »</strong>. Ce
qui a mon goût est plus propre, et anticipe peut être les changements
qu’il va y avoir avec php 5.3 puis php 6</p>
]]></content>
    </entry>
        <entry>
        <title>Gerer l&#039;authentification avec Zend_Auth du Zend Framework</title>
                <id>http://blog.lyrixx.info/zend/gerer-lauthentification-avec-zend_auth-du-zend-framework.html</id>
                <updated>2009-12-23T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/gerer-lauthentification-avec-zend_auth-du-zend-framework.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><strong>Comment faire un système de login sur son application</strong> ? On va voir comment
mettre en place un système de connexion d’utilisateur dans son application avec
le <strong>Zend Framework</strong>. Pour ce faire on va utiliser le composant <strong>Zend_Auth</strong>.
Il va falloir commencer par faire le <strong>formulaire de login</strong> qui n’est pas très
compliqué. Faire la validation de ce formulaire puis si il est valide s’occuper
de la partie <strong>Zend_Auth ou authentification</strong>. Enfin nous verrons comment faire
un petit <strong>Zend_View_Helper</strong> (aide de vue) pour créer automatiquement des liens
(<strong>« login» ou « logout »</strong>)</p>

<h2 id="sommaire">Sommaire :</h2>

<ul>
<li><a href="#sommaire">Sommaire</a></li>
<li><a href="#formulaire">Mise en place du formulaire</a></li>
<li><a href="#controller">Le controller</a></li>
<li><a href="#deconnexion">Déconnexion</a></li>
<li><a href="#verif">Vérification</a></li>
<li><a href="#zend-view-helper">Le controller de vue</a></li>
</ul>

<h2 id="formulaire">Création du formulaire de login :</h2>

<p>On va allé assez vite sur la création du formulaire dans la mesure ou j’explique
dans un autre tutoriel <a href="../zend/zend-framework-formulaire-et-base-de-donnee-partie-1.html#formulaire" title="Zend Framework, Formulaire et Base de donnée, partie 1"><strong>comment faire un formulaire</strong></a>.</p>

<pre><code>class Model_Form_User_Login extends Zend_Form {

public function init(){
    $this-&gt;setName('add_user');

    $email = new Model_Form_EText('email','Adresse Email : ');

    $password = new Zend_Form_Element_Password('password');
    $password-&gt;setLabel('Mot de pase : ')
        -&gt;setRequired(true)
        -&gt;addFilter('StripTags')
        -&gt;addFilter('StringTrim');

    $submit = new Zend_Form_Element_Submit('submit');
    $submit-&gt;setAttrib('id', 'submitbutton')
        -&gt;setLabel('Se connecter');

    $elements = array($email,$password, $submit);
    $this-&gt;addElements($elements);

    $this-&gt;setDecorators(array(
        'FormElements',
        array('HtmlTag', array('tag' =&gt; 'dl', 'class' =&gt; 'zend_form')),
        array('Errors', array('placement' =&gt; 'apend')),
        'Form'
    ));
}
</code></pre>

<p>}</p>

<p>On voit qu’on utilise un champ <code>email</code> et un champ <code>password</code> et bien sur un
bouton valider. Si la classe de l’email vous parait bizarre je vous conseil de
lire le tutoriel sur les formulaires. Enfin les dernières lignes concernent la
mise en forme du formulaire ainsi que la position des messages d’erreurs qui
seront envoyés (ajoutés) par <strong>le modèle pour la vérification du couple Email /
Password</strong>.</p>

<h2 id="controller">Le controller</h2>

<p>Le <code>controller</code> est dans la classe <code>LoginController</code> et l’action que nous allons
utiliser est <code>loginAction</code>. On commence par donner une instance de notre
formulaire à la vue pour qu’elle puisse l’afficher.</p>

<pre><code>$form = new
Model_Form_User_Login();
$this-&gt;view-&gt;formLogin = $form;
</code></pre>

<p>Ensuite on vérifie qu’il y ai des données postées, on les récupère
et on les valide.</p>

<pre><code>if ($this-&gt;_request-&gt;isPost ()) {
    $formData = $this-&gt;_request-&gt;getPost ();
    if ($form-&gt;isValid ( $formData )) {
    }
}
</code></pre>

<p>Si elles sont valides, on récupère les données :</p>

<pre><code>$email = $form-&gt;getValue ( 'email' );
$password = $form-&gt;getValue ( 'password' );
</code></pre>

<p>Enfin on arrive à la <strong>partie qui concerne Zend_Auth</strong>. Il faut commencer par
créer ce qu’on appel un <code>Zend_Auth_Adapter_DbTable</code>, c’est un composant de
<code>Zend_Auth</code> qui va pouvoir se connecter à la <code>BDD</code>. Cet nouvel objet va prendre
en paramètre un <code>Zend_Db_Adapter_Abstract</code>, c’est à dire un connecteur à la base
de donnée. Dans notre cas nous allons prendre le connecteur principal, celui qui
est définit dans les paramètres globaux de Zend (application.ini)</p>

<pre><code>$authAdapter = new Zend_Auth_Adapter_DbTable ( Zend_Db_Table::getDefaultAdapter () );
</code></pre>

<p>Enfin il faut donner quelques informations à cet adaptateur :</p>

<ul>
<li>Le nom de la table qui contient les utilisateurs (ici users)</li>
<li>Le nom de la colonne qui contient les identifiants (ici email)</li>
<li>Le nom de la colonne qui contient les mots de passe (ici password)</li>
<li>Le type de hashage dans la base (ici MD5)</li>
<li>La valeur de l’email</li>
<li>La valeur du mot de passe</li>
</ul>

<p>&nbsp;</p>

<pre><code>$authAdapter-&gt;setTableName ( 'users' )
    -&gt;setIdentityColumn ( 'email' )
    -&gt;setCredentialColumn ( 'password' )
    -&gt;setCredentialTreatment ( 'MD5(?)' )
    -&gt;setIdentity ( $email )
    -&gt;setCredential ( $password );
</code></pre>

<p>Enfin on essaye d’identifier l’utilisateur :</p>

<pre><code>$authAuthenticate = $authAdapter-&gt;authenticate ();
</code></pre>

<p>Maintenant il faut regarder si cette authentification à réussi ou échoué.</p>

<pre><code>if ($authAuthenticate-&gt;isValid ()) {
}
</code></pre>

<p>Si elle est valide, on va mettre en <strong>variable de session les informations de
l’utilisateur</strong>. À ce moment vous pouvez mettre toutes les informations
relatives à l’utilisateur. On peu même envisager de créer une classe pour
stocker toutes ces informations. Dans le cas présent, seule les informations
issu de la table users sont utiles. On commence donc par <strong>récupérer l’espace de
stockage (storage) par défaut de l’application</strong></p>

<pre><code>$storage = Zend_Auth::getInstance ()-&gt;getStorage ();
</code></pre>

<p>Puis on y ajoute les informations de l’utilisateur, on y enlève bien sur le mot
de passe :</p>

<pre><code>write ( $authAdapter-&gt;getResultRowObject ( null, 'password' ) );
</code></pre>

<p>Et enfin on redirige l’utilisateur sur la page principale de l’application</p>

<pre><code>$this-&gt;_helper-&gt;redirector ( 'index', 'index' );
</code></pre>

<p>Et pour finir si le couple login / password n’était pas bon, on ajoute
une description au formulaire :</p>

<pre><code>} else {
    $form-&gt;addError ( 'Il n'existe pas d'utilisateur avec ce mot de passe' );
}
</code></pre>

<p>Voilà l’action du controller est faite on peu passer à la suite.</p>

<h2 id="deconnexion">Déconnexion</h2>

<p>Si l’utilisateur veut se déconnecter, il doit cliquer sur un lien qui map
l’action suivante :</p>

<pre><code>public function logoutAction() {
    Zend_Auth::getInstance()-&gt;clearIdentity ();
    $this-&gt;_helper-&gt;redirector ( 'index', 'index' );
}
</code></pre>

<p>Grâce à la ligne <code>Zend_Auth::getInstance ()-&gt;clearIdentity ();</code> on supprime
l’identification de l’utilisateur.</p>

<h2 id="verif">Vérification de connexion</h2>

<p>Il faut bien entendu vérifier (si l’on code proprement) si l’utilisateur est
déjà connecté si il veut se déconnecter, et il faut aussi vérifier que
l’utilisateur connecté puisse seulement se déconnecter dans <strong>ce</strong> controller.
On va utiliser la méthode <code>preDispatch</code> du controller, cette méthode est
systématiquement appelé à l’exécution d’une action du controller. Je vous donne
le code et je l’explique après :</p>

<pre><code>public function preDispatch() {
    if (Zend_Auth::getInstance ()-&gt;hasIdentity ()) {
        if ('logout' != $this-&gt;getRequest ()-&gt;getActionName ()) {
            $this-&gt;_helper-&gt;redirector ( 'index', 'index' );
        }
    } else {
        if ('logout' == $this-&gt;getRequest ()-&gt;getActionName ()) {
            $this-&gt;_helper-&gt;redirector ( 'index' );
        }
    }
}
</code></pre>

<p>On commence par vérifier si l’utilisateur est connecté, si il l’est et que
l’action sur laquelle il veut aller est différente de <code>‘logout’</code> on le renvoi
sur la page d’accueil du site. Sinon, si il n’est pas connecté et qu’il veut se
déconnecter, on l’envoi sur l’action qui permet de se connecter.</p>

<h2 id="zend-view-helper">Zend_View_Helper</h2>

<p><strong>Comment faire automatiquement un lien qui permet de se connecter si on ne
l’est pas, ou alors de se deconnecter si on l’est ?</strong> Et bien on utilise ce
qu’on appel un <strong>Zend_View_Helper</strong>, c’est un bout de code qui va être
utilisable dans le layout.</p>

<pre><code>class Zend_View_Helper_ProfileLink extends Zend_View_Helper_Abstract {
    public function profileLink() {
        $helperUrl = new Zend_View_Helper_Url ( );
        $auth = Zend_Auth::getInstance ();
        if ($auth-&gt;hasIdentity ()) {
            $username = $auth-&gt;getIdentity ()-&gt;prenom . ' ' . strtoupper ( substr ( $auth-&gt;getIdentity ()-&gt;nom, 0, 1 ) ) . '.';
            $logoutLink = $helperUrl-&gt;url ( array ('action' =&gt; 'logout', 'controller' =&gt; 'login' ) );

            return 'Salut ' . $username . ' (&lt;a href="' . $logoutLink . '"&gt;Logout&lt;/a&gt;)';
        }
        $loginLink = $helperUrl-&gt;url ( array ('action' =&gt; 'login', 'controller' =&gt; 'login' ) );

        return '&lt;a href="' . $loginLink . '"&gt;Login&lt;/a&gt;';
    }
}
</code></pre>

<p>On commence par créer un nouveau <code>Zend_View_Helper_Url</code> pour nous aider à
construire les URL, puis on récupère une instance de Zend_Auth. Donc si il y a
un utilisateur de connecté, on récupère son identité. Puis on construit l’URL de
déconnexion, et enfin on retourne la chaine de caractère (message + lien). Si
l’utilisateur n’est pas connecté, on construit le lien de connexion, et on
retourne la chaine de caractère. Si on veut utiliser ce script dans la vue, il
va falloir faire :</p>

<pre><code>echo $this-&gt;profileLink();
</code></pre>

<p>Et voila le code du controller en entier :</p>

<pre><code>class LoginController extends Zend_Controller_Action {

    public function init() {
        /** Initialize action controller here */
        Zend_Auth::getInstance ()-&gt;clearIdentity ();

    }

    public function preDispatch() {
        if (Zend_Auth::getInstance ()-&gt;hasIdentity ()) {
            if ('logout' != $this-&gt;getRequest ()-&gt;getActionName ()) {
                $this-&gt;_helper-&gt;redirector ( 'index','index' );
            }
        } else {
            if ('logout' == $this-&gt;getRequest()-&gt;getActionName ()) {
                $this-&gt;_helper-&gt;redirector ( 'index' );
            }
        }
    }

    public function indexAction() {
        $this-&gt;_forward ( 'login' );
    }

    public function loginAction() {

        $form = new Model_Form_User_Login ( );
        $this-&gt;view-&gt;formLogin = $form;

        if ($this-&gt;_request-&gt;isPost ()) {
            $formData = $this-&gt;_request-&gt;getPost ();
            if ($form-&gt;isValid ( $formData )) {
                $email = $form-&gt;getValue ( 'email' );
                $password = $form-&gt;getValue ( 'password' );
                $authAdapter = new Zend_Auth_Adapter_DbTable ( Zend_Db_Table::getDefaultAdapter () );
                $authAdapter-&gt;setTableName ( 'users' )
                    -&gt;setIdentityColumn ( 'email' )
                    -&gt;setCredentialColumn ( 'password' )
                    -&gt;setCredentialTreatment ( 'MD5(?)' )
                    -&gt;setIdentity ( $email )
                    -&gt;setCredential ( $password );
                $authAuthenticate = $authAdapter-&gt;authenticate ();
                if ($authAuthenticate-&gt;isValid ()) {
                    $storage = Zend_Auth::getInstance ()-&gt;getStorage ();
                    $storage-&gt;write ( $authAdapter-&gt;getResultRowObject ( null, 'password' ) );
                    $this-&gt;_helper-&gt;redirector ( 'index', 'index' );
                } else {
                    $form-&gt;addError ( 'Il n'existe pas d'utilisateur avec ce mot de passe' );
                }
            }
        }
        $this-&gt;render ( 'index' );
    }

    public function logoutAction() {
        Zend_Auth::getInstance ()-&gt;clearIdentity ();
        $this-&gt;_helper-&gt;redirector ( 'index', 'index' );
    }

}
</code></pre>
]]></content>
    </entry>
        <entry>
        <title>Zend Framework, Formulaire et Base de donnée, partie 2</title>
                <id>http://blog.lyrixx.info/zend/zend-framework-formulaire-et-base-de-donnee-partie-2.html</id>
                <updated>2009-11-20T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/zend-framework-formulaire-et-base-de-donnee-partie-2.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>On continue avec la deuxième partie de la <a href="../zend/zend-framework-formulaire-et-base-de-donnee-partie-1.html" title="Zend Framework, Formulaire et Base de donnée, partie 1">gestion d’un formulaire</a>, de <strong>la
création de formulaire, et d’ajout de donnée en BDD</strong> dans le <strong>Zend
Framework</strong>. Dans cette partie nous verrons <strong>comment afficher les données, les
modifier à l’aide du même formulaire que pour l’ajout, et la suppression des
données</strong>.</p>

<h2 id="sommaire">Sommaire</h2>

<ul>
<li>Partie 1

<ul>
<li><a href="../zend/zend-framework-formulaire-et-base-de-donnee-partie-1.html#sommaire">Sommaire</a></li>
<li><a href="../zend/zend-framework-formulaire-et-base-de-donnee-partie-1.html#bdd">Préparation de la BDD</a></li>
<li><a href="../zend/zend-framework-formulaire-et-base-de-donnee-partie-1.html#formulaire">Préparation du formulaire</a></li>
<li><a href="../zend/zend-framework-formulaire-et-base-de-donnee-partie-1.html#affichage">Affichage du formulaire</a></li>
<li><a href="../zend/zend-framework-formulaire-et-base-de-donnee-partie-1.html#controller">Le Controller du formulaire</a></li>
<li><a href="../zend/zend-framework-formulaire-et-base-de-donnee-partie-1.html#validateur">Gérer d’autres validateurs</a></li>
<li><a href=../zend/zend-framework-formulaire-et-base-de-donnee-partie-1/"#conclusion">Conclusion</a></li>
</ul></li>
<li>Partie 2

<ul>
<li><a href="#sommaire">Sommaire</a></li>
<li><a href="#read">Afficher des enregistrement</a></li>
<li><a href="#update">Mettre a jour des enregistrement</a></li>
<li><a href="#delete">Supprimer des enregistrement</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul></li>
</ul>

<h2 id="read">Afficher les données de la base de données.</h2>

<p>Il faut tout d’abord toucher a notre <code>controller</code> qui gère la page <code>user</code> pour
donner à la vue une instance de la classe ><code>Model_DbTable_Users()</code>. Vu que
j’utilise souvent cette classe, j’ai fait une méthode dans la classe
<code>controller</code> : (<code>application/modules/Frontend/controllers/UserController.php</code>)</p>

<pre><code>private function getUsersAll() {
    $dbUser = new Model_DbTable_Users();
    return $dbUser-&gt;fetchAll()-&gt;toArray();
}
</code></pre>

<p>Et maintenant on a juste a passer cette classe à la vue :</p>

<pre><code>public function indexAction(){
    $this-&gt;view-&gt;usersAll = $this-&gt;getUsersAll();
}
</code></pre>

<p>On passe maintenant à la vue
(<code>application/modules/Frontend/views/scripts/user/index.phtml</code>).</p>

<pre><code>if (isset($this-&gt;usersAll)): ?&gt;
    &lt;h2&gt;
        &lt;?php echo $this-&gt;translate('view_user_modify')?&gt;:
    &lt;/h2&gt;
    &lt;table&gt;
        &lt;tr&gt;
        &lt;th&gt;&lt;?php echo $this-&gt;translate('view_user_firstname')?&gt;&lt;/th&gt;
        &lt;th&gt;&lt;?php echo $this-&gt;translate('view_user_name')?&gt;&lt;/th&gt;
        &lt;th&gt;&lt;?php echo $this-&gt;translate('view_user_email')?&gt;&lt;/th&gt;
        &lt;th&gt;&lt;?php echo $this-&gt;translate('view_user_modify')?&gt;&lt;/th&gt;

        &lt;/tr&gt;
        &lt;?php foreach ($this-&gt;usersAll as $user){
            if ($user['active'] == 1){
                echo '&lt;tr&gt;';
            }else{
                echo '&lt;tr style="text-decoration:line-through"&gt;';
            }
            echo '&lt;td&gt;'.$user['nom'].'&lt;/td&gt;';
            echo '&lt;td&gt;'.$user['prenom'].'&lt;/td&gt;';
            echo '&lt;td&gt;'.$user['email'].'&lt;/td&gt;';

            echo '&lt;td&gt;&lt;a
            href="'.$this-&gt;url(array('action'=&gt;'edit','id'=&gt;$user['idUser'])).'"&gt;Modifier&lt;/a&gt;
            | &lt;a
            href="'.$this-&gt;url(array('action'=&gt;'del','id'=&gt;$user['idUser'])).'"
            &gt;Supprimer&lt;/a&gt;&lt;/td&gt;';
            echo '&lt;/tr&gt;';
        }
        ?&gt;
    &lt;/table&gt;
&lt;?php endif; ?&gt;
</code></pre>

<p style="text-align: center;">   <a href="../wp-
content/uploads/2009/11/liste-users.png"   rel="lightbox[947]"><img
class="aligncenter   size-full wp-image-948" title="liste users" src="../wp-content/uploads/2009/11/liste-users.png"   alt="liste
users" width="675" height="220" /></a> </p>

<p>On commence par vérifier que la variable <code>usersAll</code> est bien définit. Dans ce
cas la on construit notre tableau assez naturellement. Encore une fois j’utilise
ici la <a href="../zend/mettre-en-place-un-systeme-de-traduction-dans-zend-framework.html" title="Comment mettre en place un systeme de traduction dans Zend Framework">traduction du framework</a> (mais on n’est pas forcé de le faire).</p>

<pre><code>if ($user['active'] == 1) {
    echo '&lt;tr&gt;';
} else {
    echo '&lt;tr style="text-decoration:line-through"&gt;';
}
</code></pre>

<p>Ce code sert juste a vérifié que l’utilisateur est actif. Si il ne l’est pas on
barre la ligne :</p>

<pre><code>&lt;a href="&lt;?php echo $this-&gt;url(array('action'=&gt;'edit','id'=&gt;$user['idUser'])) ?&gt;"&gt;
    Modifier
&lt;/a&gt;
|
&lt;a href="&lt;?php echo $this-&gt;url(array('action'=&gt;'del','id'=&gt;$user['idUser'])) ?&gt;"&gt;
    Supprimer
&lt;/a&gt;
</code></pre>

<p>Enfin cette ligne est assez sympa : en effet on veut pouvoir <strong>éditer et
supprimer des utilisateurs</strong>. Il nous faut donc des <strong>liens</strong> pour le faire. Et
bien pour fabriquer ces liens on va utiliser une <strong>aide de vues</strong> (View Helper :
<code>Zend_View_Helper_Url</code>) qui va nous construire notre lien directement. On lui
passe comme argument un tableau, avec comme clés l'<code>action</code>, le <code>controller</code>, le
<code>module</code> et des <code>paramètres</code>. Tout ces champs ne sont pas obligatoires. Dans mon
cas, je reste sur le même <code>controller</code>, et donc le même <code>module</code>. Donc je
n’utilise que l’<code>action</code> et un <code>paramètre id</code>. Ce paramètre est passé en <code>GET</code>
donc directement dans l’<code>url</code>. De plus <code>zend</code> va gérer automatiquement l’<strong>url
rewriting</strong>, qui est beaucoup plus <strong>user-friendly et seo-friendly</strong>. Voyons ce
que donne le résultat : (il y a un peu de <code>css</code>)</p>

<h2 id="update">Modification d’un enregistrement</h2>

<p>Donc notre lien pour modifier un utilisateur est déjà fait, et comme on a pu le
voir, il pointe sur l’<code>action edit</code> du <code>controller UserController.php</code>. Il va
donc falloir modifier celui-ci, ainsi que la classe qui gère le formulaire et la
vue. On commence avec le formulaire. En fait on va utiliser la même classe que
pour l’ajout, mais on va y rajouter un peu de code (à la fin de la méthode).</p>

<h3>Model</h3>

<pre><code>$idUser = $this-&gt;getIdUser();
if (isset ( $idUser ) &amp;&amp; $idUser != "") {
    $user = new Model_DbTable_Users ( );
    $user = $user-&gt;fetchRow ( array ("idUser = ?" =&gt; $idUser ) );
    if ($user != null) {
        $user = $user-&gt;toArray ();
        $this-&gt;populate ( $user );
    } else {
        throw new Zend_Exception ( "Il n'y a pas de
        d'utilisateur avec l'id : " . $idUser );
    }
    $password-&gt;setDescription ( "form_user_update_password_change" );
    $password-&gt;setRequired ( false );
    $submit-&gt;setLabel ( 'form_user_update_submit' );
}
</code></pre>

<p>On commence par récupérer la valeur de l’<code>id</code> de l’utilisateur. Bien entendu, il
faut déclarer une variable (<code>private</code>) et faire le <code>getter</code> et le <code>setter</code> qui
va bien. Si il y a bien une valeur et qu’elle est différente de null on récupère
une instance de la classe <code>Model_DbTable_Users</code>. On sélectionne la ligne qui
va bien en fonction de l’<code>id</code>. Si on a bien récupérer un utilisateur (c’est a
dire qu’il y a bien un enregistrement avec cet id)> on <strong>peuple le formulaire</strong>,
c’est a dire qu’on le rempli des données récupérer. Sinon on renvoi une erreur.
Ensuite, ce n’est pas obligatoire, mais je laisse le choix a l’utilisateur : si
il ne veut pas changer de mot de passe, il ne fait rien, sinon il en rentre un
nouveau. Enfin on change le <code>label</code> du bouton envoyer>. Mais ce n’est pas finit.
En effet il reste un problème de validateur> sur le champs <code>email</code>. Il vaut donc
le supprimer, mais que si c’est le même email (saisi) que l’email qui est déjà
dans la <code>BDD</code>. De la même marnière que dans la partie 1, on va devoir redéfinir
la méthode <code>isValid</code> :</p>

<pre><code>public function isValid($data)
{
    $this-&gt;getElement('password')-&gt;addValidator(new App_Validate_PasswordMatch($data['password2']));
    if ($this-&gt;getElement('email')-&gt;getValue() == $data['email']){
        $this-&gt;getElement('email')-&gt;removeValidator ( "Zend_Validate_Db_NoRecordExists" );
    }
    return parent::isValid($data);
}
</code></pre>

<p>Par rapport au code de la partie 1, on a rajouté le bloc <code>IF</code> : Si la valeur en
base est la même que la valeur saisi, on supprime le validateur>, sinon on ne
fait rien (et donc on le laisse). Voilà notre formulaire est enfin prêt. On
passe maintenant au <code>controller</code>.</p>

<h3>Controller</h3>

<pre><code>public function editAction() {
    try {
        $form = new Model_Form_User_User ( );
        $form-&gt;setIdUser($this-&gt;getRequest ()-&gt;getParam ( 'id' ));
        $form-&gt;init();
        $this-&gt;view-&gt;formUserEdit = $form;
    } catch (Zend_Exception $e) {
        $this-&gt;view-&gt;formUserEdit = $e-&gt;getMessage();
    }
}
</code></pre>

<p>On essaye d’instancier la classe <code>Model_Form_User_User ( )</code>. Ensuite on
récupère la valeur du paramètre <code>id</code> (passer en <code>GET</code>) et on la passe a notre
classe forme. On est obligé de refaire le formulaire puis on la passe a la vue.
Si il y a un problème (pas d’utilisateur avec id X) on passe les erreurs a la
vue.</p>

<pre><code>if ($this-&gt;_request-&gt;isPost ()) {
    $formData = $this-&gt;_request-&gt;getPost ();
    if ($form-&gt;isValid ( $formData )) {
    }
}
</code></pre>

<p>Ensuite, comme dans la première partie, on vérifie qu’il y ai des données de
poster, et les recupère puis on les passes au validateur.</p>

<pre><code>$user = new Model_DbTable_Users ( );
if ($formData ['password'] == "") {
    unset ( $formData ['password'] );
    unset ( $formData ['password2'] );
} else {
    $formData ['password'] = md5 (
    $formData ['password'] );
    unset ( $formData ['password2'] );
}
unset ( $formData ['submit'] );
$result = $user-&gt;update ( $formData, array ("idUser = ?" =&gt; $formData ['idUser'] ) );
</code></pre>

<p>Si elle sont valide, on instancie la classe <code>Model_DbTable_Users</code>. On vérifie
la valeur du champs <code>password</code> : Si elle est nul, on enlève du tableau de donnée
<code>formData</code> les champs <code>password</code> et <code>password2</code>, sinon on chiffre en md5 le
champ <code>password</code> et en enlève <code>password2</code>. Enfin on enlève le champ <code>submit</code>. Et
pour finir on met a jour la base de donnée.</p>

<pre><code>$this-&gt;_helper-&gt;redirector ( 'index', 'user' );
</code></pre>

<p>Enfin on redirige vers l’<code>action index</code> du <code>controller user</code>.</p>

<h3>Vue</h3>

<p>Ici c’est le même principe que pour le formulaire d’ajout</p>

<pre><code>&lt;?php if (isset($this-&gt;formUserEdit)) : ?&gt;
    &lt;h2&gt;
        &lt;?php echo $this-&gt;translate('view_user_edit')?&gt;:
    &lt;/h2&gt;
    &lt;?php echo $this-&gt;formUserEdit; ?&gt;
&lt;?php endif ?&gt;
</code></pre>

<p style="text-align: center;">   <a href="../wp-
content/uploads/2009/11/edit-user.png"   rel="lightbox[947]"><img
class="aligncenter   size-full wp-image-949" title="edit user" src="../wp-content/uploads/2009/11/edit-user.png"   alt="edit user"
width="468" height="669" /></a> </p>

<h2 id="delete">Supprimer un Enregistrement</h2>

<p>La suppression d’un utilisateur <strong>va se faire en deux étape</strong>, la première
servant à confirmer la demande de suppression. Donc on crée une action
intermédiaire qui passe à la vue la valeur de l’<code>id</code> de l’utilisateur.</p>

<pre><code>public function delAction() {
    $id = $this-&gt;getRequest ()-&gt;getParam ( 'id' );
    $this-&gt;view-&gt;delUserId = $id;
    $this-&gt;render('index');
}
</code></pre>

<p>Et on ajoute à la vue le code qui va générer notre demande de suppression.
Encore ici on réutilise l’aide de vue <code>url</code>.</p>

<pre><code>&lt;?php if (isset($this-&gt;delUserId)): ?&gt;
    &lt;h2&gt;
        &lt;?php echo $this-&gt;translate('are_you_sure')?&gt;:
    &lt;/h2&gt;
    &lt;a
        href="&lt;?php echo $this-&gt;url(array('action'=&gt;'delete','id'=&gt;$this-&gt;delUserId));?&gt;"&gt;
        &lt;?php echo $this-&gt;translate('yes')?&gt;
    &lt;/a&gt;
    &lt;a href="&lt;?php echo $this-&gt;url(array('action'=&gt;'index','controller'=&gt;'user'),null,true)?&gt;"&gt;
        &lt;?php echo $this-&gt;translate('no')?&gt;
    &lt;/a&gt;
&lt;?php endif ?&gt;
</code></pre>

<p>Enfin si l’utilisateur clique sur oui, on exécute l’action suivante :</p>

<pre><code>public function deleteAction() {
    public function deleteAction() {
    $id = $this-&gt;getRequest ()-&gt;getParam ( 'id' );
    $user = new Model_DbTable_Users ( );
    $result = $user-&gt;delete ( array ("idUser = ?" =&gt; $id ) );
    $this-&gt;_helper-&gt;redirector ( 'index', 'user' );
}
</code></pre>

<p>Et voilà le tour est joué. On a bien supprimer notre utilisateur.</p>

<h2 id="conclusion">Conclusion</h2>

<p>On à enfin finit la gestion d’une table de la base de donnée grâce a un seul
formulaire. Je vous donne donc maintenant le code de tous les fichiers dont j’ai
eu besoin. Il y a des petites différence dans la mesure ou j’ai ajouté des
messages de confirmation ou d’échec. De plus la structure de l’archive n’est pas
bonne du tout… Il y a bien tous les fichiers (enfin je pense, mais c’est plus a
titre indicatif). Il ne fonctionneront pas sans le bootstrap, le fichier de
config, le fichier de traduction et enfin la bdd. Je referais un gros package
plus tard. <a href="../wp-content/uploads/2009/11/formulaire.zip">Fichiers</a></p>
]]></content>
    </entry>
        <entry>
        <title>Zend Framework, Formulaire et Base de donnée, partie 1</title>
                <id>http://blog.lyrixx.info/zend/zend-framework-formulaire-et-base-de-donnee-partie-1.html</id>
                <updated>2009-11-19T00:00:00+01:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/zend-framework-formulaire-et-base-de-donnee-partie-1.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Hello, On va voir aujourd’hui <strong>comment construire et gérer un formulaire</strong>,
<strong>ajouter les données récupéré dans une base de données</strong>, <strong>afficher ces
données</strong>, et enfin <strong>modifier</strong> et <strong>supprimer</strong> celles-ci. En gros, on va
utiliser les propriétés <strong><acronym title="Create Read Update
Delete">CRUD</acronym></strong> de <strong>Zend Framework</strong> en y associant une <strong>base de
donnée</strong> et un <strong>formulaire</strong>. P.S. : Pendant la rédaction de ce <strong>tuto</strong>, je me
suis rendu compte qu’il allait être beaucoup trop gros, du coup j’ai décidé de
<strong>le couper en deux parties</strong>, une première sur la création du formulaire et
l’ajout en base, une deuxième sur la l’affichage, la modification et la
suppression.</p>

<h2 id="sommaire">Sommaire</h2>

<ul>
<li>Partie 1

<ul>
<li><a href="#sommaire">Sommaire</a></li>
<li><a href="#bdd">Préparation de la BDD</a></li>
<li><a href="#formulaire">Préparation du formulaire</a></li>
<li><a href="#affichage">Affichage du formulaire</a></li>
<li><a href="#controller">Le Controller du formulaire</a></li>
<li><a href="#validateur">Gérer d’autres validateurs</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul></li>
<li>Partie 2

<ul>
<li><a href="../zend/zend-framework-formulaire-et-base-de-donnee-partie-2.html#sommaire">Sommaire</a></li>
<li><a href="../zend/zend-framework-formulaire-et-base-de-donnee-partie-2.html#read">Afficher des enregistrement</a></li>
<li><a href="../zend/zend-framework-formulaire-et-base-de-donnee-partie-2.html#update">Mettre a jour des enregistrement</a></li>
<li><a href="../zend/zend-framework-formulaire-et-base-de-donnee-partie-2.html#delete">Supprimer des enregistrement</a></li>
<li><a href="../zend/zend-framework-formulaire-et-base-de-donnee-partie-2.html#conclusion">Conclusion</a></li>
</ul></li>
</ul>

<h2 id="bdd">Préparation de la base de donnée :</h2>

<p style="text-align: center;">   <a href="../wp-
content/uploads/2009/11/database.png"   rel="lightbox[929]"><img
class="aligncenter   size-full wp-image-931" title="database user" src="../wp-content/uploads/2009/11/database.png"   alt="database user"
width="136" height="178" /></a> </p>

<pre><code>CREATE TABLE IF NOT
EXISTS `Budget`.`users` (
*idUser` INT NOT NULL AUTO_INCREMENT ,
*nom` VARCHAR(20) NULL ,
*prenom` VARCHAR(20) NULL ,
*email` VARCHAR(30) NULL ,
*active` INT NULL ,
*level` INT NULL ,
*password` BIGINT NOT NULL ,
PRIMARY KEY (`idUser`) )
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
PACK_KEYS = DEFAULT
</code></pre>

<p>Comme <a href="../zend/comment-gerer-une-base-de-donnee-avec-le-zend-framework.html" title="Comment gérer une base de donnée avec le Zend Framework">on a vu dans un précédant tutoriel</a>, il faut créer une <strong>classe qui
va nous mapper les informations de la table</strong> (<strong><acronym title="Object Relation
Mapper">ORM</acronym></strong> du <code>Zend Framework</code>).</p>

<pre><code>class Model_DbTable_Users extends Zend_Db_Table_Abstract {
    protected $_name = 'users';
    protected $_primary = array('idUser');
}
</code></pre>

<h2 id="formulaire">Préparation du formulaire</h2>

<p>Il existe plusieurs façons de faire un formulaire : soit en utilisant des
<code>tableaux php</code>, des <code>objets php</code>, un <code>fichier xml</code> etc… Pour ma part j’utilise
des <code>objets php</code> et j’implémente pour chaque formulaire la classe <strong>Zend_Form</strong>
(je vais y revenir). Pour plus de clarté dans mon arborescence de fichiers, je
place tous mes formulaires, dans le dossier : <code>application/models/Form/</code> et
comme ce formulaire ci concerne l’<code>ajout et/ou la modification d’un
utilisateur</code>, mon fichier <code>User.php</code> est dans le dossier :
<code>application/models/Form/User</code>. Donc le fichier de base doit ressembler à ça :</p>

<pre><code>class Model_Form_User_User extends Zend_Form {
    public function init() {
    }
}
</code></pre>

<p>Comme on peut le voir, il faut étendre la classe <code>Zend_Form</code>, et mettre tout
notre code qui ajoute des éléments dans la méthode <code>init()</code>. Ce code sera
<strong>directement exécuter lors de la création d’un nouveau formulaire</strong>. Mais on va
très vite ajouter des éléments à notre formulaire, sinon il ne va pas servir à
grand chose. On peut, par exemple, <strong>ajouter un champ input texte</strong> grâce a
ce code (le principe reste le même pour tous les types d’éléments) :</p>

<pre><code>$champText = new Zend_Form_Element_Text('champText');
$champText-&gt;setLabel('un champ texte')
    -&gt;setRequired(true)
    -&gt;addValidator('notEmpty')
    -&gt;addFilter('StripTags')
    -&gt;addFilter('StringTrim');
</code></pre>

<p>On commence par créer un nouvel élément de type input texte, puis on ajoute un
<code>label</code>, on ajoute ensuite un <code>validateur</code> qui (dans ce cas) oblige la valeur à
être rempli, puis on ajoute deux <code>filtres</code>. Il existe un grand nombre de
<code>validateurs</code> et de <code>filtres</code>. On en verra quelques un ici. Mais comme on peut
se douter, on va très souvent répéter le même code. Donc on peut se <strong>créer une
petite classe</strong> qui ne va servir qu’a ajouter un champ de type input texte :
(<code>application/models/Form/EText.php</code>)</p>

<pre><code>class Model_Form_EText extends Zend_Form_Element_Text {

    public function __construct($options = null,$label) {
        parent::__construct($options);
        $this-&gt;setLabel($label)
            -&gt;setRequired(true)
            -&gt;addFilter('StripTags')
            -&gt;addFilter('StringTrim');
    }
}
</code></pre>

<p><strong>Voilà, je vous donne maintenant une partie du code du formulaire et j’explique
les points nouveaux.</strong></p>

<pre><code>class Model_Form_User_User extends Zend_Form {

    public function init() {
        $this-&gt;setName ( 'add_user' );

        $id = new Zend_Form_Element_Hidden ( 'idUser' );

        $nom = new Model_Form_EText ( 'nom', 'form_user_add_name' );

        $prenom = new Model_Form_EText ( 'prenom', 'form_user_add_firstname' );

        $email = new Model_Form_EText ( 'email', 'form_user_add_mail' );
        $email-&gt;addValidator ( 'EmailAddress' )-&gt;addValidator( new Zend_Validate_Db_NoRecordExists ('users', 'email' ) );

        $password = new Zend_Form_Element_Password ( 'password' );
        $password-&gt;setLabel ( 'form_user_add_password' )-&gt;addFilter ( 'StripTags' )-&gt;addFilter ( 'StringTrim' )-&gt;setRequired ( true );

        $password2 = new Zend_Form_Element_Password ( 'password2' );
        $password2-&gt;setLabel ( 'form_user_add_password2' )-&gt;addFilter ( 'StripTags' )-&gt;addFilter ( 'StringTrim' );

        $active = new Zend_Form_Element_Checkbox ( 'active' );
        $active-&gt;setLabel ( 'form_user_add_enable' )-&gt;addFilter ( 'StripTags' )-&gt;addFilter ( 'StringTrim' )-&gt;setValue ( 1 );

        $level = new Zend_Form_Element_Select ( 'level' );
        $level-&gt;setLabel ( 'form_user_add_level' )-&gt;addFilter ( 'StripTags' )-&gt;addFilter ( 'StringTrim' );

        $levelOptions = array ();
        for($i = 0; $i &lt;= 9; $i ++) {
            $levelOptions [$i] = array ('key' =&gt; $i, 'value' =&gt; $i );
        }
        $level-&gt;addMultiOptions ( $levelOptions );

        $submit = new Zend_Form_Element_Submit ( 'submit' );
        $submit-&gt;setAttrib ( 'id', 'submitbutton' )-&gt;setLabel ( 'form_user_add_submit' );

        $elements = array ($id, $nom, $prenom, $email, $password, $password2, $active, $level, $submit );
        $this-&gt;addElements ( $elements );
    }
}
</code></pre>

<p>Pour commencer je donne un <code>nom</code> a mon formulaire, ce qui peut être pratique
pour le retrouver, en effet le nom du formulaire correspond a son <code>id</code> dans le
<code>code html et css</code>. On peut aussi ajouter d’autre options, comme l’<code>action du
controller</code>, mais dans notre cas, le formulaire et sa page de destination
(<code>l’action</code>) sont les mêmes, donc on pas besoin de le définir. Ensuite, comme on
peut le voir, on crée plusieurs éléments :</p>

<ul>
<li>l’<code>id</code> qui est un <code>élément de type hidden</code>, qui nous servira lors des
mises à jour d’un utilisateur.</li>
<li><code>nom</code>, <code>prenom</code> qui sont des éléments de type <code>Etext</code>, les éléments
qu’on a crée un peu plus haut.</li>
<li><code>email</code>

<ul>
<li>Le champ <code>email</code> est aussi un champs de type <code>Etext</code>,</li>
<li>On a ajouter un <code>validateur d’adresse mail</code>, pratique, le boulot est
déjà fait ! <code>-&gt;addValidator('EmailAddress')</code></li>
<li>On ajoute un second <code>validateur</code> qui vérifie que l’adresse mail n’est
pas déjà dans la base de donnée:  *addValidator (new Zend_Validate_Db_NoRecordExists('users','email'))<code>.
Le premier paramètre est le</code>nom de la table`. Le second est
l’attribut qui doit être unique.</li>
</ul></li>
<li><code>password</code> et <code>password2</code> sont des <code>champs de type password</code>.</li>
<li><code>active</code> sert a savoir si l’utilisateur est actif. C’est un élément <code>de type Checkbox</code>,
avec comme valeurpar défaut 1 (case coché)</li>
<li><p><code>level</code> sert a niveau d’administration du site. <code>De type Select</code> On ajoute
dans un tableau des correspondances <code>key =&gt; value</code> qui représentent les
*options du select`</p></li>
<li><p><code>submit</code> qui est notre bouton envoyer.</p></li>
</ul>

<p><strong>Les **labels</strong> ne sont pas très significatifs ou user-friendly, c’est normale,
j’utilise la traduction du zend framework**. Enfin il ne reste plus qu’a ajouter
tous ces éléments dans le formulaire lui même et le tours est joué, on a notre
formulaire. Je tiens a rappelé qu’<strong>il existe vraiment un grand nombre de façon
de fabriquer un formulaire</strong>, <strong>d’ajouter des filtres</strong>, <strong>des validateurs</strong>. Il
y a quelques exemples ici, mais je ne peux pas faire un exemple pour chaque cas.
Je vous recommande donc d’aller faire un tour sur sur le doc du <strong>zf</strong>.</p>

<h2 id="affichage">Affichage du formulaire</h2>

<p><strong>Je ne vais pas m’occuper ici de styler le formulaire</strong>. Juste de l’afficher
comme il vient. Par défaut <strong>zf</strong> utilise ce qu’on appel des <strong>décorateurs</strong>, il
est possible de les personnaliser, mais ce n’est pas le but ici. Vous pouvez
aller faire un tours <a href="http://www.dator.fr/tutorial-creer-une-application-avec-le-zend-framework-%E2%80%93-8-le-formulaire-dinscription-de-watchmydesk/">sur le site de dator pour avoir un exemple</a> de ce
qu’on peut faire (même si je ne suis pas fan de sa technique, mais elle reste
valide à 100% … huhu). Pour les <code>décorateurs</code>, le code a <code>ajouter / modifier</code>
doit se trouver dans la classe qui fabrique notre formulaire. Donc il va falloir
<strong>éditer la vu qui affichera le formulaire.</strong> Chez moi c’est
<code>application/modules/Frontend/views/scripts/user/index.phtml</code> car c’est le
<strong>controller</strong> <code>userController.php</code> qui va être appelé ici. Voilà a quoi doit
ressembler la vues <strong>au minimum</strong> :</p>

<pre><code>&lt;?php if (isset($this-&gt;formUser)) : ?&gt;
    &lt;h2&gt;
        &lt;?php echo $this-&gt;translate('view_user_add')?&gt; ?
    &lt;/h2&gt;
    &lt;?php echo $this-&gt;formUser ?&gt;
&lt;?php endif ?&gt;
</code></pre>

<p>On fait une simple vérification pour voir sur le formulaire a bien était envoyé
par le <code>controller</code> à la vue et on l’affiche.</p>

<h2 id="controller">Le controller du formulaire</h2>

<p>Bon on arrive la <strong>gestion du controller</strong> de notre formulaire. Je vous <strong>livre
le code et je l’explique ensuite</strong> :
(<code>application/modules/Frontend/controllers/UserController.php</code>)</p>

<pre><code>class UserController extends Zend_Controller_Action
{
    public function indexAction(){
    $form = new Model_Form_User_User();
    $this-&gt;view-&gt;formUser = $form;
    if ($this-&gt;_request-&gt;isPost()) {
        $formData = $this-&gt;_request-&gt;getPost();
        if ($form-&gt;isValid($formData)) {
            $users = new Model_DbTable_Users();
            $row = $users-&gt;createRow();
            $row-&gt;nom = $form-&gt;getValue('nom');
            $row-&gt;prenom = $form-&gt;getValue('prenom');
            $row-&gt;email = $form-&gt;getValue('email');
            $row-&gt;password = md5($form-&gt;getValue('password'));
            $row-&gt;active = $form-&gt;getValue('active');
            $row-&gt;level = $form-&gt;getValue('level');
            $result = $row-&gt;save();
            //On gere le resultat et l'action qui s'en suit.
            $form-&gt;reset();
        }
    }
}
</code></pre>

<p>Petit apercu avant de continuer</p>

<p style="text-align: center;">   <a href="../wp-
content/uploads/2009/11/Form-User-Add.png"   rel="lightbox[929]"><img
class="aligncenter size-full wp-image-938" style="border: 1px solid black;"
title="Form User Add" src="../wp-content/uploads/2009/11/Form-
User-Add.png" alt="Form   User Add" width="370" height="571" /></a> </p>

<pre><code>$form = new
Model_Form_User_User();
$this&gt;view-&gt;formUser = $form;
</code></pre>

<p>On commence par <code>instancier</code> la classe du formulaire et on le donne à la vue. A
partir de ce moment on peut <strong>déjà tester si notre formulaire s’affiche bien</strong>.
Bien entendu ça ne sert a rien de cliquer sur envoyer, ça ne fonctionnera pas !
Comme on a pu le voir plus haut, la page de destination du formulaire est elle
même. Donc le <code>controller</code> est le même. C’est donc dans la même <code>méthode</code> du
même <code>controller</code> qu’on teste en premier si notre <strong>formulaire est valide</strong> et
qu’ensuite on traite le résultat.</p>

<pre><code>if ($this-&gt;_request-&gt;isPost()) {
     $formData = $this-&gt;_request-&gt;getPost();
}
</code></pre>

<p>On commence avec le <code>IF</code> pour voir si il y a eu des données de type <code>POST</code>,
<code>POST</code> étant le type d’envoi par défaut pour les formulaires. On peut bien
entendu envoyer notre formulaire en <code>GET</code> en modifiant la classe <code>user.php</code>.
Ensuite on récupère nos données.</p>

<pre><code>if ($form-&gt;isValid($formData)) {
}
</code></pre>

<p>Ce point est très intéressant, car il va <strong>automatiquement voir si notre
formulaire est valide</strong>. C’est a dire qu’il va exécuter chaque <code>validateurs</code> de
nos <code>élement</code> composant le formulaire. Si il y a <strong>au moins une erreur la
validation ne passera pas</strong>, mais zf va** automatiquement refaire notre
formulaire en reprenant les valeurs insérer, et en ajouter un message ou il y a
eu des erreurs** (par exemple « la valeur est requise »). Ici encore on peut
personnaliser le message. Dans mon cas j’utilise encore une fois la
<code>traduction</code>. Bon et si le formulaire est valide ?</p>

<pre><code>$users = new Model_DbTable_Users();
$row = $users-&gt;createRow();
$row-&gt;nom = $form-&gt;getValue('nom');
$row-&gt;prenom = $form-&gt;getValue('prenom');
$row-&gt;email = $form-&gt;getValue('email');
$row-&gt;password = md5($form-&gt;getValue('password'));
$row-&gt;active = $form-&gt;getValue('active');
$row-&gt;level = $form-&gt;getValue('level');
$result = $row-&gt;save();
</code></pre>

<p>Comme on veut (à la base) que notre formulaire nous serve à <strong>ajouter des
utilisateurs en base</strong>, et bien on reprend le même code que dans le tutoriel sur
la <code>gestion des BDD</code> ; On instancie la classe <code>Model_DbTable_Users</code>, <strong>on crée
un nouvelle ligne, on ajoute tous nos champs</strong>, et enfin <strong>on sauvegarde</strong>. Bien
entendu, on peut mettre la ligne <code>$row-&gt;save()</code> dans un bloque <code>try-catch</code>, mais
si on a bien fait notre boulot sur les <code>validateurs</code>, normalement, il n’y a pas
besoin.</p>

<pre><code>reset();
</code></pre>

<p>Enfin on <strong>remet a zéro notre formulaire,</strong> c’est a dire qu’on vide tout les
champs. On peut par la suite ajouter un message (pour l’ergonomie) qui
s’affichera expliquant que l’ajout s’est bien effectué. Ici c’est donc juste un
passage de variable à la vue. Voilà notre formulaire fonctionne mais il y reste
encore des choses a voir.</p>

<h2 id="validateur">Double vérification du password ; Validation avec données.</h2>

<p>Du fait qu’il faille vérifier que l’utilisateur a bien rentré <strong>deux fois le
même password</strong>, on va avoir besoin d’au moins un des deux <code>password</code>. On va
donc redéfinir la méthode <code>isValid</code> de la classe <code>Model_Form_User_User</code> qui
étend <code>Zend_Form</code> je vous rappel. Cette classe, comme on a vu plus haut, <strong>est
systématiquement appelé</strong>, et elle appel à son tour tous les <code>validateurs</code> de
tous les <code>éléments</code>. On va utiliser pour vérifier que l’utilisateur a bien
rentré deux fois le même <code>password</code> grâce une classe de validation réalisé par
<a href="http://pastie.textmate.org/640447">l’ami dator</a> :</p>

<pre><code>class App_Validate_PasswordMatch extends Zend_Validate_Abstract
{
    const PASSWORD_MISMATCH = 'passwordMismatch';
    protected $_compare;
    protected $_messageTemplates = array(
        self::PASSWORD_MISMATCH =&gt; "PASSWORD_MISMATCH"
    );
    public function __construct($compare){
        $this-&gt;_compare = $compare;
    }
    public function isValid($value){
        $this-&gt;_setValue((string) $value);
        if ($value !== $this-&gt;_compare) {
            $this-&gt;_error(self::PASSWORD_MISMATCH);
            return false;
        }
        return true;
    }
}
</code></pre>

<p>On peut la mettre en bas de la classe <code>Model_Form_User_User</code>, ça ne pose pas
de problème. Du coup il ne nous reste plus qu’a l’utiliser :</p>

<pre><code>public function isValid($data)
{
    $this-&gt;getElement('password')-&gt;addValidator(new
    App_Validate_PasswordMatch($data['password2']));
    if ($this-&gt;getElement('email')-&gt;getValue() == $data['email']){
        $this-&gt;getElement('email')-&gt;removeValidator ( "Zend_Validate_Db_NoRecordExists");
    }
    return parent::isValid($data);
}
</code></pre>

<p>On commence par récupérer l’élément <code>password</code>, auquel on ajoute notre
<code>validateur personnalisé</code> en lui donnée comme paramètre le <code>password2</code> rentré
par l’utilisateur. Ensuite on appelle la méthode « classique ».</p>

<h2 id="conclusion">Conclusion</h2>

<p>Et voilà, on a finit avec notre formulaire. On peut bien sur l’améliorer et
surtout le rendre plus joli. Je vous redonnerai tous les fichiers nécessaires
lors de la deuxième ;) et on peut continuer avec<a href="../zend/zend-framework-formulaire-et-base-de-donnee-partie-2.html" title="Zend Framework, Formulaire et Base de donnée, partie 2"> la 2eme partie : affichage,
modification et suppression</a>.</p>
]]></content>
    </entry>
        <entry>
        <title>Comment gérer une base de donnée avec le Zend Framework</title>
                <id>http://blog.lyrixx.info/zend/comment-gerer-une-base-de-donnee-avec-le-zend-framework.html</id>
                <updated>2009-10-19T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/comment-gerer-une-base-de-donnee-avec-le-zend-framework.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Alors la on va aborder un chapitre très important. <strong>Les bases de données sont
bien sur très importantes</strong> pour un site web ou un service web. On va voir
ensemble comment <strong>ajouter, modifier, supprimer des enregistrements (ou tuples)
dans un table, dans une base de donnée</strong>. On va donc utiliser la gestion <strong>CRUD
du Zend Framework 1.9</strong>.</p>

<h2 id="sommaire">Sommaire</h2>

<ul>
<li><a href="#sommaire">Sommaire</a></li>
<li><a href="#connection">Connexion a la base de donnée</a></li>
<li><a href="#schemas">Schémas de la table</a></li>
<li><a href="#metier">Préparation de la classe métier</a></li>
<li><a href="#read">Obtenir et récupérer des enregistrements</a></li>
<li><a href="#create">Ajouter des enregistrements</a></li>
<li><a href="#update">Modifier des enregistrements</a></li>
<li><a href="#delete">Supprimer des enregistrement</a></li>
<li><a href="#extend">Etendre la classe métier</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="connection">Connexion a la base de donnée.</h2>

<p><strong>La connexion à la base de donnée principale se fait toute seule</strong>. Je
m’explique, c’est le <strong>bootstrap qui va
initialiser notre connexion à la base de donnée.</strong> En fait le <code>bootstrap</code>
va charger le fichier de <strong>configuration
de l’application</strong> et c’est dans ce fichier que l’on va définir les
paramètres de connexion a la <code>BDD</code>. Il
faut donc éditer le fichier <code>application/configs/application.ini</code></p>

<pre><code>; DATABASE
resources.db.adapter = "MYSQLI"
resources.db.params.host = "localhost"
resources.db.params.username = "budget"
resources.db.params.password = "budget"
resources.db.params.dbname = "budget"
resources.db.params.date_format = "YYYY-MM-ddTHH:mm:ss"
resources.db.isDefaultTableAdapter = true
</code></pre>

<p>Si on veut que notre connexion à la <code>BDD</code> soit géré automatiquement, le schémas
(ci dessus) est très rigide. En effet <strong>zend</strong> va chercher automatiquement si
dans le <code>fichier de configuration</code> il y a des constantes «<code>ressources.db.**</code> »
de défini, et si oui il va essayé de se connecter à la base de donnée. Il est
bien sur possible d’avoir plusieurs connexions à différente <code>SGBD</code> (<strong>mysql,
orable, DB2</strong> …). Si vous utiliser <strong>mysql</strong>, il suffit de copier / coller le
schémas ci dessus, et de bien remplacer les lignes : <code>host</code>, <code>username</code>,
<code>password</code>et <code>dbname</code> qui signifie respectivement : hôte, nom d’utilisateur,
mot de passe, nom de la BDD. Sinon l’<code>adpater</code> est le <code>driver</code> à utiliser pour
se connecter (<code>mysql</code>, <code>orable</code>, <code>DB2</code>… ; se référer a la doc) ; <code>date_format</code>
est le format de la date ; et <code>isDefaultTableAdapter</code> est pour savoir si cette
connexion est la principale.</p>

<h2 id="schemas">Schémas de la table</h2>

<p>On va utiliser un exemple pour bien mettre en place ce tuto. On va utiliser une
table d’utilisateur. Voilà le schémas :</p>

<pre><code>CREATE TABLE IF NOT
EXISTS `users` (
  id int(50) NOT NULL auto_increment,
  *name` varchar(50) NOT NULL,
  firstname varchar(50) NOT NULL,
  email varchar(255) NOT NULL,
  *password` varchar(255) NOT NULL,
  phonenumber varchar(20) NOT NULL,
  *enable` int(1) NOT NULL,
  *level` int(1) NOT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY email (email)
) ENGINE=MyISAM DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;
</code></pre>

<p>On a donc :</p>

<ul>
<li>Un id en auto-increment</li>
<li>Un nom</li>
<li>Un prénom</li>
<li>Une adresse email</li>
<li>Un mot de passe</li>
<li>Un numéro de téléphone</li>
<li>Un booléen pour savoir si l’utilisateur est activé</li>
<li>Un entier pour avoir le niveau d’administration</li>
<li>Une clé primaire et un index sur l’id</li>
<li>Une clé unique et un index sur l’email</li>
</ul>

<h2 id="metier">Préparation de la classe métier.</h2>

<p><code>Zend</code> commence à gérer de façon assez <strong>autonome et automatique les BDD</strong>. Il y
a maintenant un gestionnaire <strong>CRUD</strong> (<code>Create</code>, <code>Read</code>, <code>Update</code>, <code>Delete</code>=>
Ajouter, Lire, Mettre a jour, Supprimer des enregistrements). Pour se faire il
faut créer une <code>class</code> php. On est assez libre pour le nom des <code>class</code> et pour
leurs emplacements, mais je vous recommanderai d’être assez <strong>logique et
rigoureux</strong>. En fait il va falloir <strong>faire une **class</strong> par table de
votre base de donnée**. Pour ma part, je mets presque toujours un « s » a la fin
du nom de mes tables, car elles contiennent plusieurs enregistrements. Par
exemple la table <code>users</code> contient plusieurs utilisateurs. Il faut maintenant
créer une class qui représente cette table. On peut organiser ses <code>class</code> comme
on veut, mais en général sur le petits projets je mets toutes mes <code>class</code> dans
le dossier <code>application/models/DbTable/</code>. De plus je nomme toujours ma class
avec le même nom que la table. A quoi doit ressembler la <code>class</code> (<a href="../zend/zend-comment-utiliser-un-model.html" title="Zend : Comment utiliser un model ?">Voir la
convention de nommage des <code>models</code></a>) :</p>

<pre><code>&lt;?php
class Model_DbTable_Users extends Zend_Db_Table {
    protected $_name = 'users';
}
</code></pre>

<p>Pour le nom de la <code>class</code>, il faut se référer au model dans le Zend Framework.
Il faut étendre la <strong>class Zend_Db_Table</strong>. Enfin il faut ajouter l’attribut
<strong>protected $_name</strong> qui a pour valeur le <strong>nom de la table dans la base de
donnée</strong>. Et voilà, le plus dur est fait. On a maintenant une <code>class</code> qui
possède un bon nombre de méthode <code>CRUD</code>.</p>

<h2 id="read">Obtenir et récupérer des enregistrements</h2>

<p><strong>Comment obtenir tous les tuples d’une table ?</strong> Si il n’y a pas de close
particulières, c’est super simple , on exécute le petit bout de code suivant :</p>

<pre><code>private function getUsersAll()
{
    $dbUser = new Model_DbTable_Users();
    return $dbUser-&gt;fetchAll()-&gt;toArray();
}
</code></pre>

<p>Donc on instancie un nouveau <code>Model_DbTable_Users</code>, et on lui demande la
retourner tous les enregistrements
grâce a la méthode <code>fetchAll</code>, et enfin on convertit le résultats en
tableau. Voilà le tours est joué !
<strong>Comment obtenir que certains enregistrements ?</strong></p>

<pre><code>private function getUsersByName($name = '')
{
    $dbUser = new Model_DbTable_Users();
    return $dbUser-&gt;fetchAll()-&gt;toArray(array('name = ?'=&gt;
    $name));
}
</code></pre>

<p>Voilà, la méthode <code>fetchAll</code> possède 4 arguments:
<code>$where</code>, <code>$order</code>,<code>$count</code>,<code>$offset</code> qui représente respectivement la clause
<code>where</code>, le clause <code>order by</code> , et la clause <code>limit</code> (combien d’enregistrement
et à partir de l’enregistrement numéro n ). Pour une utilisation plus poussé, je
vous recommande de lire la doc du Zend Framework.</p>

<h2 id="create">Ajouter un enregistrement</h2>

<p><strong>Comment ajouter un enregistrement dans la base de donnée ?</strong> Comme dans
l’exemple précédant, on va ajouter un nouvel utilisateur.</p>

<pre><code>$users = new
Model_DbTable_Users();
$row = $users-&gt;createRow();
$row-&gt;name = 'Nom';
$row-&gt;firstname = 'Prenom';
$row-&gt;email = 'email';
$row-&gt;password = md5('password');
$row-&gt;phonenumber = '0102030405';
$row-&gt;enable = 1;
$row-&gt;level = 9;
$result = $row-&gt;save();
</code></pre>

<p>On commence par instanciée un nouveau <code>Model_DbTable_Users</code>. Ensuite on crée
une ligne, puis on ajoute a cette ligne les différents attributs, et enfin on
sauvegarde cette ligne en table. On peut aussi faire la même chose en donnant a
la méthode <code>createRow</code> un tableau en argument. :</p>

<pre><code>$users = new Model_DbTable_Users();
$datas = array(
    'name'=&gt;'Nom',
    'firstname'=&gt;'Prenom',
    'email'=&gt;'email2',
    'password'=&gt;md5('password'),
    'phonenumber'=&gt;'0102030405',
    'enable'=&gt;1,
    'level'=&gt;9,
);
$row = $users-&gt;createRow($datas);
$row-&gt;save();
</code></pre>

<p><strong>Enfin on peut faire beaucoup plus simple</strong>. Je ne connais pas bien la
différence entre les deux méthodes (la précédente et la suivante), si quelqu’un
peut m’éclairer, je suis preneur.</p>

<pre><code>$users = new Model_DbTable_Users();
$datas = array(
    'name'=&gt;'Nom',
    'firstname'=&gt;'Prenom',
    'email'=&gt;'email3',
    'password'=&gt;md5('password'),
    'phonenumber'=&gt;'0102030405',
    'enable'=&gt;1,
    'level'=&gt;9,
);
$row = $users-&gt;insert($datas);
</code></pre>

<p>Bon, c’est assez simple d’ajouter un enregistrement en table ? On va un peu plus
loin. Comment <strong>protéger ses enregistrements en table grâce a une
**transaction SQL</strong> :</p>

<pre><code>$users = new Model_DbTable_Users();
$datas = array(
    'name'=&gt;'Nom',
    'firstname'=&gt;'Prenom',
    'email'=&gt;'email3',
    'password'=&gt;md5('password'),
    'phonenumber'=&gt;'0102030405',
    'enable'=&gt;1,
    'level'=&gt;9,
);
$defaultAdaptateur = Zend_Db_Table::getDefaultAdapter();
$defaultAdaptateur-&gt;beginTransaction();
try {
    $defaultAdaptateur-&gt;insert('users', $datas);
    $defaultAdaptateur-&gt;commit();
} catch (Exception $e) {
    $defaultAdaptateur-&gt;rollBack();
    echo $e-&gt;getMessage();
}
</code></pre>

<p>On commence de la même façon que pour la dernière méthode. Ensuite on récupère
l’<code>adaptateur</code> de la base de donnée principale puis on commence une
<code>transaction</code>. Il faut ensuite en-capsuler notre ajout à la base dans un bloque
<code>try-catch</code>. On essaye d’insérer notre enregistrement puis si ça fonctionne on
<code>commit</code>. Si ça ne fonctionne pas on fait un <code>rollback</code>et on affiche les
messages. <strong>Bien sur il est possible de n’utiliser qu’un bloque try-catch</strong>.</p>

<h2 id="update">Mettre a jour un enregistrement</h2>

<p>La méthode ici est très similaire à l’ajout d’un enregistrement. On peut mettre
a jour uniquement qu’une seule ligne ou tout un groupes de ligne. Dans cet
exemple on remplace tous les enregistrements ou l’attribut name est « Nom » par
« Nom2 ».</p>

<pre><code>$users = new Model_DbTable_Users();
$datas = array('name'=&gt;'Nom2');
$users-&gt;update($datas,array('name = ?'=&gt;'Nom'));
$this-&gt;render('index');
</code></pre>

<p>Ici les <code>$datas</code> sont les données qu’on va mettre a jour. La méthode <code>updates</code>va tout faire. Le premier arguments est le <strong>tableau de donnée</strong>, le second
argument correspond aux <strong>conditions de la clause **where</strong>. Dans ce cas la
on explicite que l’attribut name doit correspondre a Nom.</p>

<h2 id="delete">Supprimer un enregistrement</h2>

<p>Cette dernier action est la plus simple, il suffit de <strong>bien formuler la
clause **where</strong>.</p>

<pre><code>$users = new Model_DbTable_Users();
$users-&gt;delete(array('name = ?'=&gt;'Nom2'));
</code></pre>

<p>Ici on supprimer tous les utilisateurs qui ont pour valeur d’attribut name :
Nom2.</p>

<h2 id="extend">Extension de la class métier</h2>

<p>Bien entendu, on peut ajouter des méthodes particulières a notre <code>class</code> métier.
Comme par exemple pour avoir le nombre d’enregistrement :</p>

<pre><code>public function getUserCount()
{
    $sql = 'select count(1) cnt from users';
    $stmt = $this-&gt;_db-&gt;query($sql);
    $results = $stmt-&gt;fetchAll();
    if ((sizeof($results) &gt; 0) &amp;&amp; (isset($results[0]['cnt']))) {
        return $results[0]['cnt'];
    }
    throw new Exception("Erreur : impossible d'obtenir le nombre
    d'utilisateur");
}
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>On peut bien sur en-capsuler un update, une suppression dans un block try-catch
et de plus on est pas obligé d’utiliser les transaction sql qui sont quand même
plus lourde. On verra dans un prochain tuto comme utiliser les clés étrangères.</p>
]]></content>
    </entry>
        <entry>
        <title>Comment mettre en place un systeme de traduction dans Zend Framework</title>
                <id>http://blog.lyrixx.info/zend/mettre-en-place-un-systeme-de-traduction-dans-zend-framework.html</id>
                <updated>2009-10-15T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/mettre-en-place-un-systeme-de-traduction-dans-zend-framework.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Avoir un site, c’est bien, mais c’est encore mieux si on peut le <strong>traduire
facilement dans plusieurs langues</strong>. On va voir ensemble comment mettre en place
un <strong>fichier de traduction **avec **Zend_Translate</strong> dans notre <code>application</code>.
Il y a plusieurs moyens de gérer les <strong>traductions</strong> avec <strong>Zend Framework</strong>.
Chacun a ses avantages et inconvénients. La je vais utiliser un simple fichier
<code>php</code> qui va contenir un <code>tableau (array)</code>avec les traductions. L’avantage du
tableau php : on peut <strong>facilement le mettre a jour</strong>, il est <strong>lisible par un
humain</strong>. Par contre il a un inconvénient : Si l’application est énorme, on
<strong>aura des problème de performance</strong>. A vous de bien choisir la gestion de la
traduction.</p>

<h2>Le fichier de traduction :</h2>

<p>Il faut le placer dans le dossier : <code>application/languages/</code>. Pour le nom on va
être créatif et l’appeler <code>fr.php</code> pour la traduction en français. Il ressemble
a ça :</p>

<pre><code>&lt;?php
return array(
    'key_1'=&gt;'Traduction 1',
    'key_2'=&gt;'Traduction 2',
);
</code></pre>

<p>Donc quand on va utiliser la <code>pseudo-variable</code> <strong>key_1</strong>, l’application
<strong>traduira automatiquement **key_1</strong> en <strong>Traduction 1</strong> (bien sur si on est
en <code>français</code> dans l’application. Sinon j’ai dit <code>pseudo-variable</code> car on
utilise <strong>key_1</strong> d’une façon bien particulières. Tout dépend du contexte. On va
y venir...</p>

<h2>Le bootstrap</h2>

<p>Il faut bien entendu « dire » à notre application qu’il faut qu’elle utilise les
traductions et il faut aussi lui donner une <strong>langue par défaut</strong>. On peut même
faire en sorte que l’application choisisse elle même la langue en fonction de la
position géographique de l’utilisateur final, mais la j’y reviendrais dans un
prochain tuto. Voilà, on ajoute ce code dans notre <code>bootstrap</code> :</p>

<pre><code>/**
* Initialize Translation
*
* @return Zend_Translate
*/
public function _initTranslate()
{
    $translate = new Zend_Translate('array', APPLICATION_PATH . '/languages/fr.php', 'fr');

    return Zend_Registry::set('Zend_Translate', $translate);
}
</code></pre>

<p>voilà on peut maintenant utiliser notre fichier de traduction :</p>

<h2>Dans un model :</h2>

<p>Ici c’est (relativement extrêmement) simple. Par exemple si on veut mettre un
<code>label</code> a un <code>élément</code> d’un <code>formulaire</code><span style="font-style: normal;">
(</span><code>Zend_Element</code>, <code>Zend_Form</code>), et bien sur le traduire il n’y a rien a
faire, il suffit de donner a la méthode <code>setLabel</code> la <code>clé</code> de notre tableau qui
est dans le fichier <code>fr.php</code>. Par exemple pour un champs <code>password</code> :</p>

<pre><code>$password = new Zend_Form_Element_Password(‘password’);
$password-&gt;setLabel(‘form_user_add_password’);
</code></pre>

<p>Et dans notre fichier fr.php :</p>

<pre><code>'form_user_add_password'=&gt;'Mot de passe : ',
</code></pre>

<p>**Petit tips **: Si on a besoin de traduire des messages d'erreurs liés aux
validateurs (<code>Zend_Validate</code>) d'éléments du formulaire il faut ajouter dans le
fichier de traduction, le message original renvoyé par le validateur. On peu
trouvé <a href="http://framework.zend.com/manual/fr/zend.validate.messages.html">les messages originaux ici</a> (merci guiton)</p>

<pre><code>//Pour la validation : valeur requise
'Value is required and can't be empty'=&gt;'la valeur est requise',
//Pour la validation : Le champs values est deja dans la BDD
'A record matching %value% was found'=&gt;'Il y a déja '%value%' dans la BDD',
</code></pre>

<p>Comme on peut le voir sur le deuxième exemple, on peut récupérer le
paramètre %value% directement dans le
message traduit. C'est la valeur qui a été saisi par l'utilisateur.</p>

<h2>Dans une vue (view) :</h2>

<p>Si on a besoin d'une traduction dans une vue, la c'est un tout petit peu
plus compliqué :</p>

<pre><code>&lt;?php echo $this-&gt;translate('view_user_add')?&gt;
</code></pre>

<p>Et dans notre fichier fr.php :</p>

<pre><code>'view_user_add'=&gt;'Ajouter un utilisateur',
</code></pre>

<p>Voilà, c'est assez simple, si on veut la traduction de '<code>key_1</code>' il suffit
de faire</p>

<pre><code>$this-&gt;translate('key_1')
</code></pre>

<p>Bon voilà on a fait le tours ! Enfin il me semble. Il y a des questions ou
des remarques ?</p>
]]></content>
    </entry>
        <entry>
        <title>Comment gérer la navigation de son site avec le Zend Framework</title>
                <id>http://blog.lyrixx.info/zend/gerer-la-navigation-de-son-site-avec-le-zend-framework.html</id>
                <updated>2009-10-08T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/gerer-la-navigation-de-son-site-avec-le-zend-framework.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Dans ce tuto on va voir comment
mettre en place un système automatique de <strong>navigation</strong> dans le <strong>Zend
Framework</strong>. C’est a dire que notre <strong>menu de navigation soit dynamique et
flexible</strong>. On pourra par exemple avoir notre <strong>chemin de navigation ou fil de
navigation</strong>. On va donc utiliser le composant <strong>Zend_Navigation</strong>. On a
plusieurs possibilité pour la gestion et le stockage de l’arbre (ou graphe) de
navigation. Moi j’ai choisit le <code>XML</code> pour le stockage, et la gestion par
<code>module</code>, <code>controller</code> et <code>action</code>. Enfin on utilise aussi la traduction
automatique ;)</p>

<h2 id="sommaire">Sommaire</h2>

<ul>
<li><a href="#sommaire">Sommaire</a></li>
<li><a href="#intro">Introduction</a></li>
<li><a href="#bootstrap">Bootstrap</a></li>
<li><a href="#layout">Layout</a></li>
<li><a href="#hierarchie">Hiérarchie de pages</a></li>
<li><a href="#css">Classe css de la page en cours</a></li>
<li><a href="#fil">Fil de Navigation ou breadcrumbs</a></li>
</ul>

<h2 id="intro">Introduction</h2>

<p>On commence par un aperçu de notre fichier de navigation :</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;configdata&gt;
&lt;nav&gt;
    &lt;home&gt;
        &lt;label&gt;nav_home&lt;/label&gt;
        &lt;controller&gt;index&lt;/controller&gt;
    &lt;/home&gt;
&lt;/nav&gt;
&lt;/configdata&gt;
</code></pre>

<p>Petite explication : la balise <code>configdata</code> ne sert que de nœud racine, la
balise <code>nav</code> sert a repérer notre section de la gestion de la <span style="font-
style: normal;">navigation</span>. Dans mon cas je n’utilise le fichier
<code>navigation.xml</code> que pour gérer la navigation, pour on pourrait envisager de
n’avoir qu’un seul gros fichier xml pour gérer toutes nos données et variables
de l’application. Ensuite on a une balise <code>home</code>, elle représente un lien du
<strong>menu</strong>, on lui donne le nom qu’on veut, elle va représenter dans notre cas la
page <code>d’accueil</code>. Elle a pour classe fille une balise <code>label</code> qui définit le nom
du lien. J’utilise <code>nav_home</code> car dans mon fichier de traduction j’ai une clé
<code>nav_home</code> qui fait référence a <code>home</code>. Enfin il y a une balise <code>controller</code> qui
définit sur quel <code>controller</code> pointe le futur lien. Il est bien sur possible de
sélectionner une <code>action</code> avec la balise <code>action</code> et un <code>module</code> avec la balise
<code>module</code>. C’est bien fait non ? Sinon il est possible aussi d’avoir un liens
direct grâce a la balise <code>uri</code>. Un petit exemple qui regroupe tout les cas :</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;configdata&gt;
    &lt;nav&gt;
        &lt;home&gt;
            &lt;label&gt;nav_home&lt;/label&gt;
            &lt;controller&gt;index&lt;/controller&gt;
        &lt;/home&gt;
        &lt;page2&gt;
            &lt;label&gt;Page 2&lt;/label&gt;
            &lt;module&gt;mon_module&lt;/module&gt;
            &lt;controller&gt;mon_controller&lt;/controller&gt;
            &lt;action&gt;mon_action&lt;/action&gt;
        &lt;/home&gt;
        &lt;home&gt;
            &lt;label&gt;nav_home&lt;/label&gt;
            &lt;uri&gt;/foo/bar/&lt;/uri&gt;
        &lt;/home&gt;
    &lt;/nav&gt;
&lt;/configdata&gt;
</code></pre>

<h2 id="bootstrap">Bootstrap</h2>

<p>Il faut rajouter une méthode a notre <strong>bootstrap</strong> :</p>

<pre><code>/**
 * @return Zend_Navigation
 */
protected function _initNavigation() {
    $view =
    $this-&gt;bootstrap('layout')-&gt;getResource('layout')-&gt;getView();
    $config = new Zend_Config_Xml(APPLICATION_PATH . '/configs/navigation.xml', 'nav');
    $view-&gt;navigation(new Zend_Navigation($config));
}
</code></pre>

<p>La seule chose a retenir ici est le premier argument de la méthode
<strong>Zend_Config_Xml</strong> : c’est le chemin de notre <strong>fichier de navigation</strong> et le
deuxième argument représente la balise mère de notre <code>section de navigation</code>
dans le fichier <code>xml</code>. Voilà, on a notre fonction de navigation disponible dans
notre application. Il suffit maintenant de l’utiliser.</p>

<h2 id="layout">Layout</h2>

<p>Histoire de faire le plus simple possible, on va ajouter notre barre de
navigation directement dans le <code>layout</code>, histoire de le retrouver sur toutes les
pages. Il suffit de rajouter ce bout de code dans le fichier <code>layout.phtml</code> à
l’endroit ou vous voulez que le menu s’affiche :</p>

<pre><code>&lt;?php echo $this-&gt;navigation()-&gt;menu(); ?&gt;
</code></pre>

<h2 id="hierarchie">Hiérarchie de pages</h2>

<p>On va voir maintenant un exemple de fichier xml ou il y a plusieurs pages et
sous pages <img class="alignright size-full wp-image-735" title="navigation-
Menu" src="../wp-content/uploads/2009/10/navigation-Menu.png"
alt="navigation-Menu" width="208" height="156" /></p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;configdata&gt;
&lt;nav&gt;
    &lt;home&gt;
        &lt;label&gt;nav_home&lt;/label&gt;
        &lt;controller&gt;index&lt;/controller&gt;
        &lt;pages&gt;
            &lt;add&gt;
                &lt;label&gt;nav_fact_add&lt;/label&gt;
                &lt;controller&gt;fact&lt;/controller&gt;
                &lt;action&gt;add&lt;/action&gt;
            &lt;/add&gt;
            &lt;list&gt;
                &lt;label&gt;nav_fact_list&lt;/label&gt;
                &lt;controller&gt;fact&lt;/controller&gt;
            &lt;/list&gt;
            &lt;calc&gt;
                &lt;label&gt;nav_calc&lt;/label&gt;
                &lt;controller&gt;calc&lt;/controller&gt;
            &lt;/calc&gt;
            &lt;user&gt;
                &lt;label&gt;nav_user&lt;/label&gt;
                &lt;controller&gt;user&lt;/controller&gt;
            &lt;/user&gt;
            &lt;stats&gt;
                &lt;label&gt;nav_sats&lt;/label&gt;
                &lt;controller&gt;stats&lt;/controller&gt;
            &lt;/stats&gt;
        &lt;/pages&gt;
    &lt;/home&gt;
&lt;/nav&gt;
&lt;/configdata&gt;
</code></pre>

<p>Voilà, **la balise a retenir **est la balise <code>pages</code> qui permet de définir des
sous pages ou sous menu. Et bien sur on peut en imbriquer autant qu’on veut.
Enfin il faut savoir que le code <code>html</code> des liens sur la page suit une
hiérarchie de balise <code>ul/li</code>.</p>

<h2 id="css">Classe css de la page en cours</h2>

<p>Comment ajouter une classe au <code>lien</code> qui pointe vers <strong>la page en cours</strong> ? Et
bien il suffit de rajouter ce bout de code en haut de chaque <code>controller</code> (dans
la méthode <code>init</code>) :</p>

<pre><code>public function init()
{
    /` Initialize action controller here `/
    $activeNav =
    $this-&gt;view-&gt;navigation()-&gt;findByController('index');
    $activeNav-&gt;active = true;
    $activeNav-&gt;setClass("active");
}
</code></pre>

<p>Et voilà maintenant quand on est sur une page du <code>controller</code> <code>index</code> (dans ce
cas la) et bien le lien aura (entre autre) la classe <code>active</code>. Il suffit après
de toucher au <code>css</code> pour ajouter un petit effet ;)</p>

<p>Vous en voulez encore plus ?</p>

<h2 id="fil">Fil de Navigation ou <strong>breadcrumbs</strong></h2>

<p><img class="alignright size-full wp-image-736" title="navigation-fil" src="../wp-content/uploads/2009/10/navigation-fil.png" alt="navigation-
fil" width="296" height="41" /></p>

<p>Et bien avec <code>Zend_Navigation</code>on peut retracer notre <strong>chemin de navigation</strong>,
qui soit dit en passant est très bon en terme d’ergonomie, mais aussi en terme
de référencement. Donc je vous invite vraiment à le mettre en place. Encore une
fois, il suffit de rajouter une ligne de <code>php</code> dans le fichier <code>layout.phtml</code> :</p>

<pre><code>&lt;?php echo $this-&gt;navigation()-&gt;breadcrumbs()-&gt;setMinDepth(0)-&gt;setLinkLast(true)-&gt;setSeparator(" &gt;&gt; "); ?&gt;
</code></pre>

<p>Alors on décortique le bousin :</p>

<ul>
<li><code>$this-&gt;navigation()-&gt;breadcrumbs()</code> va afficher le <strong>fil de navigation</strong>.</li>
<li><code>-&gt;setMinDepth(0)</code> va définir si il faut ou pas afficher ce fil ; il est
en accord direct avec la profondeur du <code>xml</code>.</li>
<li><code>-&gt;setLinkLast(true)</code> définit si il faut ou pas mettre un liens sur le
dernier fils du fil de navigation qui correspond à la page en cours</li>
<li><code>-&gt;setSeparator( » &gt;&gt; « )</code> définit par quelle chaine de caractère
est séparer notre liste de liens.</li>
</ul>

<p>Voilà, comme on a pu voir, le plus dur est de faire le fichier <code>xml</code> ainsi que
le <code>css</code> des menus. Après c’est un jeux d’enfant pour avoir de beau menu ;)</p>
]]></content>
    </entry>
        <entry>
        <title>Télécharger automatiquement des .torrent sur un PC Ubuntu distant</title>
                <id>http://blog.lyrixx.info/ubuntu/telecharger-automatiquement-des-torrent-sur-un-serveur-distant.html</id>
                <updated>2009-09-27T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/ubuntu/telecharger-automatiquement-des-torrent-sur-un-serveur-distant.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Il m’arrive souvent de vouloir télécharger quelque chose alors que je suis en
cours ou au boulot, mais c’est souvent difficile pour diverses raisons. Une
solution est d’utiliser un serveur @home et de le configurer pour qu’il
télécharge automatiquement des fichiers .torrent. Voici une façon de bidouiller
ça ;)</p>

<p>Pour commencez nous allons utiliser le client BitTorrent
<a title="Deluge" href="http://deluge-torrent.org/" target="_blank">Deluge</a>.</p>

<p>Pour l’installer :</p>

<ul>
<li>vistez le <a title="doc ubuntu fr sur deluge" href="http://doc.ubuntu-
fr.org/deluge" target="_blank">site de la doc ubuntu fr</a></li>
<li>ou si vous avez accès au dépot Universe : <a title="Installer Déluge"
href="apt://deluge-torrent" target="_blank">deluge-torrent</a></li>
</ul>

<p>Une fois installé, il faut lancer deluge</p>

<p><strong>Application > Internet > Deluge BitTorrent Client</strong></p>

<p>Aller dans</p>

<p><strong>Editer > Préférences</strong></p>

<p>Puis cocher la checkox correspondant à :</p>

<p><strong>Ajouter automatiquement les .torrent provenant de</strong></p>

<p>Enfin, choisir le dossier dans lequel seront ajoutés les fichiers .torrent que
l’on souhaite  télécharger (par exemple :  <code>/home/user/torrent</code>)</p>

<p>A partir de là il ne reste plus qu’à trouver un moyen d’envoyer  à distance nos
fichiers torrents dans le bon répertoire.  les moyens sont nombreux….On peut par
exemple  :</p>

<p>utilisez un <strong>serveur FTP</strong></p>

<p><strong>Ou</strong> utilisez le script suivant, puis éditer afin de changer la variable
<strong>$destination_folder</strong> en lui donnant le chemin absolu vers le répertoire de
deluge que l’on a choisi précedemment.</p>

<pre><code>&lt;?php
    ini_set('display_errors', 1);
    error_reporting(-1);

    $destination_folder = '/home/arnaud/Torrent'; // A CHANGER

    $destination_folder = trim($destination_folder);
    while (strcasecmp(substr($destination_folder, strlen($destination_folder)-1,1),'/') == 0) {
        $destination_folder = substr($destination_folder,0,strlen($destination_folder)-1);
    }
    $extension = '.torrent';
    $file_tmp_name = 'tmp';

    $url = isset($_GET['url']) ? $_GET['url'] : null;

    $form = &lt;&lt;&lt;EOL
&lt;div id="form"&gt;
    &lt;form action="index.php" method="GET"&gt;
        &lt;label&gt;Entrez une URL : &lt;/label&gt;
        &lt;input type="text" name="url" value="'.$_['url'].'"/&gt;&lt;br/&gt;
        &lt;input type="submit" name ="submit" value="Get it ! "/&gt;
    &lt;/form&gt;
&lt;/div&gt;
EOL;
?&gt;
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
    &lt;html&gt;
        &lt;head&gt;
            &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
            &lt;title&gt;Remote Download Section&lt;/title&gt;
            &lt;style&gt;
                .spacer {width:100%; height:30px;}
                #form {width:600px; border:1px solid black;}
                form {padding-top:10px}
            &lt;/style&gt;
        &lt;/head&gt;
    &lt;body&gt;
        &lt;center&gt;
            &lt;?php if (isset($url)) : ?&gt;
                &lt;?php
                    while (file_exists($destination_folder.'/'.$file_tmp_name.$extension)) {
                        $file_tmp_name .= ''.rand(0,9);
                    }
                    $file_name = $file_tmp_name.$extension;
                    $result = copy($post,$destination_folder.'/'.$file_name);
                    if ($result === true) {
                        echo '&lt;h1&gt;Téléchargement du fichier réussi&lt;/h1&gt;';
                    } else {
                         echo '&lt;h1&gt;Téléchargement du fichier échoué&lt;/h1&gt;&lt;p&gt;L\'url fournie n\'est peut être pas correcte&lt;/p&gt;';
                         &lt;?php echo $form ?&gt;
                         echo '&lt;p&gt;Vous pouvez également utiliser une URL de la forme : http://monserveur/index.php?trt=lien_vers_le_fichier&lt;/p&gt;';
                    }
                ?&gt;
            &lt;?php else: ?&gt;
                &lt;h1&gt;Remote Download Section&lt;/h1&gt;
                    &lt;div class="spacer"&gt;&lt;/div&gt;
                    &lt;?php echo $form ?&gt;
            &lt;?php endif ?&gt;
        &lt;/center&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Il faut que le script est le droit d’écrire dans le répertoire :</p>

<pre><code>chmod a+w mon_repertoire
</code></pre>

<p>Puis copier dans <strong>/var/www/mondossier/</strong>.</p>

<p>Et enfin ce script vous permettra de copier  les .torrent dans le bon répertoire
en tapant l’url dans votre navigateur favori :
<code>http://localhost/index.php?trt=url_du_.torrent</code> et de lancer ainsi le
téléchargement du torrent dans deluge !</p>

<p>La meilleur solution aurait été à mon avis un petit plugin qui permettrai
d’envoyer directement le .torrent depuis son navigateur internet.</p>

<p>Pensez également à  lancer automatiquement Déluge au démarrage du PC. Pour ce
faire allez dans <strong>Système > Préférences > Applications au démarrage</strong> , cliquez
sur ajouter et saisissez <strong>/usr/bin/deluge</strong> dans le champs « Commande » .</p>

<p>Voila, on peut maintenant télécharger son film du soir quand on y pense au
boulot :p</p>
]]></content>
    </entry>
        <entry>
        <title>Zend Framework 1.9 : Comment lier une feuille de style css ou un js au layout</title>
                <id>http://blog.lyrixx.info/zend/zend-framework-1-9-lier-une-feuille-de-style-css-ou-un-js-au-layout.html</id>
                <updated>2009-09-24T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/zend-framework-1-9-lier-une-feuille-de-style-css-ou-un-js-au-layout.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Comment lier un <strong>css</strong> et un <strong>js</strong> dans un projet <strong>zend framework</strong> (a partir
de la 1.9) directement dans le <strong>layout</strong> ?</p>

<p>Et bien a partir de la version 1.9, c’est vraiment très simple dans la mesure ou
l’équipe de ZF a intégré un script de vue (view helper) directement dans la
librairie. Du coup il suffit de rajouter la ligne suivante dans le fichier de
layout (<span style="text-decoration:
underline;">application/layout/scripts/main.phtml</span>), entre les balises
<head> :</p>

<pre><code>&lt;link rel="stylesheet" type="text/css" media="screen,projection" href="&lt;?php echo $this-&gt;baseUrl();?&gt;/styles/design.css"/&gt;
</code></pre>

<p>Dans ce cas, mon fichier css est dans le dossier : <code>public/styles/design.css</code></p>

<p>Voila, maintenant pour un js c’est le même principe ;) :</p>

<pre><code>&lt;script type="text/javascript" src="&lt;?php echo $this-&gt;baseUrl();?&gt;/styles/main.js"&gt;&lt;/script&gt;
</code></pre>
]]></content>
    </entry>
        <entry>
        <title>Comment mettre en place un backup sur son serveur dedié ?</title>
                <id>http://blog.lyrixx.info/ubuntu/comment-mettre-en-place-un-backup-sur-son-serveur-dedie.html</id>
                <updated>2009-07-24T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/ubuntu/comment-mettre-en-place-un-backup-sur-son-serveur-dedie.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Comment mettre en place un <strong>système de backup automatique sur son serveur
dédié</strong> qui tourne sous linux ? Et bien rien de bien compliqué, il suffit de
lire ce qui va suivre pour <strong>s'auvegarder les dossiers que vous voulez</strong> :
<strong>/home</strong>,  les svn, <strong>les bases de données</strong> etc ...</p>

<p>Il y a un petit outils qui va quasiment faire tout le travail pour nous :
backup-manager <a href="http://doc.ubuntu-fr.org/backup-manager"
target="_blank"> Tuto sur le site d'Ubuntu-Fr</a>. Je me suis insipiré de ce
tuto pour ecrire celui que vous etes en train de lire.</p>

<p>Pour utiliser ce logiciel, et facon plus général, il vaut mieux etre en root
pour effectuer toute le prochaine opération. on passe donc en root :</p>

<pre><code>sudo su
</code></pre>

<h2>Comment sauvegarder les répertoires ?</h2>

<p>Alors on commence par installer backup manager :</p>

<pre><code>apt-get install backup-manager
</code></pre>

<p>Ensuite il faut répondre aux différente questions (de tête, je ne m’en souvient
plus) :</p>

<ul>
<li>Emplacement du répertoire de sauvergarde</li>
<li>Emplacement des repertoires a sauvegarder</li>
<li>Utilisateur qui sauvergarde</li>
<li>Droit des fichiers sauvegarder</li>
</ul>

<p>Si vous ne savez pas quoi mettre laissez les options par default. Par contre si
vous voulez modifier ces options, on peut refaire la configuration, de facon
plus complète avec plus d’options :</p>

<pre><code>dpkg-reconfigure backup-manager
</code></pre>

<p>Allez on y va ensemble : donc on saisi :</p>

<ol>
<li>Le chemin du dossier qui recevra les archives</li>
<li>L’utilisateur propriétaire du dossier</li>
<li>Son groupe</li>
<li>Le type de compression</li>
<li>La fréquence des sauvegarde</li>
<li>Si il faut ou pas suivre les liens symbolique. Laisser a non sauf si
vous etes vraiment sur de vous.</li>
<li>Le format de nommage des archives</li>
<li>La durée de vie des archives : la ça sert a rien de garder les archives
pendant plus d’une semaine…</li>
<li>Les répertoires à sauvegarder.</li>
<li>Les répertoires à exclure (oui oui celui ou y’a des vidéos nsfw)</li>
<li>Si il faut ou non chiffre les archives, normalement y’en a pas
besoin. Sauf si la sauvegarde est expédié
sur le serveur d’un copain.</li>
<li>Si il faut envoyer les archives sur un autre serveur (ftp ssh). Je n’ai
pas d’autre serveur, donc non.</li>
<li>Si il faut graver un cd. Je suis sur un dédié qui est 300km de chez moi,
donc non</li>
</ol>

<p>Voila, donc a ce moment la il ne nous sauvegarde que nos repertoire /home et
/etc si vous avez laisser les options par default.</p>

<h2>Comment sauvegarder les bases de données ?</h2>

<p>Mais je veux qu’il me sauvegarde aussi mes bases de donnée : Pour ce faire il
suffit d’éditer un fichier :</p>

<pre><code>nano /etc/backup-manager.conf
</code></pre>

<p>Et de reperer les lignes suivante et les modifier :</p>

<pre><code># If you don't want to use any backup method (you don't want to
# build archives) then choose "none"

# Version de base

#export BM_ARCHIVE_METHOD="tarball mysql"

#Pour la gestion de la base de donnée

export BM_ARCHIVE_METHOD="tarball mysql"

## [...] ## =&gt; la suite est vers la fin du fichier. Il suffit de renseigner les déférents champs.

##############################################################
# Backup method: MYSQl
#############################################################

# This method is dedicated to MySQL databases.
# You should not use the tarball method for backing up database
# directories or you may have corrupted archives.
# Enter here the list of databases to backup.
# Wildcard: __ALL__ (will dump all the databases in one archive)
export BM_MYSQL_DATABASES="__ALL__"

# The best way to produce MySQL dump is done by using the "--opt" switch
# of mysqldump. This make the dump directly usable with mysql (add the drop table
# statements), lock the tables during the dump and other things.
# This is recommended for full-clean-safe backups, but needs a
# privileged user (for the lock permissions).
export BM_MYSQL_SAFEDUMPS="true"

# The user who is allowed to read every databases filled in BM_MYSQL_DATABASES
export BM_MYSQL_ADMINLOGIN="root"

# its password
export BM_MYSQL_ADMINPASS=""

# the host where the database is
export BM_MYSQL_HOST="localhost"

# the port where MySQL listen to on the host
export BM_MYSQL_PORT="3306"

# which compression format to use? (gzip or bzip2)
export BM_MYSQL_FILETYPE="bzip2"
</code></pre>

<p>Et voila, on a maintenant un <strong>backup de notre serveur</strong> dans le dossier
*/var/archives/`. Il faut savoir qu’on peut aussi sauvegarder des svn. et qu’on
peut exporter le tout sur un autre serveur par exemple. Les protocoles supporter
sont :</p>

<ul>
<li>scp</li>
<li>ssh-gpg</li>
<li>ftp</li>
<li>rsync</li>
<li>s3</li>
</ul>

<h2>Comment je recupere toutes les archives ?</h2>

<p>Comme je vous l’ai dit, je n’ai pas d’autre serveur sous la main. Donc je me
suis fait un petit script (.sh) que je peux lancer a la main :</p>

<pre><code>#!/bin/bash
ssh root@SERVEUR "tar -c /var/archives/`" &gt; /CHEMIN/VERS/LE/DOSSIER/DE/RECEPTION/archives-$(date +%d%m%Y).tar
</code></pre>

<p>et voila on a plus qu’a rendre ce script executable et a l’exécuter, et le tour
et jouer :</p>

<pre><code>chmod +x getBackup.sh
./getBackup.sh
</code></pre>

<p>Et voila le tour est jouer. on a notre serveur qui fait des backups tout les
jours, et vous du coté client il n’y a plus qu’a exécuter le script tous les
jours...</p>
]]></content>
    </entry>
        <entry>
        <title>Comment mettre en place un Layout avec le Zend-Framework 1.8</title>
                <id>http://blog.lyrixx.info/zend/comment-mettre-en-place-un-layout-avec-le-zend-framework-1-8.html</id>
                <updated>2009-07-23T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/comment-mettre-en-place-un-layout-avec-le-zend-framework-1-8.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>On va voir ensemble comment utiliser les <strong>Layouts</strong>, <strong>placeholder</strong>,
<strong>helper</strong> dans le** Zend Framework** 1.8 (et supérieur). En effet, depuis la
version 1.8, la gestion n’est plus automatique, mais en 2 temps 3 mouvements
c’est réglé.</p>

<h2>Qu’est ce qu’un Layout ?</h2>

<p>Un <code>layout</code> est un template, ou alors un squelette vide de votre site. Il n’y a
aucun contenu, il n’y a presque que du code HTML. Les layouts sont très
pratique, car ils permettent de ne pas avoir copier / coller tout le code html
identique sur chaque pages. On peut donc faire des <code>templates</code> par defaut pour
un grand nombre de page.</p>

<blockquote>
  <p>Dans tous les cas, un script de <strong>layout</strong> est nécessaire. Les scripts de
  <strong>layout</strong> utilisent simplement Zend_View (ou une implémentation particulière
  personnalisée). Les variables de <strong>layout</strong> sont enregistrées dans le
  <strong>placeholder</strong> <strong>Layout</strong>, et peuvent être accédées via l’aide de vue
  <strong>placeholder</strong> ou directement en tant que propriétés de l’objet <strong>layout</strong>.</p>
</blockquote>

<p style="text-align: right;">
    D’après la
    <a href="http://framework.zend.com/manual/fr/zend.layout.quickstart.html" target="_blank">
        documentation de Zend Framework
    </a>
</p>

<h2 id="sommaire">Sommaire</h2>

<ul>
<li><a href="#sommaire">Sommaire</a></li>
<li><a href="#exemple">Exemple de layout ou template général</a></li>
<li><a href="#layout">Mise en place du Layout</a></li>
<li><a href="#comprendre">Comprendre les placeholders et les helpers</a></li>
<li><a href="#helper">C’est quoi un helpers ou Script de Vue ?</a></li>
<li><a href="#placeholder">C’est quoi un placeholders ?</a></li>
<li><a href="#useplaceholder">Comment Utiliser un placeholders ?</a></li>
<li><a href="#changetitle">Comment faire pour changer le titre de ma page ?</a></li>
<li><a href="#explication">Explication : Implementation d’un placeholders dans un helper</a></li>
</ul>

<h2 id="exemple">Exemple de layout ou template général.</h2>

<p>Voici un exemple de <code>template</code> :</p>

<p><a href="../wp-content/uploads/2009/07/Exemple-de-template.png"
rel="lightbox[562]"><img class="size-medium wp-image-566" title="Exemple de
template" src="../wp-content/uploads/2009/07/Exemple-de-
template-300x178.png" alt="Exemple de template" width="300" height="178" /></a></p>

<p>On voit qu’on a diviser notre gabarit de page en quatre zones (complètement
arbitrairement) :</p>

<ul>
<li>En haut : le Header</li>
<li>En bas : le Footer</li>
<li>A gauche : le menu de navigation</li>
<li>A droite : le contenu</li>
</ul>

<p>Voici ce qu’est un <code>layout</code> : <strong>le layout c’est la partie qui ne change pas :
Header, Footer, Menu.</strong></p>

<h2 id="layout">Mise en place du Layout.</h2>

<p>Il faut commencer par choisir un emplacement pour les fichiers. Moi j’ai choisit
<code>APPLICATION_PATH "/layouts/scripts"</code> (par défaut, cf la doc de Zend). Dans ce
dossier on va créer notre premier <code>layout</code>, qu’on appellera : layouts.phtml.
L’extension <code>.phtml</code> est l’extension standard pour les <code>layouts</code> dans zend.</p>

<p>Une fois ce fichier créé, il faut renseigner à zend qu’on va utiliser un
<code>layout</code>. On va donc ajouter au fichier de configuration <code>application.ini</code> ces
quelques lignes :</p>

<pre><code>LAYOUT
resources.layout.layout = "layout"
resources.layout.layoutPath = APPLICATION_PATH "/layouts/scripts"
</code></pre>

<p>Grâce a ces deux lignes, Zend va automatiquement chercher le script
<code>/layouts/scripts/layout.phtml</code> et l’utiliser. A partir de ce moment, le script
de vues devient plus leger, avec seulement un partie du code html. Donc pour
<strong>résumer</strong> : Dans le <code>layout</code>, il y a beaucoup de HTML (balise html, head,
title, body) et dans les vues un peu plus de php et peu moins de html. OK ? Si
vous avez un doute <a href="../zend/zend-comment-faire-une-vue.html">sur les <code>view</code> (vue) c’est ici</a>, et sur <a href="../zend/zend-quest-ce-quun-controller.html">les
<code>controllers</code> c’est la</a>.</p>

<p>Maintenant on peut encore plus customiser (personnaliser)  notre <code>layout</code>. Comme
lui mettre une titre par défaut, choisir son encodage, choisir son doc type etc…
Tout ce fait dans le bootstrap :</p>

<pre><code>/**
 * Initialize session
 *
 * @return Zend_View
 */
protected function _initView()
{
    // Initialize view
    $view = new Zend_View();
    $view-&gt;doctype('XHTML1_STRICT');
    $view-&gt;headTitle('Ma premiere application avec Zend');
    $view-&gt;headMeta()-&gt;appendHttpEquiv('Content-Type', 'text/html; charset=UTF-8');
    // Add it to the ViewRenderer
    $viewRenderer = Zend_Controller_Action_HelperBroker::getStaticHelper('ViewRenderer');
    $viewRenderer-&gt;setView($view);
    // Return it, so that it can be stored by the bootstrap

    return $view;
}
</code></pre>

<p>Enfin il faut faire le fichier layouts.phtml</p>

<pre><code>&lt;?php echo $this-&gt;doctype() ?&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;?php echo $this-&gt;headTitle() ?&gt;
        &lt;?php echo $this-&gt;headLink() ?&gt;
        &lt;?php echo $this-&gt;headStyle() ?&gt;
        &lt;?php echo $this-&gt;headScript() ?&gt;
        &lt;?php echo $this-&gt;headMeta() ?&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;?php echo $this-&gt;layout()-&gt;content ?&gt;&lt;br /&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Voila on a notre Layout en place. Maintenant, il s’agit de comprendre comment il
fonctionne.</p>

<h2 id="comprendre">Comprendre les placeholders et les helpers.</h2>

<p>Si vous avez bien suivi le Tutos, vous avez vu que dans le bootstrap on a déjà
mis des valeurs par défault. Ces valeurs, normalement c’est la vue (view) qui
les passe aux layouts. Dans notre cas, le <code>bootstrap</code> crée en avance le <code>layout</code>
(je rappel que presque tout est objet). Néanmoins il reste bien évidemment
possible de changer ces valeurs.</p>

<h3 id="helper">C’est quoi un helpers ou Script de Vue ?</h3>

<p>D’après la documentation de Zend :</p>

<blockquote>
  <p>Dans vos scripts de vue, il est souvent nécessaire d’effectuer certaines
  actions complexes encore et encore : par exemple, formater une date, générer des
  éléments de formulaire, afficher des liens d’action. Vous pouvez utiliser des
  classes d’aide pour effectuer ce genre de tâches.</p>
</blockquote>

<p>Petite traduction : un <code>helper</code> va être une classe que l’on va utiliser souvent
dans les vues. Il évite les taches répétitives. Par exemple une zone pour savoir
si l’utilisateur est loggué. Par contre la je vais vous laisser voir les exemple
directement sur la <a href="http://framework.zend.com/manual/fr/zend.view.helpers.html"
target="_self">doc de Zend</a>. D’ailleur on verra prochainement comment faire
un helper pour vérifier si la personne est loggué.</p>

<h3 id="placeholder">C’est quoi un placeholders ?</h3>

<p>D’après la documentation de zend :</p>

<blockquote>
  <p>L’aide de vue <code>Placeholder</code> est utilisé pour faire persister le contenu entre
  les scripts de vues et les instances de vues. Il offre aussi des fonctionnalités
  utiles comme l’agrégation de contenu, la capture de contenu de scripts de vues
  pour une utilisation ultérieure, et l’ajout de texte pré ou post contenu (et la
  personnalisation des séparateurs de contenu).</p>
</blockquote>

<p>Petite traduction. Les <strong>Placeholders</strong> sont des genres de variables. On les
utilises pour faire passer du code HTML mis en forme (la pluspart du temps)
depuis la <code>vue</code> vers le <code>layout</code>. Vu que le <code>layout</code> est générique, il faut
savoir rester général sur les noms des <code>placeholders</code>. Enfin <code>les placeholders</code>
sont persistants : c’est a dire qu’on peut les utilisers dans une première
<code>vue</code>, puis dans une autre <code>vue</code> ou dans un autre script…</p>

<h3 id="useplaceholder">Comment Utiliser un placeholders ?</h3>

<p>Dans le <code>layout</code>, le <code>placeholder</code> s’utilise de cette façon  :</p>

<pre><code>&lt;?php echo $this-&gt;placeholder('PH1');?&gt;&lt;br /&gt;
&lt;?php echo $this-&gt;placeholder('PH2');?&gt;&lt;br /&gt;
&lt;?php echo $this-&gt;placeholder('PH3');?&gt;&lt;br /&gt;
</code></pre>

<p>Pour le layout, il n’y a pas 15 000 facon de les utiliser. Par contre dans une
vue, on peut les utilisers de plusieurs facon :</p>

<ul>
<li><p>Comme une variable :</p>

<pre><code>$this-&gt;placeholder('PH1')-&gt;set("j'utilise mon placeholder PH1");
</code></pre></li>
<li><p>Comme un agrégateur de variables, avec plein d’outils mis a disposition.</p>

<pre><code>$this-&gt;placeholder('PH2')-&gt;exchangeArray(array(1,2,3));
$this-&gt;placeholder('PH2')-&gt;setPrefix("&lt;ul&gt;n &lt;li&gt;")
     -&gt;setSeparator("&lt;/li&gt;&lt;li&gt;n")
     -&gt;setIndent(4)
     -&gt;setPostfix("&lt;/li&gt;&lt;/ul&gt;n");
</code></pre></li>
</ul>

<p>La on decoupe notre tableau gràce a la fonction <code>exchangeArray</code>. Puis on rajoute
des balise html avant et après. Le code parle de lui même.</p>

<ul>
<li><p>Comme un agrégateur de contenu</p>

<pre><code>&lt;?php $this-&gt;placeholder('PH3')-&gt;captureStart(); ?&gt;
    La on utilise notre&lt;br&gt;
    Placeholders PH3&lt;br&gt;
    qui est sur plusieurs lignes &lt;br /&gt;
    Et qui contient des balises html, ca ne dérange pas.
&lt;?php  $this-&gt;placeholder('PH3')-&gt;captureEnd(); ?&gt;
</code></pre></li>
</ul>

<p>La on utilise des méthodes qui vont commencer la capture puis terminer la
capture. Tout ce qui sera entre ces deux méthodes seront contenue par le
<code>placeholder</code>.</p>

<p>Enfin il faut savoir qu’il existe un bon nombre de configurations pour les
<code>placeholders</code>. Je vous conseil de regarder la doc. On peut y apprendre a
identer le code, ajouter des préfix, suffix etc…</p>

<h3 id="changetitle">Comment faire pour changer le titre de ma page ?</h3>

<p>Voila le code, je vous l’explique après :</p>

<pre><code>$this-&gt;headTitle('Mon nouveau titre','SET');
</code></pre>

<h3 id="explication">Explication : Implementation d’un placeholders dans un helper</h3>

<p>Alors la je vous est perdu sur le titre. en fait ce n’est que pour les puristes
et ceux qui veulent tout savoir que je l’ai ecrit comme ca. <strong>Sinon la on met
met juste le titre de notre page en argument</strong> de la méthode <code>headTitle</code>. Mais
d’ou vient ce <code>« SET »</code>‘. Et bien sans SET, par défault les méthodes head&#42;*|
ajoute le code a la fin de ce qu’il y a deja. Ce qui est extremement pratique
pour les CSS et JS (cf la prochaine note). Mais on peut aussi écraser la valeur
du titre, ajouter le nouveau avant ou après etc… Alors pourquoi « Implementation
d’un placeholders dans un helper ». Et bien en fait dans zend il existe déjà
beaucoup de helper (comme vu plus haut), vous les utiliser mais vous ne le savez
peut etre pas. Ensuite, headtitle par exemple est un placeholders, certe
particulier, mais c’en est un. Voila vous savez tout !!</p>

<p><br / ><br / ></p>
]]></content>
    </entry>
        <entry>
        <title>Sortie de la beta 1.9 de Zend Framework</title>
                <id>http://blog.lyrixx.info/zend/sortie-de-la-beta-1-9-de-zend-framework.html</id>
                <updated>2009-07-23T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/sortie-de-la-beta-1-9-de-zend-framework.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p><strong>Zend Framework 1.9.0 vient de sortir en beta</strong>. Youpi. On peut la trouver
la : <a href="http://framework.zend.com/download/latest">http://framework.zend.com/download/latest</a></p>

<p>Bon en gros ils nous disent quoi les gars de chez Zend ? Que c’est uneversion
<strong>non-stable</strong>, et qu’on ne la trouve pas encore sur le site. Sinon ils ont
beaucoup travaillé sur la stabilité, les tests etc... Et tant mieux. Sinon pour
les nouveautés : <strong>support de la version 5.3 de php</strong>.</p>

<p><strong>Les autres nouveautés en pagaille</strong> (on aura l’occasion d’y revenir) :</p>

<ul>
<li><code>Zend_Rest_Route</code>, <code>Zend_Rest_Controller</code>, and
<code>Zend_Controller_Plugin_PutHandler</code>, which aid in providing
RESTful resources via the MVC layer.</li>
<li><code>Zend_Feed_Reader</code>, which provides a common API to RSS and Atom feeds,
as well as extensions to each format,
caching, and a slew of other functionality.</li>
<li><code>Zend_Queue</code> and <code>Zend_Service_Amazon_Sqs</code>, which provide the ability to
use local and remote messaging and
queue services for offloading asynchronous processes.</li>
<li><code>Zend_Db_Table</code> updates to allow using <code>Zend_Db_Table</code> as a concrete class
by passing it one or more table
definitions via the constructor.</li>
<li><code>Zend_Test_PHPUnit_Db</code>, which provides <code>Zend_Db</code> support for PHPUnit’s
DBUnit support, allowing developers to
do functional and integration testing against databases using data fixtures.</li>
<li>Annotation processing support for <code>Zend_Pdf</code>, as well as performance
improvements.</li>
<li><code>Zend_Dojo</code> custom build layer support.</li>
<li>Numerous <code>Zend_Ldap</code> improvements.</li>
<li><code>Zend_Log_Writer_Syslog</code>, a <code>Zend_Log</code> writer for writing to your system log.</li>
<li>Several new view helpers, including <code>Zend_View_Helper_BaseUrl</code>.</li>
</ul>
]]></content>
    </entry>
        <entry>
        <title>Initialisation d&#039;un projet Zend Framework Avec Zend_Tool</title>
                <id>http://blog.lyrixx.info/zend/initialisation-dun-projet-zend.html</id>
                <updated>2009-07-13T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/initialisation-dun-projet-zend.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>On a deja vu pas mal de chose sur le <strong>Zend Framework</strong>, mais depuis la version
1.8.`, il y a quelques petites choses qui ont changées, comme l’architecture, et
l’arrivée de <strong>Zend_Tool</strong>.</p>

<p>C’est quoi <strong>Zend_Tool</strong> ? c’est un script <code>php</code> qui s’exécute en mode console
(<code>CLI</code>) et qui nous <strong>permet de créer une base pour notre application</strong> :</p>

<ul>
<li>L’architecture du projet</li>
<li>Un nouveau controller</li>
<li>Une nouvelle action</li>
<li>Une nouvelle vue</li>
<li>Un nouveau module</li>
<li>etc …</li>
</ul>

<p>On va donc recréer notre application de gestion de budget grâce aux
<strong>Zend_Tools</strong>. Pour faire les choses proprement, on va commencer par
télécharger la <a href="http://framework.zend.com/download"
target="_blank">dernière version de Zend Framework </a>(1.8.4). Vous la dé-
zipper ou vous voulez sur votre disque dur. Dans mon cas, c’est <span style
="text-decoration:
underline;">/home/lyrix/Prog/php/2009/ZendFramework-1.8.4</span>. Maintenant il
va falloir inclure ce path dans notre include path. c’est a dire qu’il nous sera
possible d’appeler zf.sh (ou zf.bat pour les windowsiens) depuis n’importe quels
répertoires depuis notre console favorites. <strong>Sinon sous Linux on peut faire
plus simple</strong>, on va tout simplement faire un alias :</p>

<pre><code>alias zf.sh=/home/lyrix/Prog/php/2009/ZendFramework-1.8.4/bin/zf.sh
</code></pre>

<p>Note : Si vous faites ce code directement depuis la console, l’alias sera
temporaire (juste pour cette console), si vous le faite dans le fichier
~/.bashrc, l’alias sera permanent.</p>

<p>Voila maintenant il nous faut créer ce projet dans le dossier qui va bien. Moi
je veux le mettre la : /home/lyrix/Prog/php/2009/Budget/ donc je me place dans
ma console dans le dossier /home/lyrix/Prog/php/2009/ puis je crée mon projet :</p>

<pre><code>cd /home/lyrix/Prog/php/2009/ zf.sh create project Budget
</code></pre>

<p>Voila notre projet est crée. On peut aussi faire des modules, pour ce faire il
faut aller se placer dans le projet en question, et créer un module :</p>

<pre><code>cd /home/lyrix/Prog/php/2009/Budget zf.sh create module Frontend
</code></pre>

<p>Voila, notre structure du projet est crée. Il faut maintenant coller la
librairie librairie dans /home/lyrix/Prog/php/2009/Budget/library. (On doit
copier tout le dossier Zend). Sous linux on peut aussi faire un lien symbolique
directement vers un autre dossier de son disque dur. :</p>

<pre><code>cd /home/lyrix/Prog/php/2009/Budget/library
ln -s /home/lyrix/Prog/php/2009/ZendFramework-1.8.4/library/Zend/ Zend
</code></pre>

<p>Voila notre projet fonctionne, on peut se rendre a la page suivante pour voir le
résultat :</p>

<pre><code>http://127.0.0.1/monwww/2009/Budget/public/
</code></pre>

<p><a href="../wp-content/uploads/2009/07/Installation-de-Zend-Framework-1.8-finit.png" rel="lightbox[449]"><img class="size-medium wp-image-455" title="Installation de Zend Framework 1.8 - finit" src="../wp-content/uploads/2009/07/Installation-de-Zend-Framework-1.8-finit-300x187.png" alt="Installation de Zend Framework 1.8 - finit" width="300" height="187" /></a></p>

<p>Enfin, je rappel qu’il est quand meme possible de creer l’architecture d’un
projet directement dans Zend Studio. Il suffit de faire un nouveau projet et se
laisser guider.</p>

<p>On peut passer a <a href="../zend/architecture-du-zend-framework-1-10.html" title="Architecture du Zend Framework 1.10 en MVC">l’architecture de Zend Framework</a></p>
]]></content>
    </entry>
        <entry>
        <title>Architecture de Zend Framework 1.8 en MVC</title>
                <id>http://blog.lyrixx.info/zend/architecture-de-zend-framework-1-8-en-mvc.html</id>
                <updated>2009-07-13T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/architecture-de-zend-framework-1-8-en-mvc.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Voila, on vient de voir comment <a href="../zend/initialisation-dun-projet-zend.html">faire un nouveau projet avec le
<strong>Zend_Tool</strong></a>. Comme j’expliquai dans le précédant article, l’architecture
de <strong>Zend Framework</strong> a un petit changé. <strong>Voila la nouvelle Architecture</strong> :</p>

<p><a href="../wp-content/uploads/2009/07/zend-framework-Structure-.png">
  <img class="size-full wp-image-460" title="zend framework : Structure" src="../wp-content/uploads/2009/07/zend-framework-Structure-.png" alt="zend framework : Structure" width="236" height="497" />
</a></p>

<ul>
<li>ZfProject

<ul>
<li>Application : contient toute l’application, en générale ce dossier
ce situe a un endroit de votre serveur
qui n’est pas accessible depuis l’extérieur (comme dans les CGI-BIN)

<ul>
<li>config : Contient tous les fichiers de configuration de
l’application

<ul>
<li>application.ini : on retrouve tous les configuration de votre
application (BDD, php.ini etc)</li>
</ul></li>
<li>controllers : ce sont les controlleurs (le C de MVC). ce sont eux
qui vont creer des models pour excecuter
des actions, des taches ou des opérations, ils founissent ensuite
le ou les résultats à la vue.</li>
<li>models : ce sont les models de votre application. Ce sont des
class php qui vont faire le « gros »
du travail</li>
<li>view : ce sont le vues de votre applications. On y retrouve :

<ul>
<li>helpers : des bouts de code commun que l’on peu aussi utiliser
dans les layouts</li>
<li>scripts : les vrais vues. Ici il faut respecter une structure
precise, en accord avec les controllers,
mais on y reviendra</li>
</ul></li>
<li>bootstrap.php est le fichier de chargement de
l’application. c’est dans le bootstrap qu’on fait
les connections a la base de donnée par exemple.</li>
</ul></li>
<li>library : ici on a toutes les class dont zend a besoin pour fonctionner,
et on a aussi toutes les autres
class disponible (voir la doc …)</li>
<li>public : c’est le dossier public qui est accessible depuis
l’extérieur : on y retrouve toutes les
feuilles de style, les fichiers javascripts, les images …</li>
<li>test : ce dossier contient toutes les class qui servent a faire des
tests unitaire.</li>
</ul></li>
</ul>

<p>Ici on est dans une architecture ou l’on utilise pas de modules, avec des
modules, la structure est un tout petit peux différente. Je pense que l’image
parle d’elle même… Sinon je n’ai développer que le dossier modules, le reste
restant identique.</p>

<p><a href="../wp-content/uploads/2009/07/zend-framework-Structure-Modules.png" rel="lightbox[448]">
    <img class="size-full wp-image-473" title="zend framework : Structure Modules" src="../wp-content/uploads/2009/07/zend-framework-Structure-Modules.png" alt="zend framework : Structure Modules" width="227" height="417" />
</a></p>

<p>On peut passer au <a href="../zend/zend-framework-1-8-et-son-bootstrap.html">bootstrap de Zend Framework 1.8</a></p>
]]></content>
    </entry>
        <entry>
        <title>Introduction a Zend Framework 1.8 en MVC</title>
                <id>http://blog.lyrixx.info/zend/introduction-a-zend-framework-1-8-en-mvc.html</id>
                <updated>2009-07-13T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/introduction-a-zend-framework-1-8-en-mvc.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>On va voir comment transformer un script php qui n’utilise pas Zend en une
application utilisant le <strong>Framework Zend</strong>. Pour se faire on va utiliser la
version 1.8 (ou supérieur) de <strong>Zend Framework</strong>, et on va l’utiliser en mode
<strong>MVC (Model View Controller</strong>).</p>

<p>Il va d’abord falloir faire les bases : <a href="../zend/initialisation-dun-projet-zend.html">création de project</a>,
<a href="../zend/architecture-de-zend-framework-1-8-en-mvc.html">structure</a>, <a href="../zend/zend-framework-1-8-et-son-bootstrap.html">bootstrap</a>.</p>

<p>Voila une fois que le début de l’application est préparer on part sur une base
solide. On va donc voir comment marche les <a href="../zend/zend-quest-ce-quun-controller.html">Controleurs</a>, les <a href="../zend/zend-comment-faire-une-vue.html">Vues</a>, et
les <a href="../zend/zend-comment-utiliser-un-model.html">Models</a>, on pourra aussi voir comment se servir<a href="../zend/css-javascript-et-zend-framework.html" title="Tuto avec Zend Framework 1.7"> des css et du
javascript avec zend</a> (pour Zend Framework 1.7).</p>

<p>On va donc partir des sources de l’application que j’ai deja faite pour la
gestion du budget commun dans une colocation, et on va essayé de l’adapté à
Zend.</p>
]]></content>
    </entry>
        <entry>
        <title>Tuto : Zend Framework 1.8 et son bootstrap</title>
                <id>http://blog.lyrixx.info/zend/zend-framework-1-8-et-son-bootstrap.html</id>
                <updated>2009-07-13T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/zend-framework-1-8-et-son-bootstrap.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Voila, on va voir comment fonctionne le <code>Boostrap</code> de la version 1.8 de <strong>Zend
Framework</strong>. Par default le fichier <code>Bootsrap.php</code> est presque vide. Il ne
contient que ces quelques lignes :</p>

<pre><code>class Bootstrap extends Zend_Application_Bootstrap_Bootstrap
{

}
</code></pre>

<p>Mais on va voir ensemble <strong>comment construire notre bootstrap</strong></p>

<h2 id="sommaire">Sommaire</h2>

<ul>
<li><a href="#sommaire">Sommaire</a></li>
<li><a href="#fonctionne">Comment fonctionne le bootstrap</a></li>
<li><a href="#configuration">Mise en place du fichier de configuration</a></li>
<li><a href="#bdd">Connexion a la base de données</a></li>
<li><a href="#session">Mise en place des sessions</a></li>
<li><a href="#module">Mise en place de modules</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="fonctionne">Comment fonctionne le bootstrap ?</h2>

<p>**Mais a quoi sert le <code>bootstrap** ? Le</code>bootstrap`, c’est le fichier qui va
être lancé au début de l’application et qui va s’occuper d’exécuter toutes les
petites routines, de faire les connections aux bases de données, d’instancier
toutes les constantes, les sessions, les modules, les layouts etc …</p>

<p>Par défaut le <code>bootstrap</code> fonctionne même si il est vide, mais on peut faire en
sorte de le customiser un peu. Comment faire ? Déjà le fichier index.php qui est
le premier a être exécuter (dans le dossier public) va lancer la méthode <code>run</code>
du <code>bootstrap</code>. On peut alors créer cette méthode. Ensuite  il faut savoir que
le <code>bootstrap</code> hérite de <code>Zend_Application_Bootstrap_Bootstrap</code> qui lui est
magique (On va y revenir). Donc si on redéfinit la méthode <code>run</code>, il ne faut pas
oublier d’appeler la methode <code>run</code> de la class :
<code>Zend_Application_Bootstrap_Bootstrap</code>.</p>

<pre><code>public function run()
{
    parent::run();
}
</code></pre>

<p>On peut ensuite créer plusieurs méthodes pour par exemple faire les connections
aux bases de données, initialiser les sessions etc. Et c’est la que le
<code>bootstrap</code> est magique : il suffit de déclarer les méthodes en <code>protected</code> et
de mettre un underscrore (_) devant le nom de la méthode, et celle-ci sera
directement exécuter.</p>

<p>Si on regarde le code de la méthode <code>run</code> de la class
<code>Zend_Application_Bootstrap_Bootstrap</code>, on voit que par défaut on n’utilise
pas de module. Il est possible d’utiliser les modules, mais on verra ça plus
tard. Donc par défaut il faut respecter l’architecture « normale ».</p>

<h2 id="configuration">Mise en place du fichier de configuration.</h2>

<p>Comme on a vu dans l’architecture du zend framework, il y a deja un fichier de
configuration, mais par défaut il n’est pas vraiment utilisable. Je m’explique :
quand on démarre l’application, celle ci utilise bien le fichier de
configuration. Mais si a un moment ou a un autre on a besoin de ce fichier, il
sera compliqué d’utiliser les constantes définit. Par défaut le fichier de
config ressemble a celui la :</p>

<pre><code>[production]
phpSettings.display_startup_errors = 0
phpSettings.display_errors = 0
includePaths.library = APPLICATION_PATH "/../library"
bootstrap.path = APPLICATION_PATH "/Bootstrap.php"
bootstrap.class = "Bootstrap"
resources.frontController.controllerDirectory = APPLICATION_PATH "/controllers"

[staging : production]

[testing : production]
phpSettings.display_startup_errors = 1
phpSettings.display_errors = 1

[development : production]
phpSettings.display_startup_errors = 1
phpSettings.display_errors = 1
</code></pre>

<p>Celui ci est basé sur un model orienté objet. Je vous conseil de lire le manuel
de Zend si vous êtes un peu perdu : <a href="http://zendframework.com/manual/fr/zend.config.adapters.ini.html"
target=" _blank">http://zendframework.com/manual/fr/zend.config.adapters.ini.html</a>.</p>

<p>On va donc faire en sorte de pouvoir utiliser ce fichier depuis n’importe ou
depuis l’application. On va utiliser la <code>Zend_Registry</code>. C’est quoi
<code>Zend_Registry</code> ? C’est un registre (un zone mémoire sur le serveur) ou l’on va
pouvoir stocker toutes sorte de choses : constante, pointeurs vers des bases de
données etc… On ajoute donc notre fichier de config (qui sont en faites les
options (parametres) du bootstrap) à un registre config :</p>

<pre><code>public function run()
{
    // Cela permet d'avoir le fichier de configuration disponible depuis
    n'importe ou dans l'application.
    Zend_Registry::set('config', new Zend_Config($this-&gt;getOptions()));
    parent::run();
}
</code></pre>

<h2 id="bdd">Connexion a la base de données</h2>

<p>Pour se faire on va utiliser les données du fichier de configuration :
<code>application.ini</code>. On va le convertir en vrai fichier de configuration grâce a
<code>Zend_Config</code>, puis on va le donnée a <code>Zend_Db</code> qui va nous faire une factory de
notre base de donnée. C’est grâce a cette factory qu’on pourra excécuter des
requetes directement sur la base de donnée.</p>

<pre><code>resources.db.adapter ="MYSQLI"
resources.db.params.host = "localhost"
resources.db.params.username = "budget2"
resources.db.params.password = "budget2"
resources.db.params.dbname = "budget2"
resources.db.params.date_format = "YYYY-MM-ddTHH:mm:ss"
resources.db.isDefaultTableAdapter = true
</code></pre>

<p>Pour les variables du fichier de configuration, vous pouvez vous référer au
manuel de Zend Framework.</p>

<pre><code>/**
* Initialize data bases
*
* @return Zend_Db::factory
*/
protected function _initDb()
{
    //on charge notre fichier de configuration
    $config = new Zend_Config($this-&gt;getOptions());
    //On essaye de faire une connection a la base de donnee.
    try{
         $db = Zend_Db::factory($config-&gt;resources-&gt;db);
         //on test si la connection se fait
         $db-&gt;getConnection();
     }catch ( Exception $e ) {
         exit( $e -&gt; getMessage() );
     }
     // on stock notre dbAdapter dans le registre
     Zend_Registry::set( 'dba', $db );

     return $db;
}
</code></pre>

<p>Enfin on met cette factory dans un registre de manière a pouvoir l’utiliser
depuis n’importe ou dans l’application.</p>

<p><span style="text-decoration: underline;"><strong>Note</strong></span> : On
créer ici une connection a la base de donnée qui pourra etre utilisé depuis
n’importe quelle partie de l’application. Cependant on verra qu’en regle
général, on ne fait pas directement de requete sur la base de donnée, <a href="../zend/comment-gerer-une-base-de-donnee-avec-le-zend-framework.html" title="Voir le tuto sur la gestion des bases de données">on
utilise des models pour se faire </a>…</p>

<h2 id="session">Initialisation des sessions :</h2>

<p>On va mettre en place les sessions tout de suite : c’est assez simple. Je pense
que le code parle de lui meme.</p>

<pre><code>/**
 * Initialize session
 *
 * @return Zend_Session_Namespace
 */
protected function _initSession()
{
    // On initialise la session
    return new Zend_Session_Namespace('budget', true);
}
</code></pre>

<h2 id="module">Mise en place de modules :</h2>

<p>Une bonne partie de la déclaration d’un module par défault va se faire
directement dans le fichier de configuration :</p>

<pre><code>#initialize front
controller resource
resources.frontController.moduleDirectory = APPLICATION_PATH "/modules"
resources.frontController.defaultControllerName = "index"
resources.frontController.defaultAction = "index"
resources.frontController.defaultModule = "Frontend"
</code></pre>

<p>Et une autre partie dans le bootstrap :</p>

<pre><code>/**
* Initialize Module
*
* @return Zend_Application_Module_Autoloader
*/
protected function _initAutoload()
{
    $loader = new Zend_Application_Module_Autoloader(array(
        'namespace' =&gt; '',
        'basePath'  =&gt; APPLICATION_PATH,
    ));

    return $loader;
}
</code></pre>

<p><strong><span style="text-decoration: underline;">Note :</span></strong> Cependant, si
quelqu’un connait bien ZF, j’aimerais avoir une renseignement, car il me semble
que le code du bootsrap soit facultatif …</p>

<h2 id="conclusion">Conclusion :</h2>

<p>Voila, on commence a avoir un bon bootstrap qui tient la route, mais on verra
par la suite qu’on peut rajouter beaucoup de chose dans ce bootstrap, comme par
exemple l’utilisation des layouts …</p>

<p>N’hesitez par a aller faire une tours sur le site de
<a href="http://framework.zend.com/manual/fr/zend.application.html"
target="_blank">ZF – page application</a></p>

<p>On retrouve les deux fichiers :</p>

<pre><code>class Bootstrap extends Zend_Application_Bootstrap_Bootstrap
{
    public function run()
    {
        // Cela permet d'avoir le fichier de configuration disponible depuis n'importe ou dans l'application.
        Zend_Registry::set('config', new Zend_Config($this-&gt;getOptions()));

        parent::run();
    }

    /**
    * Initialize Module
    *
    * @return Zend_Application_Module_Autoloader
    */
    protected function _initAutoload()
    {
        $loader = new Zend_Application_Module_Autoloader(array(
            'namespace' =&gt; '',
            'basePath' =&gt; APPLICATION_PATH
        ));

        return $loader;
    }

    /**
    * Initialize data bases
    *
    * @return Zend_Db::factory
    */
    protected function _initDb()
    {
        //on charge notre fichier de configuration
        $config = new Zend_Config($this-&gt;getOptions());

        //On essaye de faire une connection a la base de donnee.
        try{
             $db = Zend_Db::factory($config-&gt;resources-&gt;db);
             //on test si la connection se fait
             $db-&gt;getConnection();
        }catch ( Exception $e ) {
            exit( $e -&gt; getMessage() );
        }

        // on stock notre dbAdapter dans le registre
        Zend_Registry::set( 'dba', $db );

        return $db;
    }

    /**
     * Initialize session
     *
     * @return Zend_Session_Namespace
     */
    protected function _initSession()
    {
        // On initialise la session
        $session = new Zend_Session_Namespace('budget', true);

        return $session;
    }
}
</code></pre>

<p>Et:</p>

<pre><code>[production]
phpSettings.display_startup_errors = 0
phpSettings.display_errors = 0
includePaths.library = APPLICATION_PATH "/../library"
bootstrap.path = APPLICATION_PATH "/Bootstrap.php"
bootstrap.class = "Bootstrap"
resources.frontController.controllerDirectory = APPLICATION_PATH "/controllers"

#initialize front controller resource
resources.frontController.moduleDirectory = APPLICATION_PATH "/modules"
resources.frontController.defaultControllerName = "index"
resources.frontController.defaultAction = "index"
resources.frontController.defaultModule = "Frontend"

[staging : production]

[testing : production]
phpSettings.display_startup_errors = 1
phpSettings.display_errors = 1

[development : production]
phpSettings.display_startup_errors = 1
phpSettings.display_errors = 1

#DATABASE
resources.db.adapter = "pdo_mysql"
resources.db.params.host = "localhost"
resources.db.params.username = "budget2"
resources.db.params.password = "budget2"
resources.db.params.dbname = "budget2"
resources.db.params.date_format = "YYYY-MM-ddTHH:mm:ss"
resources.db.isDefaultTableAdapter = true
</code></pre>
]]></content>
    </entry>
        <entry>
        <title>Zend framework : Initializer et boot strap</title>
                <id>http://blog.lyrixx.info/zend/zend-framework-initializer-et-boot-strap.html</id>
                <updated>2009-06-30T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/zend-framework-initializer-et-boot-strap.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2 style="text-align: center;">
    <span style="text-decoration: underline;color:#ff0000;">
        <strong>
            UPDATE du 22/07/2009 :
        </strong>
    </span>
</h2>

<p style="text-align: center;">
    <span style="text-decoration: underline;color:#ff0000;">
        <strong>
            <a href="../zend/zend-framework-1-8-et-son-bootstrap.html">
                Il y a une mise a jour de ce tuto ici.
            </a>
        </strong>
    </span>
</p>

<p>Avant d’aller plus loin dans notre série de tutos, il faut d’abord qu’on règles
les fichier <code>boostrap</code>, et l’<code>initializer</code>. Ce sont deux fichiers qui s’occupe
de démarrer notre application. C’est dans ces fichiers qu’on va définir toutes
nos constantes de l’application, comme les paramètres pas défaut de
l’application, les sessions, et surtout la connexion à la base de données.</p>

<p>Petite précision : l’<code>initializer</code> et le <code>bootstrat</code> ne sont plus d’actualité
dans la version 1.8. Cependant cette méthode fonctionne toujours. On va donc
voir la méthode de Zend Framework 1.7. Ca ne pose pas de problème, les deux
méthodes sont très similaire. Dans Zend 1.8, l’<code>initializer</code> et le <code>bootstrap</code>
ont été réuni. J’essayerais de faire un update de ce tutos des que possible. De
plus l’architecture de la 1.8 a aussi un peu changé. J’essayerais aussi de
mettre a jour ce tutos.</p>

<h2>Bootstrap</h2>

<p>De base notre <code>bootstrat</code> ressemble a ça :</p>

<pre><code>/**
 * My new Zend Framework project
 *
 * @author
 * @version
 */
set_include_path('.' . PATH_SEPARATOR . '../library' . PATH_SEPARATOR . '../application/default/models/' . PATH_SEPARATOR . get_include_path());

require_once 'Initializer.php';
require_once "Zend/Loader.php";

// Set up autoload.
Zend_Loader::registerAutoload();

// Prepare the front controller.
$frontController = Zend_Controller_Front::getInstance();

// Change to 'production' parameter under production environemtn
$frontController-&gt;registerPlugin(new Initializer('development'));

// Dispatch the request using the front controller.
$frontController-&gt;dispatch();
</code></pre>

<p>La seule chose importante ici est la ligne :</p>

<pre><code>$frontController-&gt;registerPlugin(new Initializer('development'));
</code></pre>

<p>Ici on crée un nouvel <code>Initializer</code> avec comme paramètre, le nom de
l’environnement (par exemple development, production, test etc…)</p>

<h2>Initializer</h2>

<p>On peut donc passer a l’<code>initializer</code> (c’est la version final):</p>

<pre><code>/**
 * My new Zend Framework project
 *
 * @author
 * @version
 */

require_once 'Zend/Controller/Plugin/Abstract.php';
require_once 'Zend/Controller/Front.php';
require_once 'Zend/Controller/Request/Abstract.php';
require_once 'Zend/Controller/Action/HelperBroker.php';

/**
 *
 * Initializes configuration depndeing on the type of environment
 * (test, development, production, etc.)
 *
 * This can be used to configure environment variables, databases,
 * layouts, routers, helpers and more
 *
 */
class Initializer extends Zend_Controller_Plugin_Abstract
{
    /**
     * @var Zend_Config
     */
    protected static $_config;

    /**
     * @var string Current environment
     */
    protected $_env;

    /**
     * @var Zend_Controller_Front
     */
    protected $_front;

    /**
     * @var string Path to application root
     */
    protected $_root;

    /**
     * Constructor
     *
     * Initialize environment, root path, and configuration.
     *
     * @param string $env
     * @param string|null $root
     * @return void
     */
    public function __construct($env, $root = null)
    {
        $this-&gt;_setEnv($env);
        if (null === $root) {
            $root = realpath(dirname(__FILE__) . '/../');
        }
        $this-&gt;_root = $root;

        $this-&gt;initPhpConfig();

        $this-&gt;_front = Zend_Controller_Front::getInstance();

        // set the test environment parameters
        if ($env == 'test') {
                // Enable all errors so we'll know when something goes wrong.
                error_reporting(E_ALL | E_STRICT);
                ini_set('display_startup_errors', 1);
                ini_set('display_errors', 1);
                $this-&gt;_front-&gt;throwExceptions(true);
        }
    }

    /**
     * Initialize environment
     *
     * @param string $env
     * @return void
     */
    protected function _setEnv($env)
    {
        $this-&gt;_env = $env;
    }

    /**
     * Initialize Data bases
     *
     * @return void
     */
    public function initPhpConfig()
    {

    }

    /**
     * Route startup
     *
     * @return void
     */
    public function routeStartup(Zend_Controller_Request_Abstract $request)
    {
        $this-&gt;initConfig();
        $this-&gt;initDb();
        $this-&gt;initHelpers();
        $this-&gt;initView();
        $this-&gt;initPlugins();
        $this-&gt;initRoutes();
        $this-&gt;initControllers();
    }

    public function initConfig(){
        // On charge Les configs global de l'application et on les met dans un registre
        $config = new Zend_Config_Ini($this-&gt;_root . '/application/default/config/config.ini');
        // On met notre fichier de config dans un registre.
        Zend_Registry::set('config', $config);
    }

    /**
     * Initialize data bases
     *
     * @return void
     */
    public function initDb()
    {
        //on charge notre fichier de config
        $config = Zend_Registry::get('config');
        try{
            $db = Zend_Db::factory($config-&gt;database);
            //on test si la connection se fait
            $db-&gt;getConnection();
        }catch ( Exception $e ) {
            exit( $e -&gt; getMessage() );
        }
        // on stock notre dbAdapter dans le registre
        Zend_Registry::set( 'dba', $db );
    }

    /**
     * Initialize action helpers
     *
     * @return void
     */
    public function initHelpers()
    {
        // register the default action helpers
        Zend_Controller_Action_HelperBroker::addPath('../application/default/helpers', 'Zend_Controller_Action_Helper');
    }

    /**
     * Initialize view
     *
     * @return void
     */
    public function initView()
    {
        // Bootstrap layouts
        Zend_Layout::startMvc(array(
            'layoutPath' =&gt; $this-&gt;_root .'/application/default/layouts',
            'layout' =&gt; 'main'
        ));

    }

    /**
     * Initialize plugins
     *
     * @return void
     */
    public function initPlugins()
    {

    }

    /**
     * Initialize routes
     *
     * @return void
     */
    public function initRoutes()
    {

    }

    /**
     * Initialize Controller paths
     *
     * @return void
     */
    public function initControllers()
    {
        $this-&gt;_front-&gt;addControllerDirectory($this-&gt;_root . '/application/default/controllers', 'default');
    }
}
</code></pre>

<p>On a plusieurs variables qui représente des objets important pour zend :
l’environnement, la configuration, le front controller etc. On peux en ajouter a
la main, comme un gestionnaire de session par exemple. On voit que dans
l’<code>initalizer</code> on peut appeler la méthode <code>initPhpConfig</code> qui nous permet de
changer au démarrage de l’application les variables ini de php
(ini_set(‘display_startup_errors’, 1);) par exemple. Ensuite on la méthode
<code>routeStartup</code> qui s’exécute. Qui elle même se charche d’exécuter toutes les
routines de démarrage de l’application. Celle qui nous intéresse en premier va
etre <code>initDb</code>, mais avant il va falloir qu’on gère un fichier de configuration
(de la BDD entre autre). Cela va se faire grâce a <code>Zend_Config</code> et grace a
<code>Zend_Registry</code>.</p>

<h2>Fichier de configuration, et stockage de celui ci (Zend_Config, Zend Registry)</h2>

<p>Tout d’abord on crée notre fichier de config dans : <code>Budget/application/default/config</code>.</p>

<pre><code>[database]
adapter = "pdo_mysql"
params.host = "localhost"
params.username = "budget2"
params.password = "budget2"
params.dbname = "budget2"
</code></pre>

<p>Dans ce fichier on y met les information concernant l’accès a la base de donnée.
Dans mon cas, j’ai <code>budget2se connec</code>localhostu<code>budget2mot</code>budget2our
l’adaptateur, si vous êtes sur <code>mysql</code>, laissez <code>pdo_mysql</code>, sinon referez vous
a la doc.</p>

<p>Maintenant il va falloir faire récupérer les informations du fichier de config
et le mettre dans un registre. Un registre est une zone ou l’on peut stocker des
variables de façon persistante, c’est a dire d’une page a l’autre. Attention,
c’est n’est pas une session, il ne faut utiliser les registres que pour les
données de l’application et non les données des utilisateurs.</p>

<p>On ajoute donc dans la méthode <code>routeStartup</code> de l’<code>initializer</code>, en première
ligne, un appel la méthode <code>initConfig</code> : <code>$this-&gt;initConfig();</code> Et bien sur on
crée cette méthode :</p>

<pre><code>public function initConfig(){
    // On charge Les configs global de l'application et on les met dans un registre
    $config = new Zend_Config_Ini($this-&gt;_root . '/application/default/config/config.ini');
    // On met notre fichier de config dans un registre.
    Zend_Registry::set('config', $config);
}
</code></pre>

<p>On peut maintenant coder notre méthode : <code>initDb</code>.</p>

<h2>Configuration de la base de données</h2>

<p>La on récupère notre fichier de config, et on crée une nouvelle <code>db_factory</code>. On
teste au passage si la connexion est bien valide. Puis on ajoute ce connecteur a
la base de donné dans un registre qu’on nomera <span style="text-decoration:
underline;">dba</span>, comme Data Base Adaptater.</p>

<pre><code>public function initDb()
{
    //on charge notre fichier de config
    $config = Zend_Registry::get('config');
    try{
         $db = Zend_Db::factory($config-&gt;database);
         //on test si la connection se fait
         $db-&gt;getConnection();
     }catch ( Exception $e ) {
         exit( $e -&gt; getMessage() );
     }
     // on stock notre dbAdapter dans le registre
     Zend_Registry::set( 'dba', $db );
}
</code></pre>

<p>Voila on a notre connexion a la base de donnée, que l’on pourra appeler depuis
n’importe quelle fonction.</p>

<p>Il est possible de configurer plein d’options dans l’initializer, je ne vais pas
m’attardé dessus, il y a la doc pour ca. Par contre dans la mise a jour de cet
article, j’essayerai d’aller plus loin.</p>
]]></content>
    </entry>
        <entry>
        <title>Zend : Comment utiliser un model ?</title>
                <id>http://blog.lyrixx.info/zend/zend-comment-utiliser-un-model.html</id>
                <updated>2009-06-27T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/zend-comment-utiliser-un-model.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>On va voir comment se servir d’un <code>model</code> dans <strong>Zend framework</strong>. Un <code>model</code>
est en fait un objet que vous allez pouvoir utiliser. Il est bien sur possible
d’en utiliser plusieurs, et d’appeler un <code>model</code> depuis un autre <code>model</code>. Il est
possible d’utiliser dans les <code>models</code> des <code>models</code> du framework zend comme
<code>Zend_Registry</code>, <code>Zend_ProgressBar</code>, les <code>Zend_Service_</code> etc. Il est aussi
possible d’étendre une <code>class</code> du framework, comme la class <code>Zend_DB</code>. On peut
se reférer a la <a href="http://framework.zend.com/manual/fr/index.html"
target="_blank">documentation de Zend</a>.</p>

<p>Cependant, les <code>models</code> doivent respecter une certaine syntaxe pour le nom du
fichier, et aussi pour le nom de la <code>class</code>. Si un <code>model</code> est directement dans
la dossier <code>models</code>, le nom de fichier devra etre :<span style="text-decoration:
underline;"> Nom.php</span> et le nom de <code>class</code> devra etre <span style="text-
decoration: underline;">Nom</span>. En gros il faut que le nom de <code>class</code> et le
nom de fichier soient les memes. Par contre, si la <code>class</code> est dans un sous
dossier du dossier <code>model</code>, la il faudra que le nom du fichier soit <span style
="text-decoration: underline;">NomDeFichier.php </span>et que le nom de la
<code>class</code> soit <span style="text-decoration:
underline;">NomDeDossier_NomDeFichier</span>. En gros, il faut mettre devant le
nom de la <code>class</code> toute l’arborescense du fichier jusqu’au dossier <code>models</code>.
Enfin il y a une convention qui veut qu’on commence tous les nom de class par
des majuscules, ce n’est pas obligatoire, mais en général cela permet de s’y
retrouver plus facilement.</p>

<p>Un petit exemple pour comprendre comment instanciser un nouvel objet, et
l’utiliser :</p>

<p>Fichier directement dans le dossier models:</p>

<pre><code>class Test1 {

    private $nom;

    public function __construct($nom){
        $this-&gt;setNom($nom);
    }

    /**
     * @param $nom the $nom to set
     */
    public function setNom($nom) {
        $this-&gt;nom = $nom;
    }

    /**
     * @return the $nom
     */
    public function getNom() {
        return $this-&gt;nom;
    }
}
</code></pre>

<p>Fichier dans le dossier "dossier1" qui est fans le dossier models:</p>

<pre><code>class dossier1_Test2 {

    private $nom;

    public function __construct($nom){
        $this-&gt;setNom($nom);
    }

    /**
     * @param $nom the $nom to set
     */
    public function setNom($nom) {
        $this-&gt;nom = $nom;
    }

    /**
     * @return the $nom
     */
    public function getNom() {
        return $this-&gt;nom;
    }
}
</code></pre>

<p>FactureController</p>

<pre><code>/**
 * FactureController
 *
 * @author
 * @version
 */

require_once 'Zend/Controller/Action.php';

class FactureController extends Zend_Controller_Action {
    /**
     * The default action - show the home page
     */
    public function indexAction() {
        // TODO Auto-generated FactureController::indexAction()
        default action
    }

    public function ajouterAction(){
        $obj1 = new Test1('http://blog.lyrixx.info');
        $this-&gt;view-&gt;obj1 = $obj1;
        $obj2 = new dossier1_Test2('http://www.lyrixx.info');
        $this-&gt;view-&gt;obj2 = $obj2-&gt;getNom();
    }

    public function editerAction(){

    }

    public function supprimerAction(){

    }
}
</code></pre>

<p>vue:</p>

<pre><code>/**
 * Default home page view
 *
 * @author
 * @version
 */

$this-&gt;headTitle('Ajouter une facure');
$this-&gt;placeholder('title')-&gt;set('Ajouter une facture');

echo $this-&gt;obj1-&gt;getNom();
echo '&lt;br /&gt;';
echo $this-&gt;obj2;
</code></pre>

<p>On voit bien qu’on peut passer a la vue toute sorte d’objet : un objet, ou le
résultat d’une de ses méthodes.</p>

<p>La suite : on avance dans le projet <a href="../zend/zend-framework-1-8-et-son-bootstrap.html" title="Tuto : Zend Framework 1.8 et son bootstrap">le bootstrap, la connection a la base de
donnée</a>.</p>
]]></content>
    </entry>
        <entry>
        <title>Zend : Comment faire une vue ?</title>
                <id>http://blog.lyrixx.info/zend/zend-comment-faire-une-vue.html</id>
                <updated>2009-06-26T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/zend-comment-faire-une-vue.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Et bien on continue sur notre lancé avec les <code>vues</code> ou <code>View</code> dans le <strong>Zend
Framework</strong>. Après les <a href="../zend/zend-quest-ce-quun-controller.html"><code>controller</code></a>, maintenant les <code>vues</code>. <strong>La vue c’est
la partie qui va s’occuper d’afficher vos résultats, vos variables, votre code
html</strong>. Donc pour re-résumer les design pattern <code>MVC</code> :</p>

<ol>
<li>Le <code>controller</code> est appelé et exécuté</li>
<li>Le <code>controller</code> crée et exécute des <code>models</code> (des objets)</li>
<li>le <code>controller</code> passe à la <code>vue</code> les variables dont la vue a besoin</li>
<li>la <code>vue</code> met en page ces variables et les donne au <code>layout</code></li>
</ol>

<p>Il faut savoir que par défaut il faut respecter une certaine syntaxe pour les
nom de <code>controller</code> et de <code>vue</code>. Si notre <code>controller</code> s’appelle <span style
="text-decoration: underline;">facture</span>, il faudra que dans le dossier
<code>script</code>, il y est un dossier <span style="text-decoration:
underline;">facture</span>. Puis si notre action s’appelle <span style="text-
decoration: underline;">ajouter</span>, il faudra que dans le dossier
<code>script</code>/<span style="text-decoration: underline;">facture</span>, il y est un
fichier <span style="text-decoration: underline;">ajouter.phtml</span>. Dans ce
cas la, l’application exécutera la <code>vues</code> <span style="text-decoration:
underline;">ajouter.phtml</span> dans le dossier <span style="text-decoration:
underline;">facture</span> quand l’action <span style="text-decoration:
underline;">ajouter</span> du controller <span style="text-decoration:
underline;">facture</span> s’exécutera.</p>

<p>Tips : Comment faire une vues avec Zend Studio 7:</p>

<p><a href="../wp-content/uploads/2009/06/Zend-New-View.png"
rel="lightbox[375]"><img class="size-medium wp-image-404" title="Zend-New View"
src="../wp-content/uploads/2009/06/Zend-New-View-300x273.png"
alt="Comment faire une vue avec Zend Studio" width="300" height="273" /></a></p>

<p><a href="../wp-content/uploads/2009/06/Capture-New-Zend-
View2.png" rel="lightbox[375]"><img class="size-medium wp-image-405" title="New
Zend View (2)" src="../wp-content/uploads/2009/06/Capture-New-
Zend-View2-300x241.png" alt="Comment faire une vue avec Zend Studio" width="300"
height="241" /></a></p>

<p>Enfin dans la <code>vue</code>, on aura pas besoin de mettre tout le code html de la page.
Le <a href="../zend/zend-comment-utiliser-un-layout.html"><code>layout</code></a> le fait deja. Donc on a juste besoin de mettre le code html
spécifique a cet <code>action</code> (l’<code>action</code> de ce <code>controller</code>).</p>

<h2>Comment on fait pour récupérer nos variable du controller dans la vue?</h2>

<p>et bien c’est vraiment pas compliqué : dans le <code>controller</code> il suffit de
faire :</p>

<pre><code>/**
 * FactureController
 *
 * @author
 * @version
 */

class FactureController extends Zend_Controller_Action {
    /**
     * The default action - show the home page
     */
    public function indexAction() {
        // TODO Auto-generated FactureController::indexAction()
        default action
    }

    public function ajouterAction(){
        $this-&gt;view-&gt;VariableString = "une varible";
        $this-&gt;view-&gt;VariableInt = 10;
        $this-&gt;view-&gt;VariableArray =
        array("n1"=&gt;"a","n2"=&gt;"b");
    }

    public function editerAction(){

    }

    public function supprimerAction(){

    }
}
</code></pre>

<p>Donc on passe une variable du <code>controller</code> a la <code>vue</code> grâce a la syntaxe
suivante :</p>

<pre><code>$this-&gt;view-&gt;Un_Nom_De_Varible
</code></pre>

<p>Ensuite on récupère les variables dans la vue grave à la syntaxe suivante :</p>

<pre><code>$this-&gt;Un_Nom_De_Varible
</code></pre>

<p>Ex:</p>

<pre><code>/**
 * Default home page view
 *
 * @author
 * @version
 */

$this-&gt;headTitle('Ajouter une facure');
$this-&gt;placeholder('title')-&gt;set('Ajouter une facture');

echo $this-&gt;VariableString;
echo '&lt;br /&gt;';
echo $this-&gt;VariableInt;
echo '&lt;br /&gt;';
echo print_r($this-&gt;VariableArray,true);
</code></pre>

<p>Voila. Il faut aussi savoir que les vues et les <code>layouts</code> sont étroitements
liés. Qu’on peut faire passer des variables et toutes sortes de choses entre la
<code>vue</code> et le <code>layout</code>.C’est le cas des <code>placeholders</code> que l’on peut voir au début
du fichier <code>ajouter.phtml</code></p>

<p>Et il faut aussi savoir qu’on peut changer dans le <code>controller</code> la <code>vue</code> qu’on
veut appelé. C’est très pratique lorsqu’on a plein d’actions, mais qu’on a pas
besoin de <code>vues</code> différentes a chaque <code>action</code>.</p>

<p><a href="../wp-content/uploads/2009/06/Zend-vues.png"
rel="lightbox[375]"><img class="size-medium wp-image-406" title="Zend : vues"
src="../wp-content/uploads/2009/06/Zend-vues-300x187.png"
alt="Zend : vues" width="300" height="187" /></a></p>

<p>La suite : <a href="../zend/zend-comment-utiliser-un-model.html">Comment utiliser un model avec Zend framework</a></p>
]]></content>
    </entry>
        <entry>
        <title>Zend : Qu&#039;est ce qu&#039;un controller ?</title>
                <id>http://blog.lyrixx.info/zend/zend-quest-ce-quun-controller.html</id>
                <updated>2009-06-19T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/zend-quest-ce-quun-controller.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h2>Comment utiliser les controllers dans Zend ?</h2>

<p>En fait, le <strong>controller</strong> du <strong>Zend Framework</strong> c’est l’outil qui va
complètement contrôler l’application, c’est a dire que c’est lui qui va
<strong>s’occuper de lancer les calculs de récupérer les résultats et de les envoyer à
la vue</strong>.</p>

<p>Donc par exemple si mon application est a l’adresse suivante :
<code>http://www.lyrixx.info/</code> et que je vais à l’adresse suivante :
<code>http://www.lyrixx.info/controller/action/</code> j’exécuterais le code du controller
« <code>controller</code> » et plus précissement la méthode (on dit Action) « <code>action</code>« .
Par défaut si on ne précisse pas de controller, ni d’action c’est le controller
<code>index</code> et l’action <code>index</code> qui sera appelé. Donc l’adresse
<code>http://www.lyrixx.info/</code> est équivalente a <code>http://www.lyrixx.info/index/</code> et
est aussi équivalente à <code>http://www.lyrixx.info/index/index/</code>. Par exemple le
controller par default ressemble a ca :</p>

<pre><code>&lt;?php

/**
 * IndexController - The default controller class
 *
 * @author
 * @version
 */

class IndexController extends Zend_Controller_Action
{
    /**
     * The default action - show the home page
     */
    public function indexAction()
    {
    // TODO Auto-generated IndexController::indexAction() action
    }
}
</code></pre>

<p>De plus les controllers doivent respecter une certaines terminologies :</p>

<ul>
<li>Ils commencent par une majuscule</li>
<li>Finissent par « <code>Controller.php</code>« </li>
</ul>

<p>De même pour les actions :</p>

<ul>
<li>Elles commencent par une minuscules</li>
<li>Finissent par « <code>Action</code>« </li>
</ul>

<p>Donc maintenant il va falloir définir les controllers. La c’est un peu une
question de gout. C’est a travers les controllers qu’on va definir les urls de
notre application (bien qu’il soit quand meme possible de les changer). Il faut
qu’il y ai un bon equilibre entre le nombre de controller et le nombre d’action
dans chaque controller.</p>

<p>Donc notre cas on a environ 5 types pages :</p>

<ul>
<li>Ajouter / Editer / Supprimer une facture</li>
<li>Ajouter / Editer / Supprimer un utilisateur</li>
<li>Voir la liste des Facture</li>
<li>Calculer les sommes dues</li>
<li>Voir les statistiques</li>
</ul>

<p>On va donc faire 5 controllers :</p>

<ul>
<li><code>Facture</code> pour Ajouter / Editer / Supprimer une facture</li>
<li><code>User</code> pour Ajouter / Editer / Supprimer un utilisateur</li>
<li><code>Factures</code> pour Voir la liste des Facture</li>
<li><code>Calcul</code> pour Calculer les sommes dues</li>
<li><code>Stats</code> pour Voir les statistiques</li>
</ul>

<p>Et dans chaque controller on aura différente action. Par exemple pour le
controller facture on aura comme action :</p>

<ul>
<li>ajouter</li>
<li>editer</li>
<li>supprimer</li>
</ul>

<p>** Truc et Astuces**</p>

<p>on peut ajouter facilement un controller dans zend studio (que je vous
recommende fortement). Il suffit de faire CTRL+N puis de choisir Zend Controller
:</p>

<p><a href="../wp-content/uploads/2009/06/New_Controller.png">
  <img title="New_Controller" src="../wp-content/uploads/2009/06/New_Controller-274x300.png"
  alt="Zend :Ajouter un nouveau controller" width="274" height="300" />
</a></p>

<p>Voila a quoi ressemble notre controller <code>facture</code></p>

<p>Biensur, pour l’instant les actions sont vides. Il va falloir les « remplir » de
code, mais on verra ca par la suite ! Maintenant que notre premier controller
est fait, on peut essayé d’aller dessus. Mais il y a une exception qui est
lancé. C’est normale, c’est qu’il n’y a pas encore de vue associé a ce
controller. Il faut pour ça créer une vue.</p>

<p><a href="../wp-content/uploads/2009/06/Zend-pas-de-view.png" rel="lightbox[340]">
  <img class="size-medium wp-image-373" title="Zend pas de view" src="../wp-content/uploads/2009/06/Zend-pas-de-view-300x175.png" alt="Zend : Erruer : pas de vue" width="300" height="175" />
</a></p>

<p>On peut noter l’url pour acceder a cette action : <code>…/facture/ajouter/</code></p>

<p>Voila maintenant on a plus qu’a <a href="../zend/zend-comment-faire-une-vue.html" title="Zend : Comment faire une vue">faire une vue pour ce controller</a>.</p>
]]></content>
    </entry>
        <entry>
        <title>Zend : Comment utiliser un layout ?</title>
                <id>http://blog.lyrixx.info/zend/zend-comment-utiliser-un-layout.html</id>
                <updated>2009-06-19T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/zend-comment-utiliser-un-layout.html"/>
        <content type="html" xml:lang="en"><![CDATA[<h3>Comment utiliser un seul layout dans le Zend Framework ?</h3>

<p>On va continuer d’utiliser la base qu’on avait sur la gestion de compte en
collocation. On va donc reprendre le code de ce script et l’adapté a Zend. Dans
le script de base, on avait deux fichiers : un header (header.php) et un footer
(footer.php). On va donc pouvoir coller le code ou il faut dans le fichier
main.phtml.</p>

<p>De base ce fichier ressemble a ca :</p>

<pre><code>&lt;?php

/**
 * Default Layout
 *
 * @author
 * @version
 */

echo '&lt;?xml version="1.0" encoding="UTF-8" ?&gt;';
echo $this-&gt;doctype()
?&gt;

&lt;html&gt;

    &lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="text/html;
        charset=UTF-8" /&gt;
        &lt;link rel="stylesheet" type="text/css" href="&lt;?php echo
        $this-&gt;baseUrl();?&gt;/styles/design.css" /&gt;
        &lt;?php
        echo $this-&gt;headTitle();
        echo $this-&gt;headScript();
        echo $this-&gt;headStyle();
        ?&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;h1&gt;&lt;?php echo $this-&gt;placeholder('title')
        ?&gt;&lt;/h1&gt;
        &lt;?php echo $this-&gt;layout()-&gt;content ?&gt;

        &lt;br /&gt;
        &lt;br /&gt;
    &lt;/body&gt;

&lt;/html&gt;
</code></pre>

<p>On va donc rajouter le header entre la balise body et la balise h1 et le footer
juste avant la fin de body, en prenant soin d’enlever les balises en double.
Cependant, on ne prend que le code de la partie après la balise body, zend
s’occupant du reste. De plus on voit qu’il y a du code php dans le header, on
n’en a pas encore besoin, on ne le copie pas encore. on obtient alors ce fichier
:</p>

<pre><code>&lt;?php

/**
 * Default Layout
 *
 * @author
 * @version
 */

$temps_debut = microtime(true);
echo '&lt;?xml version="1.0" encoding="UTF-8" ?&gt;';
echo $this-&gt;doctype()
?&gt;

&lt;html&gt;

    &lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="text/html;
        charset=UTF-8" /&gt;
        &lt;link rel="stylesheet" type="text/css" href="&lt;?php echo
        $this-&gt;baseUrl();?&gt;/styles/design.css" /&gt;
        &lt;?php
        echo $this-&gt;headTitle();
        echo $this-&gt;headScript();
        echo $this-&gt;headStyle();
        ?&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;div id="header"&gt;
            &lt;h1&gt;&lt;a href="#"&gt;Gestion de
            compte&lt;/a&gt;&lt;/h1&gt;
            &lt;ul id="nav"&gt;
                &lt;li&gt;&lt;a href="index.php"&gt;Accueil&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="add_facture.php"&gt;Ajouter une facture&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="list_facture.php"&gt;Listes des factures&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="calcul.php"&gt;Calculer&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="user.php"&gt;Utilisateurs&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="stats.php"&gt;Stats&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/div&gt;

        &lt;div id="container"&gt;
            &lt;div id="content"&gt;
            &lt;h1&gt;&lt;?php echo $this-&gt;placeholder('title')
            ?&gt;&lt;/h1&gt;
            &lt;?php echo $this-&gt;layout()-&gt;content ?&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div id="footer"&gt;
            &lt;p class="validate"&gt;&lt;a href="http://validator.w3.org/check?uri=referer"&gt;XHTML&lt;/a&gt;
            |
            &lt;a href="http://jigsaw.w3.org/css-validator/"&gt;CSS&lt;/a&gt;
            | &lt;a href="#content"&gt;Top&lt;/a&gt;&lt;/p&gt;
            &lt;p&gt;&lt;a href="www.lyrixx.info"&gt;© Pineau Gr&amp;eacute;goire&lt;/a&gt;&lt;/p&gt;
            &lt;p&gt;Temps de chargement : &lt;?php $temps_fin = microtime(true); echo round($temps_fin - $temps_debut, 3);?&gt; secondes | Nombre de requ&amp;egrave;tes sql : &lt;?php echo $nb_req?&gt;
            &lt;/p&gt;
        &lt;/div&gt;

        &lt;br /&gt;
        &lt;br /&gt;
    &lt;/body&gt;

&lt;/html&gt;
</code></pre>

<p>Voila on a notre layout tout prêt. Cependant les liens ne fonctionnent pas
encore. C’est normale, il n’y a pas encore de <a href="../zend/zend-quest-ce-quun-controller.html" title="Zend : Qu’est ce qu’un controller ?">controller</a> qui va s’occuper
de gerer tout ca.</p>
]]></content>
    </entry>
        <entry>
        <title>Architecture de Zend Framework en MCV</title>
                <id>http://blog.lyrixx.info/zend/architecture-de-zend-framework-en-mcv.html</id>
                <updated>2009-06-17T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/architecture-de-zend-framework-en-mcv.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Vous êtes nouveaux sur le Zend Framework, et vous êtes un peu perdu avec
l’architecture MCV de ce framework. Pas de panique, je vous explique tout !
Deja, c’est quoi le MVC :</p>

<blockquote>
  <p>Le Modèle-Vue-Contrôleur (en abrégé MVC, de l’anglais Model-View-Controller)
  est une architecture et une méthode de conception qui organise l’interface
  homme-machine (IHM) d’une application logicielle. Ce paradigme divise l’IHM en
  un modèle (modèle de données), une vue (présentation, interface utilisateur) et
  un contrôleur (logique de contrôle, gestion des événements, synchronisation),
  chacun ayant un rôle précis dans l’interface.</p>
</blockquote>

<p>D’après <a
href="http://fr.wikipedia.org/wiki/Mod%C3%A8le-Vue-Contr%C3%B4leur"
target="_blank">Wikipedia</a></p>

<p><a href="../wp-content/uploads/2009/06/Zend-Architecture.png"
rel="lightbox[310]"><img class="size-full wp-image-312" title="Zend -
Architecture" src="../wp-content/uploads/2009/06/Zend-Architecture.png" alt="Zend -
Architecture" width="328" height="580" /></a></p>

<h2>Zend - Architecture</h2>

<p>Voila, l’architecture typique d’une application Zend. Donc on retrouve tout en
haut de l’achitecture, le dossier du projet : <code>Budget</code>.</p>

<ul>
<li>Budget

<ul>
<li>Application : contient toute l’application, en générale ce dossier
ce situe a un endroit de votre serveur
qui n’est pas accessible depuis l’extérieur (comme dans les CGI-BIN)

<ul>
<li>default : c’est le nom d’une application, en général on
n’en a qu’une, mais sur de grosse
architecture, on peut en avoir plusieurs.

<ul>
<li>controllers : ce sont les controlleurs (le C de MVC). ce sont
eux qui vont creer des models pour
excecuter des actions, des taches ou des opérations, ils
founissent ensuite le ou les résultats à
la vue.</li>
<li>helpers : ce sont des bouts de code utilisable dans tous
les controllers</li>
<li>layouts : c’est le template de votre site</li>
<li>models : ce sont les models de votre application. Ce sont des
class php qui vont faire le « gros »
du travail</li>
<li>view : ce sont le vues de votre applications. On y retrouve :

<ul>
<li>filters : des filtres</li>
<li>helpers : des bouts de code commun que l’on peu aussi
utiliser dans les layouts</li>
<li>scripts : les vrais vues. Ici il faut respecter une
structure precise, en accord avec les
controllers, mais on y reviendra</li>
</ul></li>
</ul></li>
<li>bootstrap.php et initializer.php sont les fichiers de chargement
de l’application. c’est dans
l’initializer qu’on fait les connections a la base de donnée
par exemple.</li>
</ul></li>
<li>library : ici on a toutes les class dont zend a besoin pour fonctionner,
et on a aussi toutes les autres
class disponible (voir la doc …)</li>
<li>public : c’est le dossier public qui est accessible depuis
l’extérieur : on y retrouve toutes les
feuilles de style, les fichiers javascripts, les images …</li>
<li>test : ce dossier contient toutes les class qui servent a faire des
tests unitaire.</li>
</ul></li>
</ul>

<p>On passe a la suite : <a href="../zend/css-javascript-et-zend-framework.html">Comment ajouter une feuille de style CSS et un fichier Javascript avec Zend Framework</a></p>
]]></content>
    </entry>
        <entry>
        <title>Css, JavaScript et Zend Framework</title>
                <id>http://blog.lyrixx.info/zend/css-javascript-et-zend-framework.html</id>
                <updated>2009-06-17T00:00:00+02:00</updated>
        <author>
            <name>Grégoire Pineau</name>
            <email>lyrixx@lyrixx.info</email>
        </author>
        <link rel="alternate" type="text/html" href="http://blog.lyrixx.info/zend/css-javascript-et-zend-framework.html"/>
        <content type="html" xml:lang="en"><![CDATA[<p>Comment lier une feuille  de style CSS ou un fichier javascript proprement dans
une application utilisant le Framework Zend ?</p>

<p>Etant donnée qu’on est dans un contexte model vue controller, et que le dossier
public (qui contient les fichier css et js) est à un endroit totalement inconnu
du reste de l’application (en MVC) on va devoir utiliser des helper. Ce sont des
scripts php qui peuvent être utilisé a plusieurs endroit. Dans notre cas, on
utilisera le helper dans le layout, qui definit notre page principale. C’est un
peu le template du site.</p>

<p>On va creer un <code>View Helper</code> dans le dossier <code>application/default/views/helpers</code>
:</p>

<pre><code>class Zend_View_Helper_BaseUrl
{
    function baseUrl()
    {
        $fc = Zend_Controller_Front::getInstance();

        return $fc-&gt;getBaseUrl();
    }
}
</code></pre>

<p>Grâce a ce <code>Helper</code>, on pourra avoir la base de l’url de notre application. Donc
maintenant il ne reste plus qu’a s’en servir dans le layout principale. On va
donc copier notre fichier css dans le répertoire  <code>./public/styles/</code>:</p>

<pre><code>*{outline:none;margin:0;padding:0;}
html{border:15px solid #f6f6f6;border-left:30px solid #f6f6f6;border-right:30px  solid #f6f6f6;}
body{background:#fff;font:16px/1.95em "Lucida Grande","Lucida Unicode",geneva,verdana,sans-serif;color:#666;padding-top:20px;border:3px solid #eee;margin:0;}
#header{width:100%;margin:0 auto;padding:20px 0;}
#header .right{float:right;}
#header h1{font:290% Times New Roman;letter-spacing:-2px;margin-bottom:5px;margin-left:35px;}
#header h1 a{color:#000;text-decoration:none;}
#header h1 a span{color:#ccc;}
#header h1 a:hover span{color:#A3E800;}
#header h3{font:80% Verdana;color:#999;display:inline;margin-left:35px;}
ul#nav{background:#8EDF53;font-size:80%;border-top:3px solid #6CCC26;border-bottom:3px solid #6CCC26;font-weight:700;margin:45px 0 0;padding:10px;}
ul#nav li{display:inline;list-style:none;margin-right:10px;}
ul#nav li a{color:#fff;text-decoration:none;padding:10px 14px;}
ul#nav li a:hover{background:#7EDB39;color:#fff;}
ul#nav li a.active{background:#fff;color:#333;border-right:2px solid #6CCC26;border-bottom:2px solid #6CCC26;}
#footer{margin-top:50px;clear:both;border-top:2px solid #eee;font:80% Verdana;line-height:25px;padding:20px 50px;}
#footer a{color:#999;}
#footer .validate{float:right;}
#container{width:95%;margin:0 auto;}
#content{width:100%;margin-bottom:50px;}
#content ul{margin:15px 0 15px 25px;}
#content ul li{border-bottom:1px solid #eee;color:#444;padding:10px;}
#content img{background:#fff;padding:1px;border:0px;}
#content h3{margin:20px 0;}
#content p{line-height:30px;word-spacing:2px;margin:20px 0;}
#content p a{color:#222;text-decoration:none;border-bottom:1px solid #ccc;}
#content p a:hover{border-bottom:1px solid #aaa;}
#content h2{font:190% Times;margin-top:45px;}
#content h2 a{color:#333;text-decoration:none;}
blockquote{background:#f6f6f6;border:1px solid #eee;font:100% Georgia;padding:0 10px;}
table{width:100%;border:1px solid #eee;padding:10px;}
th{color:#6CCC26;border-bottom:1px solid #eee;padding:5px;}
td{text-align:center;background:#fafafa;padding:5px;}
.formulaire{width:500px;margin-left:auto;margin-right:auto;border:solid 1px
#c8c8c8;background-color:#fafafa;padding:10px 10px 0;}
.formulaire fieldset{border:solid 1px #dcdcdc;margin:0 0 20px;padding:20px 0 0 !important;}
.formulaire fieldset legend{color:#505050;font-weight:700;font-size:130%;margin:0 0 0 5px !important;padding:0 2px;}
.formulaire label.left{float:left;width:200px;font-size:110%;margin:0 0 0 10px;padding:2px;}
.formulaire select.combo{width:175px;border:solid 1px #c8c8c8;font-family:verdana,arial,sans-serif;font-size:110%;padding:2px;}
.formulaire input.field{width:275px;border:solid 1px #c8c8c8;font-family:verdana,arial,sans-serif;font-size:110%;padding:2px;}
.formulaire textarea{width:275px;height:250px;border:solid 1px #c8c8c8;font-family:verdana,arial,sans-serif;font-size:110%;padding:2px;}
.formulaire input.button{float:right;width:9em;margin-right:20px;background:#e6e6e6;border:solid 1px #969696;text-align:center;font-family:verdana,arial,sans-serif;color:#969696;font-size:110%;padding:1px !important;}
.formulaire input.button:hover{cursor:pointer;border:solid 1px #505050;background:#dcdcdc;color:#505050;}
.info_msg_class{border:1px solid #000;background:#fafafa;text-align:center;padding:10px;}
.button1 a{margin:0 3px;padding:2px 5px;text-decoration:none;background:#eee;border:solid 1px #aaa;color:#aaa;text-align:center;}
.button1 a:hover{cursor:pointer;border:solid 1px #555;background:#dcdcdc;color:#555;}
input.calendar {width:150px;border:solid 1px #c8c8c8;font-family:verdana,arial,sans-serif;font-size:110%;padding:2px; float: left;}
button.calendar {float: left;width: 24px;height: 24px;border: 0;margin-left: 10px;cursor: pointer;background: url('../img/calendar.png');}
button.calendar:hover , button.calendar.active {background-position: left bottom;}
div.calendar{background:#eee;}
.fact_option{width:60px;}
.user_option{width:40px;}
.nowrap{white-space:nowrap}
.barrer &gt; td{text-decoration:line-through;}
.change_payed {border-bottom:2px dotted #6CCC26}
.change_payed2 {white-space:nowrap;}
.calcul{margin:1px 5px;padding:2px 5px;background:#e6e6e6;border:outset 1px #969696;color:#969696;}
.calcul:hover{cursor:pointer;border:inset 1px #505050;background:#dcdcdc;color:#505050;}
</code></pre>

<p>Puis maintenant il faut editer le fichier
<code>application/default/layouts/main.phtml</code> qui est le <strong>template</strong> par default et
on ajoute la notre** feuille de style** :</p>

<pre><code>/**
 * Default Layout
 *
 * @author
 * @version
 */

echo '&lt;?xml version="1.0" encoding="UTF-8" ?&gt;';
echo $this-&gt;doctype()
?&gt;

&lt;html&gt;

    &lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="text/html;
        charset=UTF-8" /&gt;
        &lt;link rel="stylesheet" type="text/css" href="&lt;?php echo
        $this-&gt;baseUrl();?&gt;/styles/design.css" /&gt;
        &lt;?php
        echo $this-&gt;headTitle();
        echo $this-&gt;headScript();
        echo $this-&gt;headStyle();
        ?&gt;
    &lt;/head&gt;

    &lt;body&gt;
        &lt;h1&gt;&lt;?php echo $this-&gt;placeholder('title')
        ?&gt;&lt;/h1&gt;
        &lt;?php echo $this-&gt;layout()-&gt;content ?&gt;

        &lt;br /&gt;
        &lt;br /&gt;
    &lt;/body&gt;

&lt;/html&gt;
</code></pre>

<p>Voila maintenant il suffit de faire la meme chose pour les fichiers
<strong>JavaScipts</strong> On peut donc passer a la suite avec : <a href="../zend/zend-comment-utiliser-un-layout.html" title="Zend et les layouts">Comment mettre en place un
layout ou template avec Zend Framework</a></p>
]]></content>
    </entry>
    </feed>
